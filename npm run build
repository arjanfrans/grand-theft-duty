(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//We use window.game because we want it to be accessible from everywhere
window.game = new Phaser.Game(800, 600, Phaser.AUTO);

game.globals = {
    //Add variables here that you want to access globally
    //score: 0 could be accessed as game.globals.score for example
};

game.state.add('play', require('./states/play.js'));
game.state.add('load', require('./states/load.js'));
game.state.add('menu', require('./states/menu.js'));
game.state.add('boot', require('./states/boot.js'));
game.state.start('boot');

},{"./states/boot.js":2,"./states/load.js":3,"./states/menu.js":4,"./states/play.js":5}],2:[function(require,module,exports){
class A {

};
module.exports = {
    init: function () {
        //Add here your scaling options
    },

    preload: function () {
        //Load just the essential files for the loading screen,
        //they will be used in the Load State
        game.load.image('loading', 'assets/loading.png');
        game.load.image('load_progress_bar', 'assets/progress_bar_bg.png');
        game.load.image('load_progress_bar_dark', 'assets/progress_bar_fg.png');
    },

    create: function () {
        game.state.start('load');
    }
};

},{}],3:[function(require,module,exports){
module.exports = {
    loadingLabel: function () {
        //Here we add a label to let the user know we are loading everything
        //This is the "Loading" phrase in pixel art
        //You can just as easily change it for your own art :)
        this.loading = game.add.sprite(game.world.centerX, game.world.centerY - 20, 'loading');
        this.loading.anchor.setTo(0.5, 0.5);
        //This is the bright blue bar that is hidden by the dark bar
        this.barBg = game.add.sprite(game.world.centerX, game.world.centerY + 40, 'load_progress_bar');
        this.barBg.anchor.setTo(0.5, 0.5);
        //This bar will get cropped by the setPreloadSprite function as the game loads!
        this.bar = game.add.sprite(game.world.centerX - 192, game.world.centerY + 40, 'load_progress_bar_dark');
        this.bar.anchor.setTo(0, 0.5);
        game.load.setPreloadSprite(this.bar);
    },

    preload: function () {
        this.loadingLabel();
        //Add here all the assets that you need to game.load
    },

    create: function () {
        game.state.start('menu');
    }
};

},{}],4:[function(require,module,exports){
module.exports = {

    menuLabels: function () {
        var test = null;
        this.startLabel = game.add.text(80, 80, 'press "w" to start', {
            font: '25px Arial', fill: '#dddddd' });

        this.startKey = game.input.keyboard.addKey(Phaser.Keyboard.W);

        this.startKey.onDown.addOnce(function () {
            game.state.start('play');
        });

    },

    create: function(){
        this.menuLabels();
    },

    update: function(){
    //Game logic goes here
    },
};

},{}],5:[function(require,module,exports){
let map = {
    instance: null,

    layers: {},

    preload: function () {
        game.load.tilemap('map_test', 'assets/maps/test.json', null, Phaser.Tilemap.TILED_JSON);
        game.load.image('tileset_test', 'assets/maps/spritesheet.png');
    },

    create: function () {
        this.instance = game.add.tilemap('map_test');
        this.instance.addTilesetImage('main', 'tileset_test');
        this.layers.ground = this.instance.createLayer('ground');
    }
};

module.exports = {
    preload: function () {
        map.preload();

        game.load.image('player', 'assets/phaser-dude.png');

    },

    create: function(){
        map.create();

        game.world.setBounds(0, 0, 1920, 1920);
        game.physics.startSystem(Phaser.Physics.P2JS);

        this.player = game.add.sprite(game.world.centerX, game.world.centerY, 'player');

        game.physics.p2.enable(this.player);

        this.cursors = game.input.keyboard.createCursorKeys();

        game.camera.follow(this.player);
    },
    update: function(){
        this.player.body.setZeroVelocity();

        if (this.cursors.up.isDown) {
            this.player.body.moveUp(300)
        } else if (this.cursors.down.isDown){
            this.player.body.moveDown(300);
        } if (this.cursors.left.isDown) {
            this.player.body.velocity.x = -300;
        } else if (this.cursors.right.isDown) {
            this.player.body.moveRight(300);
        }
    },

    render: function() {
        game.debug.cameraInfo(game.camera, 32, 32);
        game.debug.spriteCoords(this.player, 32, 500);
    }
};

},{}]},{},[1]);
