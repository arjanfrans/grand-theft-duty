{"version":3,"sources":["engine/input/Keys.ts","engine/AssetManager.js","engine/input/KeyboardInputSource.ts","client/AbstractState.ts","client/Game.ts","engine/input/Keyboard.ts","engine/utils/debug/statsjs.js","client/menu/MenuInput.ts","engine/renderer/render-view/ThreeRenderView.ts","client/menu/views/MenuRenderView.ts","client/StateAudio.ts","client/menu/MenuAudio.ts","engine/menu-system/Menu.js","engine/menu-system/MenuItem.js","engine/menu-system/MenuInputItem.js","engine/graphics/TextureAtlas.js","engine/graphics/TextureManager.js","engine/graphics/TextureFrame.js","engine/graphics/View.js","engine/graphics/BackgroundView.js","engine/graphics/ViewContainer.js","client/menu/views/LogoView.js","engine/three-bmfont-text/lib/utils.js","engine/three-bmfont-text/lib/layout-bmfont-text.js","engine/three-bmfont-text/index.js","engine/three-bmfont-text/lib/vertices.js","engine/graphics/TextView.js","client/menu/views/MenuItemsView.js","client/menu/menus/OptionsMenu.js","client/menu/menus/HelpMenu.js","client/update-system/PauseUpdateSystem.ts","engine/utils/ObjectPool.ts","engine/math/Vector2Helper.ts","engine/math/Polygon.ts","core/entities/Entity.ts","core/entities/Bullet.ts","engine/math/Box.ts","engine/math/VornoiRegion.ts","engine/physics/SatResult.ts","engine/physics/SeparatingAxisTheorem.ts","core/CollisionUtils.js","core/BulletSystem.ts","client/play/PlayState.ts","client/play/ui/StatsRenderView.ts","client/play/ui/AmmoView.js","client/play/ui/HealthView.js","client/play/ui/WeaponView.js","client/play/ui/ScoreView.js","client/play/views/BulletView.js","client/play/views/BulletSystemView.ts","engine/graphics/Animation.js","client/play/views/world/WaterBlocksView.js","client/play/views/world/StaticBlocksView.js","client/play/views/lights/LightView.js","client/play/views/WorldMapView.js","client/play/views/SoldierView.js","client/play/views/SoldierViewPool.ts","client/play/views/PlayRenderView.ts","client/play/ViewBuilder.js","core/Match.ts","client/play/input/PlayerInput.ts","client/play/input/UiInput.ts","core/entities/Character.ts","core/weapons/Gun.js","core/weapons/WeaponFactory.js","core/entities/Soldier.ts","core/entities/Player.ts","client/play/PlayAudio.ts","core/maps/Block.js","core/maps/Light.js","core/maps/WorldMap.js","core/maps/MapParser.js","client/update-system/CollisionUpdateSystem.ts","client/update-system/BulletUpdateSystem.ts","engine/system/ControllerUpdateSystem.ts","client/play/input/ComputerInput.ts","client/update-system/AudioUpdateSystem.ts","client/update-system/MatchUpdateSystem.ts","client/play/PlayBuilder.ts","client/menu/menus/MainMenu.js","client/menu/MenuState.ts","client/menu/MenuBuilder.ts","engine/input/utils/gamepad-micro.js","engine/input/Gamepad.ts","engine/input/GamepadInputSource.ts","engine/renderer/ThreeRenderer.ts","engine/utils/debug/RenderDebug.js","engine/renderer/DebugThreeRenderer.ts","engine/state/NullState.ts","engine/Engine.ts","index.ts"],"names":["Keys","BACKSPACE","CTRL","SPACE","ENTER","SHIFT","ESC","TAB","LEFT","UP","RIGHT","DOWN","SpecialKeysShift","_","SpecialKeys","NumberKeys","LetterKeys","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AllKeys","_assets","atlases","Map","textures","maps","fonts","audio","_loadAudioSprite","audioSpritePath","name","_loadJson","then","spriteJson","src","urls","fullSources","push","Promise","resolve","reject","onload","onloaderror","soundId","err","sound","Howler","Howl","mapping","set","_loadHowlerAudio","_loadFont","fontsPath","font","pages","fontJson","pageTextures","map","pageName","_loadTexture","all","page","get","url","_textureLoader","load","texture","progress","console","log","loaded","total","fileLoader","response","_loadXhr","JSON","parse","_loadAtlas","atlasesPath","atlas","meta","image","_loadMap","mapsPath","AssetLoader","init","assetConfig","TextureLoader","FileLoader","assetsToLoad","paths","textureAtlases","atlasName","mapName","fontName","audioSpriteName","getTexture","Error","cloneTexture","clone","this","needsUpdate","getMap","getAtlasMapping","getFont","getAudioSprite","audioSprite","KeyboardInputSource","keyboard","Keyboard","global","addEventListener","event","onKeyup","onKeydown","AbstractState","engine","views","_initialized","systems","orderedSystems","Set","view","add","system","priority","orderSystems","sort","a","b","delta","update","values","ASSET_PATH","path","__dirname","ASSET_CONFIG","Game","AssetManager","Engine","renderer","DebugThreeRenderer","div","width","height","input","gamepad","GamepadInputSource","menuState","MenuBuilder","create","addState","changeState","run","keys","_previousKeyboardKeys","_pressed","shiftDown","lastPressed","charKeys","codes","charCodes","codesShift","Object","concat","entries","key","code","charKey","shiftKey","keyCode","isDown","indexOf","shiftCode","toUpperCase","toLowerCase","Stats","now","performance","bind","Date","startTime","prevTime","frames","modes","createElement","tag","id","css","element","document","style","cssText","createPanel","fg","bg","text","innerHTML","appendChild","graph","i","setModes","children","container","length","display","updateGraph","dom","value","firstChild","Math","min","fps","fpsMin","Number","POSITIVE_INFINITY","fpsMax","fpsDiv","fpsText","fpsGraph","ms","msMin","msMax","msDiv","msText","msGraph","mem","memMin","memMax","memDiv","memText","memGraph","memory","REVISION","domElement","setMode","begin","end","time","max","textContent","round","heapSize","usedJSHeapSize","heapSizeLimit","jsHeapSizeLimit","MenuInput","inputSources","state","keyboardInputSource","gamepadInputSource","selectedItem","currentMenu","isEditing","keyboardDownOnce","isStickDown","moveUp","moveDown","editable","slice","lastPressedIsChar","keyByCode","lastPressedChar","gamepadButtonDownOnce","selectCurrentItem","ThreeRenderView","clearColor","viewContainers","currentViewContainerName","_currentViewContainer","_scene","currentViewContainer","Scene","viewContainer","mesh","visible","scene","warn","size","newViewContainer","MenuRenderView","camera","undefined","menu","menus","OrthographicCamera","currentMenuName","StateAudio","effectsSpriteName","backgroundSpriteName","effects","backgrounds","stop","MenuAudio","play","Menu","menuItems","menuItemKeys","selectedItemIndex","freeze","menuItem","action","MenuItem","onAction","MenuInputItem","label","defaultValue","_value","TextureAtlas","wrapS","RepeatWrapping","wrapT","w","h","frame","d","bounds","Vector2","x","y","filename","framePosition","frameSize","_atlases","TextureManager","TextureFrame","textureAtlas","geometry","initialFrame","fixed","getFrameSize","_changeSize","aw","ah","faceVertexUvs","uvsNeedUpdate","frameName","offset","getFrameOffset","View","initialPosition","position","z","initialized","BackgroundView","textureName","textureAtlasName","_width","_height","_lightness","getAtlas","PlaneGeometry","textureFrame","material","MeshBasicMaterial","transparent","hsl","color","getHSL","setHSL","s","Mesh","lightness","_initalized","scale","ViewContainer","staticViews","dynamicViews","_backgroundView","Object3D","renderOrder","staticView","backgroundView","remove","dynamicView","updateMatrix","updateMatrixWorld","LogoView","logoSize","box","positions","count","X_HEIGHTS","M_WIDTHS","CAP_HEIGHTS","TAB_ID","charCodeAt","SPACE_ID","TextLayout","opt","glyphs","_measure","computeMetrics","wrapper","Function","join","getGlyphById","chars","glyphIdx","findChar","getKerning","left","right","kernings","table","kern","first","second","amount","array","start","prototype","xtend","measure","_opt","tabSize","number","_setupSpaceGlyphs","lines","wordWrap","minWidth","maxLineWidth","reduce","prev","line","lineHeight","common","baseline","base","descender","letterSpacing","align","getAlignType","_descender","_baseline","_xHeight","idx","getXHeight","_capHeight","getCapHeight","_lineHeight","_ascender","self","forEach","lineIndex","lastGlyph","lineWidth","glyph","getGlyph","tx","data","index","xadvance","_linesTotal","_fallbackSpaceGlyph","_fallbackTabGlyph","space","getMGlyph","tabWidth","xoffset","yoffset","curPen","curWidth","nextPen","nextWidth","defineProperty","configurable","TextGeometry","assign","TypeError","layout","createLayout","flipY","texWidth","scaleW","texHeight","scaleH","filter","bitmap","visibleGlyphs","Float32Array","vertices","uvs","bw","bh","u0","v1","u1","v0","indices","createIndices","clockwise","type","setIndex","addAttribute","BufferAttribute","multipage","attributes","removeAttribute","boundingSphere","Sphere","itemSize","radius","center","output","minX","minY","sqrt","utils","isNaN","error","boundingBox","Box3","bbox","makeEmpty","BufferGeometry","TextView","options","_text","aligh","_color","rotation","PI","setHex","toString","_updateGeometry","MenuItemsView","selectedTextColor","textColor","viewMenuItemPairs","selectedView","logoView","itemCount","textView","previousItem","currentView","previousView","OptionsMenu","addMenuItem","changeOption","addDynamicView","background","HelpMenu","PauseUpdateSystem","isPaused","ObjectPool","factoryFunction","firstAllocationNumber","allocationNumber","allocationLimit","totalInstances","availableInstances","allocate","pop","object","Vector2Helper","v","Polygon","angle","computedVertices","edges","normals","setVertices","_compute","len","rotateAround","computedVertex","copy","p1","p2","e","sub","perp","normalize","xMin","yMin","xMax","yMax","vertex","fromBox","Entity","depth","previousPosition","speed","rotationSpeed","_body","dead","velocity","isMoving","reverse","angularVelocity","collidable","shouldUpdate","actions","firedBullet","reset","halfWidth","halfHeight","physics","bullets","isBullet","isPlayer","isCharacter","isSoldier","body","setAngle","cos","sin","Bullet","firedBy","firedByWeapon","maxDistance","traveledDistance","damage","Box","pos","VoronoiRegion","point","len2","lengthSq","dp","dot","LEFT_VORONOI_REGION","RIGHT_VORONOI_REGION","MIDDLE_VORONOI_REGION","SatResult","overlapN","overlapV","aInB","bInA","overlap","MAX_VALUE","clear","POINT_POLYGON","toPolygon","SeparatingAxisTheorem","arrayPool","vectorPool","cachedSatResult","aPos","bPos","aPoints","bPoints","axis","result","rangeA","rangeB","offsetV","projectedOffset","flattenVerticesOn","free","option1","option2","absOverlap","abs","negate","polygon","circle","circlePos","radius2","points","edge","next","region","calculate","point2","dist","normal","distAbs","multiplyScalar","testPolygonInCircle","testPolygonInPolygon","aLen","bLen","isSeparatingAxis","differenceV","totalRadius","totalRadiusSq","distanceSq","radiusSq","sat","CollisionUtils","wallCollision","entity","onCollision","ray","rayDistance","rayPositions","blockWidth","blockHeight","blocks","blocksBetweenPositions","block","polygons","bodies","floorCollision","nextEntityPosition","floorBlockIndex","positionToIndex","blockAtIndex","walls","top","fall","BulletSystem","poolLimit","soldiers","bulletPool","deadBullets","activeBullets","bullet","firstBullet","currentWeapon","respawn","soldier","_fireBullet","kill","delete","testPointInPolygon","hitByBullet","PlayState","match","bulletSystem","player","showScores","pauseSystem","StatsRenderView","AmmoView","ammoSize","ammoMesh","magazineText","ammoText","ammo","magazine","weapon","HealthView","_healthScale","applyMatrix","Matrix4","makeTranslation","oldX","healthScale","health","maxHealth","WeaponView","_weapon","ScoreView","backgroundMaterial","MeshLambertMaterial","opacity","backgroundGeometry","scoreTextView","_scoreText","teams","resultText","teamName","teamData","kills","deaths","soldierText","totalKills","totalDeaths","converToText","sortedScores","BulletView","interpolationPercentage","previous","current","BulletSystemView","bulletViewPool","bulletViewPairs","WeakMap","poolSize","deadBullet","bulletView","Animation","interval","framePrefix","currentFrameIndex","currentDisplayTime","_updateTexture","WATER_FRAMES","waterGeometry","geometries","getBounds","topGeometry","translate","blockGeometry","Geometry","merge","WaterBlocksView","waterFrames","_textureAtlasName","_waterFrames","blockDepth","mergedGeometry","mergeVertices","createMergedBlockGeometry","animation","wallBlockGeometry","south","southGeometry","rotateY","north","northGeometry","west","westGeometry","rotateX","east","eastGeometry","StaticBlocksView","side","DoubleSide","LightView","light","lightGeometry","lightMaterial","lightMesh","sourcePosition","rotateZ","spotLight","SpotLight","target","translateX","translateY","translateZ","WorldMapView","wallsView","waterView","lights","lightView","WALK_FRAMES","RUN_FRAMES","IDLE_FRAMES","TEAM_COLORS","american","german","SoldierView","_team","team","animations","walk","idle","currentAnimation","offsetHSL","isRunning","zOffset","_updateAnimation","SoldierViewPool","viewPool","viewPairs","has","PlayRenderView","_cameraFollowView","_cameraFollowLight","PerspectiveCamera","getCamera","ambientLight","AmbientLight","exponent","paused","cameraFollowView","setX","setY","cameraFollowLight","setZ","ViewBuilder","playState","uiView","uiViewContainer","scoreView","weaponView","ammoView","healthView","addViewContainer","playView","playerView","soldierView","bulletSystemView","worldMapView","Match","matchTime","matchDuration","teamNames","leastTeamName","minCount","teamWithLeastPlayers","teamA","teamB","soldierStatsByTeam","stat","resultsByTeam","teamResult","PlayerInput","stopMoving","turnRight","turnLeft","stopTurning","fireBullet","reload","scrollWeapons","UiInput","resume","pause","Character","walkingSpeed","runningSpeed","_isRunning","running","Gun","maxMagazine","maxAmmo","fireRate","reloadTime","_reloadingTime","_firedTime","_canFire","isReloading","fired","refill","floor","_fired","mp44","thompson","Soldier","weapons","currentWeaponIndex","addWeapon","WeaponFactory","direction","deathCount","killedByCount","suicides","fire","Player","PlayAudio","entities","Block","_position","_walls","_computeBodies","Light","WorldMap","layers","types","blocksBetweenIndexes","respawns","random","indexToPosition","indexes","blockAtPosition","finalString","layer","layerStrings","_parseBlock","rawBlock","blockOptions","parseLight","rawLight","rawPosition","MapParser","rawMap","rawBlocks","mapWidth","mapHeight","mapDepth","row","_createEmptyLayers","worldMap","_parseRawMap","CollisionUpdateSystem","stopFalling","BulletUpdateSystem","ControllerUpdateSystem","controllers","ComputerInput","AudioUpdateSystem","MatchUpdateSystem","randomRespawnPosition","PlayBuilder","createSingleplayer","addSoldier","createCpuSoldiers","cpuCount","createPlayer","playerName","addSystem","addView","createViews","createMenu","states","gamePlaying","playOptions","createPlayState","MainMenu","addStaticView","createView","MenuState","_currentMenu","currentOptionsEdit","optionName","subMenus","subMenuName","subMenu","addMenu","menuView","GamepadMicro","_buttonNames","_ticking","_prevTimestamps","_connectionListening","_updateCallback","_prevRawGamepadTypes","gamepadconnected","_getRawGamepads","gamepadConnected","Boolean","gamepadSupported","_gamepadSupported","gamepads","_heldButtonDelay","_heldTimestampByGamepad","onUpdate","callback","_checkForEvents","_setupPoll","offUpdate","_shouldRemoveEvents","_removePoll","window","_onGamepadConnected","_onGamepadDisconnected","removeEventListener","leftStick","rightStick","dPad","buttons","timestamp","disconnectedGamepad","splice","navigator","getGamepads","webkitGetGamepads","standardGamepads","gp","_buttonPressed","pressure","_checkForGamepadChange","rawGamepads","changed","changedRawGamepads","gamepadIndex","heldTimestamps","hasBeenHeld","_poll","currentGamepads","buttonNames","currentRawGamepad","currentGamepad","activeButtons","k","heldTimestamp","wasDown","released","held","gamepadTimestamp","browserTimestamp","axes","dPadLeft","dPadRight","dPadUp","dPadDown","_tick","tickFunc","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","webkitGamepads","Gamepad","_previousGamepadStick","_previousGamepadButton","gamepadsconnected","button","stick","ThreeRenderer","_views","webglRenderer","WebGLRenderer","setSize","setClearColor","setPixelRatio","devicePixelRatio","autoClear","getElementById","changeSize","clearDepth","render","RenderDebug","statjs","DebugStats","bottom","rendererStats","msTexts","lastTime","info","programs","calls","faces","_rendererStats","renderDebug","before","after","NullState","currentState","inputSource","handleStateChange","loop","Mainloop","setUpdate","setDraw","setBegin","preRender","setEnd","postRender"],"mappings":"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","file":"static/js/main.79089849.chunk.js","sourcesContent":["export const Keys = {\n    BACKSPACE: 8,\n    CTRL: 17,\n    SPACE: 32,\n    ENTER: 13,\n    SHIFT: 16,\n    ESC: 27,\n    TAB: 9,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n};\n\nexport const SpecialKeysShift = {\n    \":\": 186,\n    \"+\": 187,\n    \"<\": 188,\n    _: 189,\n    \">\": 190,\n    \"?\": 191,\n    \"~\": 192,\n    \"{\": 219,\n    \"|\": 220,\n    \"}\": 221,\n    '\"': 222,\n};\n\nexport const SpecialKeys = {\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222,\n};\n\nexport const NumberKeys = {\n    \"0\": 48,\n    \"1\": 49,\n    \"2\": 50,\n    \"3\": 51,\n    \"4\": 52,\n    \"5\": 53,\n    \"6\": 54,\n    \"7\": 55,\n    \"8\": 56,\n    \"9\": 57,\n};\n\nexport const LetterKeys = {\n    A: 65,\n    B: 66,\n    C: 67,\n    D: 68,\n    E: 69,\n    F: 70,\n    G: 71,\n    H: 72,\n    I: 73,\n    J: 74,\n    K: 75,\n    L: 76,\n    M: 77,\n    N: 78,\n    O: 79,\n    P: 80,\n    Q: 81,\n    R: 82,\n    S: 83,\n    T: 84,\n    U: 86,\n    V: 86,\n    W: 87,\n    X: 88,\n    Y: 89,\n    Z: 90,\n};\nexport const AllKeys = {\n    ...Keys,\n    ...LetterKeys,\n    ...SpecialKeys,\n    ...NumberKeys,\n};\n","import Howler from 'howler';\nimport { FileLoader, TextureLoader } from 'three';\n\nconst _assets = {\n    atlases: new Map(),\n    textures: new Map(),\n    maps: new Map(),\n    fonts: new Map(),\n    audio: new Map()\n};\n\nconst _loadHowlerAudio = function (name, spriteJson) {\n    return new Promise((resolve, reject) => {\n        spriteJson.onload = function () {\n            return resolve();\n        };\n\n        spriteJson.onloaderror = function (soundId, err) {\n            return reject(err);\n        };\n\n        const sound = new Howler.Howl(spriteJson);\n\n        const audio = {\n            mapping: spriteJson,\n            sound: sound\n        };\n\n        _assets.audio.set(name, audio);\n    });\n};\n\nconst _loadAudioSprite = function (audioSpritePath, name) {\n    return _loadJson(audioSpritePath + name + '.json').then(function (spriteJson) {\n        // FIXME change \"urls\" to \"src\" to work with Howler 2\n        spriteJson.src = spriteJson.urls;\n\n        const fullSources = [];\n\n        for (const src of spriteJson.src) {\n            fullSources.push(audioSpritePath + src);\n        }\n\n        spriteJson.src = fullSources;\n\n        return _loadHowlerAudio(name, spriteJson);\n    });\n};\n\nconst _loadFont = function (fontsPath, name) {\n    const font = {\n        mapping: null,\n        pages: [],\n        textures: []\n    };\n\n    return _loadJson(fontsPath + name + '.json').then((fontJson) => {\n        font.mapping = fontJson;\n\n        const pageTextures = fontJson.pages.map((pageName) => {\n            font.pages.push(pageName);\n\n            return _loadTexture(pageName, fontsPath + pageName);\n        });\n\n        return Promise.all(pageTextures);\n    }).then(() => {\n        for (const page of font.pages) {\n            font.textures.push(_assets.textures.get(page));\n        }\n\n        _assets.fonts.set(name, font);\n    });\n};\n\nconst _loadTexture = function (name, url) {\n    return new Promise(function (resolve, reject) {\n        _textureLoader.load(url, function (texture) {\n            _assets.textures.set(name, texture);\n\n            return resolve();\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadXhr = function (url) {\n    return new Promise(function (resolve, reject) {\n        fileLoader.load(url, function (response) {\n            return resolve(response);\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadJson = function (url) {\n    return _loadXhr(url).then(function (response) {\n        try {\n            return JSON.parse(response);\n        } catch (err) {\n            throw err;\n        }\n    });\n};\n\nconst _loadAtlas = function (atlasesPath, name) {\n    return _loadJson(atlasesPath + name + '.json').then(function (atlas) {\n        return atlas;\n    }).then(function (atlas) {\n        _assets.atlases.set(name, atlas);\n\n        return _loadTexture(name, atlasesPath + atlas.meta.image);\n    });\n};\n\nconst _loadMap = function (mapsPath, name) {\n    return _loadJson(mapsPath + name + '.json').then(function (atlas) {\n        _assets.maps.set(name, atlas);\n    });\n};\n\nlet _textureLoader = null;\nlet fileLoader = null;\n\nconst AssetLoader = {\n    init: function (assetConfig) {\n        _textureLoader = new TextureLoader();\n        fileLoader = new FileLoader();\n\n        const assetsToLoad = [];\n        const paths = assetConfig.paths;\n\n        for (const atlasName of assetConfig.textureAtlases) {\n            assetsToLoad.push(_loadAtlas(paths.atlases + '/', atlasName));\n        }\n\n        for (const mapName of assetConfig.maps) {\n            assetsToLoad.push(_loadMap(paths.maps + '/', mapName));\n        }\n\n        for (const fontName of assetConfig.fonts) {\n            assetsToLoad.push(_loadFont(paths.fonts + '/', fontName));\n        }\n\n        for (const audioSpriteName of assetConfig.audio) {\n            assetsToLoad.push(_loadAudioSprite(paths.audio + '/', audioSpriteName));\n        }\n\n        return Promise.all(assetsToLoad);\n    },\n\n    getTexture (name) {\n        const texture = _assets.textures.get(name);\n\n        if (!texture) {\n            throw new Error('Texture does not exist: ' + name);\n        }\n\n        return texture;\n    },\n\n    cloneTexture (name) {\n        const texture = this.getTexture(name);\n        const clone = texture.clone();\n\n        clone.needsUpdate = true;\n\n        return clone;\n    },\n\n    getMap (name) {\n        const map = _assets.maps.get(name);\n\n        if (!map) {\n            throw new Error('Map does not exist: ' + name);\n        }\n\n        return map;\n    },\n\n    getAtlasMapping (name) {\n        const mapping = _assets.atlases.get(name);\n\n        if (!mapping) {\n            throw new Error('Atlas mapping does not exist: ' + name);\n        }\n\n        return mapping;\n    },\n\n    getFont (name) {\n        const font = _assets.fonts.get(name);\n\n        if (!font) {\n            throw new Error('Font does not exist: ' + name);\n        }\n\n        return font;\n    },\n\n    getAudioSprite (name) {\n        const audioSprite = _assets.audio.get(name);\n\n        if (!audioSprite) {\n            throw new Error('Audio sprite does not exist: ' + name);\n        }\n\n        return audioSprite;\n    }\n};\n\nexport default AssetLoader;\n","import { Keyboard } from \"./Keyboard\";\nimport { InputSourceInterface } from \"./InputSourceInterface\";\n\nexport class KeyboardInputSource implements InputSourceInterface {\n    public readonly keyboard: Keyboard;\n\n    constructor() {\n        this.keyboard = new Keyboard();\n\n        global.addEventListener(\n            \"keyup\",\n            (event) => {\n                this.keyboard.onKeyup(event);\n            },\n            false\n        );\n\n        global.addEventListener(\n            \"keydown\",\n            (event) => {\n                this.keyboard.onKeydown(event);\n            },\n            false\n        );\n    }\n}\n","import { Engine } from \"../engine/Engine\";\nimport { SystemUpdateInterface } from \"../engine/system/SystemUpdateInterface\";\n\nexport abstract class AbstractState {\n    protected readonly name: string;\n    protected readonly engine: Engine;\n    public readonly views: Set<any>;\n    protected _initialized = false;\n\n    protected systems: { system: SystemUpdateInterface; priority: number }[] =\n        [];\n    private orderedSystems: SystemUpdateInterface[] = [];\n\n    protected constructor(name: string, engine: Engine) {\n        this.name = name;\n        this.engine = engine;\n        this.views = new Set();\n    }\n\n    public addView(view: any): void {\n        this.views.add(view);\n    }\n\n    public addSystem(system: SystemUpdateInterface, priority: number) {\n        this.systems.push({\n            system,\n            priority,\n        });\n\n        this.orderSystems();\n    }\n\n    private orderSystems(): void {\n        const systems = [...this.systems].sort((a, b) => {\n            if (a.priority < b.priority) {\n                return -1;\n            } else if (a.priority > b.priority) {\n                return 1;\n            }\n            return 0;\n        });\n\n        this.orderedSystems = systems.map(({ system }) => system);\n    }\n\n    public update(delta: number) {\n        for (const system of this.orderedSystems) {\n            if (!system.update(delta)) {\n                break;\n            }\n        }\n    }\n\n    init() {\n        if (!this._initialized) {\n            for (const view of this.views.values()) {\n                view.init();\n            }\n\n            this._initialized = true;\n        }\n    }\n\n    render(delta) {\n        for (const view of this.views.values()) {\n            view.update(delta);\n        }\n    }\n}\n","import { Engine } from \"../engine/Engine\";\nimport AssetManager from \"../engine/AssetManager\";\nimport path from \"path\";\n\nimport MenuBuilder from \"./menu/MenuBuilder\";\nimport { KeyboardInputSource } from \"../engine/input/KeyboardInputSource\";\nimport { GamepadInputSource } from \"../engine/input/GamepadInputSource\";\nimport { DebugThreeRenderer } from \"../engine/renderer/DebugThreeRenderer\";\n\nconst ASSET_PATH = path.resolve(__dirname, \"../../assets/\");\nconst ASSET_CONFIG = {\n    paths: {\n        maps: ASSET_PATH + \"/maps\",\n        atlases: ASSET_PATH + \"/spritesheets\",\n        fonts: ASSET_PATH + \"/fonts\",\n        audio: ASSET_PATH + \"/audiosprites\",\n    },\n    textureAtlases: [\"soldier\", \"tiles\", \"world\", \"ui\"],\n    maps: [\"level1\", \"level2\"],\n    fonts: [\"keep_calm\"],\n    audio: [\"guns\", \"background\", \"menu_effects\"],\n};\n\nexport class Game {\n    /**\n     * Load assets and start the game.\n     */\n    public async start(): Promise<void> {\n        await AssetManager.init(ASSET_CONFIG);\n\n        const engine = new Engine({\n            renderer: new DebugThreeRenderer({\n                div: \"root\",\n                width: 800,\n                height: 600,\n            }),\n            input: {\n                keyboard: new KeyboardInputSource(),\n                gamepad: new GamepadInputSource(),\n            },\n        });\n\n        const menuState = MenuBuilder.create(engine);\n\n        engine.addState(\"menu\", menuState);\n\n        engine.changeState(\"menu\");\n\n        engine.run();\n    }\n}\n","import {\n    Keys,\n    LetterKeys,\n    NumberKeys,\n    SpecialKeys,\n    SpecialKeysShift,\n} from \"./Keys\";\n\nconst keys: { [key: string]: number } = {\n    ...Keys,\n    ...NumberKeys,\n    ...LetterKeys,\n    ...SpecialKeys,\n};\n\nexport class Keyboard {\n    private readonly _previousKeyboardKeys: { [key: number]: boolean } = {};\n    private _pressed: { [key: string]: boolean } = {};\n    private shiftDown: boolean = false;\n    public lastPressed?: number;\n    private readonly charKeys: string[];\n    private readonly codes: { [key: number]: string } = {};\n    private readonly charCodes: number[] = [];\n    private readonly codesShift: { [key: number]: string } = {};\n\n    constructor() {\n        this.charKeys = Object.keys(SpecialKeys)\n            .concat(Object.keys(NumberKeys))\n            .concat(Object.keys(LetterKeys));\n\n        for (const [key, code] of Object.entries(keys)) {\n            this.codes[code] = key;\n        }\n\n        for (const charKey of this.charKeys) {\n            this.charCodes.push(keys[charKey]);\n        }\n\n        for (const shiftKey of Object.keys(SpecialKeysShift)) {\n            const code = SpecialKeysShift[shiftKey];\n\n            this.codesShift[code] = shiftKey;\n        }\n    }\n\n    keyboardDownOnce(keyCode) {\n        if (!this._previousKeyboardKeys[keyCode] && this.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = true;\n\n            return true;\n        } else if (\n            this._previousKeyboardKeys[keyCode] &&\n            !this.isDown(keyCode)\n        ) {\n            this._previousKeyboardKeys[keyCode] = false;\n        }\n\n        return false;\n    }\n\n    lastPressedIsChar() {\n        const lastPressed = this.lastPressed;\n\n        if (lastPressed && this.charCodes.indexOf(lastPressed) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    lastPressedChar() {\n        const lastPressed = this.lastPressed;\n\n        if (!lastPressed) {\n            return undefined;\n        }\n\n        if (this.shiftDown) {\n            const shiftCode = this.codesShift[lastPressed];\n\n            if (\n                shiftCode &&\n                Object.keys(SpecialKeysShift).indexOf(shiftCode) !== -1\n            ) {\n                return this.codesShift[lastPressed];\n            }\n\n            return this.codes[lastPressed].toUpperCase();\n        }\n\n        return this.codes[lastPressed].toLowerCase();\n    }\n\n    public isDown(keyCode) {\n        return this._pressed[keyCode];\n    }\n\n    public onKeydown(event) {\n        this.shiftDown = event.shiftKey;\n        this.lastPressed = event.keyCode;\n        this._pressed[event.keyCode] = true;\n    }\n\n    onKeyup(event) {\n        this._pressed[event.keyCode] = false;\n    }\n\n    keyByCode(code) {\n        return this.codes[code];\n    }\n\n    get pressedCodes() {\n        return this._pressed;\n    }\n}\n","/**\n * View that shows FPS, memory usage and render time.\n *\n * @returns {object} statsjs object\n */\nconst Stats = function () {\n    const now = (global.performance && global.performance.now) ? global.performance.now.bind(performance) : Date.now;\n\n    let startTime = now();\n    let prevTime = startTime;\n    let frames = 0;\n    let modes = [0];\n\n    const createElement = function (tag, id, css) {\n        const element = document.createElement(tag);\n\n        element.id = id;\n        element.style.cssText = css;\n\n        return element;\n    };\n\n    const createPanel = function (id, fg, bg) {\n        const div = createElement('div', id, 'padding:0 0 3px 3px;text-align:left;background:' + bg);\n\n        const text = createElement('div', id + 'Text', 'font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px;color:' + fg);\n\n        text.innerHTML = id.toUpperCase();\n        div.appendChild(text);\n\n        const graph = createElement('div', id + 'Graph', 'width:74px;height:30px;background:' + fg);\n\n        div.appendChild(graph);\n\n        for (let i = 0; i < 74; i++) {\n            graph.appendChild(createElement('span', '', 'width:1px;height:30px;float:left;opacity:0.9;background:' + bg));\n        }\n\n        return div;\n    };\n\n    const setModes = function (values) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            if (values.indexOf(i) < 0) {\n                children[i].style.display = 'none';\n            } else {\n                children[i].style.display = 'block';\n            }\n        }\n\n        modes = values;\n    };\n\n    const setMode = function (value) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            children[i].style.display = i === value ? 'block' : 'none';\n        }\n\n        modes = [value];\n    };\n\n    const updateGraph = function (dom, value) {\n        const child = dom.appendChild(dom.firstChild);\n\n        child.style.height = Math.min(30, 30 - value * 30) + 'px';\n    };\n\n    const container = createElement('div', 'stats', 'width:80px;opacity:0.9;cursor:pointer');\n\n    // FPS\n    let fps = 0;\n    let fpsMin = Number.POSITIVE_INFINITY;\n    let fpsMax = 0;\n\n    const fpsDiv = createPanel('fps', '#0ff', '#002');\n    const fpsText = fpsDiv.children[0];\n    const fpsGraph = fpsDiv.children[1];\n\n    container.appendChild(fpsDiv);\n\n    // MS\n    let ms = 0;\n    let msMin = Number.POSITIVE_INFINITY;\n    let msMax = 0;\n\n    const msDiv = createPanel('ms', '#0f0', '#020');\n    const msText = msDiv.children[0];\n    const msGraph = msDiv.children[1];\n\n    container.appendChild(msDiv);\n\n    let mem = 0;\n    let memMin = Number.POSITIVE_INFINITY;\n    let memMax = 0;\n    const memDiv = createPanel('mb', '#f08', '#201');\n    const memText = memDiv.children[0];\n    const memGraph = memDiv.children[1];\n\n    // MEM\n    if (global.performance && global.performance.memory) {\n        container.appendChild(memDiv);\n    }\n\n    setModes([modes]);\n\n    return {\n        REVISION: 14,\n        domElement: container,\n        setMode: setMode,\n        setModes: setModes,\n        begin: function () {\n            startTime = now();\n        },\n        end: function () {\n            const time = now();\n\n            ms = time - startTime;\n            msMin = Math.min(msMin, ms);\n            msMax = Math.max(msMax, ms);\n\n            msText.textContent = (ms | 0) + ' MS (' + (msMin | 0) + '-' + (msMax | 0) + ')';\n            updateGraph(msGraph, ms / 200);\n\n            frames++;\n\n            if (time > prevTime + 1000) {\n                fps = Math.round((frames * 1000) / (time - prevTime));\n                fpsMin = Math.min(fpsMin, fps);\n                fpsMax = Math.max(fpsMax, fps);\n\n                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n                updateGraph(fpsGraph, fps / 100);\n\n                prevTime = time;\n                frames = 0;\n\n                if (typeof mem !== 'undefined' && performance && performance.memory) {\n                    const heapSize = performance.memory.usedJSHeapSize;\n                    const heapSizeLimit = performance.memory.jsHeapSizeLimit;\n\n                    mem = Math.round(heapSize * 0.000000954);\n                    memMin = Math.min(memMin, mem);\n                    memMax = Math.max(memMax, mem);\n\n                    memText.textContent = mem + ' MB (' + memMin + '-' + memMax + ')';\n                    updateGraph(memGraph, heapSize / heapSizeLimit);\n                }\n            }\n\n            return time;\n        },\n\n        update: function () {\n            startTime = this.end();\n        }\n    };\n};\n\nexport default Stats;\n","import Gamepad from \"../../engine/input/Gamepad\";\nimport { MenuState } from \"./MenuState\";\nimport { AllKeys, Keys } from \"../../engine/input/Keys\";\nimport { StateInput } from \"../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../engine/input/InputSourceInterface\";\nimport { Keyboard } from \"../../engine/input/Keyboard\";\nimport { KeyboardInputSource } from \"../../engine/input/KeyboardInputSource\";\nimport { GamepadInputSource } from \"../../engine/input/GamepadInputSource\";\n\nclass MenuInput implements StateInput {\n    private state: MenuState;\n    private gamepad?: Gamepad;\n    private keyboard: Keyboard;\n\n    constructor(\n        inputSources: Map<string, InputSourceInterface>,\n        state: MenuState\n    ) {\n        this.state = state;\n\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n    }\n\n    update() {\n        const state = this.state;\n        const selectedItem = state.currentMenu.selectedItem;\n\n        // Do not change selection while editing\n        if (!selectedItem.isEditing) {\n            if (\n                this.keyboard.keyboardDownOnce(Keys.UP) ||\n                this.gamepad?.isStickDown(\"left\", \"up\")\n            ) {\n                state.currentMenu.moveUp();\n            } else if (\n                this.keyboard.keyboardDownOnce(Keys.DOWN) ||\n                this.gamepad?.isStickDown(\"left\", \"down\")\n            ) {\n                state.currentMenu.moveDown();\n            }\n        }\n\n        if (selectedItem.editable && selectedItem.isEditing) {\n            if (this.keyboard.keyboardDownOnce(Keys.BACKSPACE)) {\n                selectedItem.value = selectedItem.value.slice(0, -1);\n            } else if (this.keyboard.lastPressedIsChar()) {\n                if (\n                    this.keyboard.keyboardDownOnce(\n                        AllKeys[\n                            this.keyboard.keyByCode(this.keyboard.lastPressed)\n                        ]\n                    )\n                ) {\n                    selectedItem.value += this.keyboard.lastPressedChar();\n                }\n            }\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(Keys.ENTER) ||\n            this.keyboard.keyboardDownOnce(Keys.SPACE) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionSouth\")\n        ) {\n            state.currentMenu.selectCurrentItem();\n        }\n    }\n}\n\nexport default MenuInput;\n","import { Camera, OrthographicCamera, PerspectiveCamera, Scene } from \"three\";\nimport { RenderViewInterface } from \"./RenderViewInterface\";\nimport { Dimension } from \"../../math/Dimension\";\n\nexport abstract class ThreeRenderView implements RenderViewInterface {\n    public width: number;\n    public height: number;\n    protected _initialized: boolean;\n    public clearColor: number;\n    public viewContainers: Map<any, any>;\n    public currentViewContainerName?: string;\n    public _currentViewContainer?: any;\n    private _scene?: Scene;\n\n    protected constructor() {\n        this.width = 0;\n        this.height = 0;\n\n        this._initialized = false;\n        this.clearColor = 0x000000;\n        this.viewContainers = new Map();\n        this.currentViewContainer = null;\n    }\n\n    public abstract getCamera():\n        | Camera\n        | OrthographicCamera\n        | PerspectiveCamera;\n\n    init() {\n        this._scene = new Scene();\n\n        for (let [name, viewContainer] of this.viewContainers.entries()) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this._scene.add(viewContainer.mesh);\n\n            if (name === this.currentViewContainerName) {\n                viewContainer.visible = true;\n                this._currentViewContainer = viewContainer;\n            } else {\n                viewContainer.visible = false;\n            }\n        }\n    }\n\n    get scene(): Scene {\n        const scene = this._scene;\n\n        if (!scene) {\n            throw new Error(\"Scene is undefined\");\n        }\n\n        return scene;\n    }\n\n    update(delta) {\n        if (this._currentViewContainer) {\n            this._currentViewContainer.update(delta);\n        } else {\n            console.warn(\"no current ViewContainer\");\n        }\n    }\n\n    changeSize(size: Dimension): void {\n        this.width = size.width;\n        this.height = size.height;\n\n        this.init();\n    }\n\n    set currentViewContainer(name) {\n        const newViewContainer = this.viewContainers.get(name);\n\n        if (this._initialized) {\n            if (this._currentViewContainer) {\n                this._currentViewContainer.visible = false;\n            }\n\n            newViewContainer.visible = true;\n        }\n\n        this.currentViewContainerName = name;\n        this._currentViewContainer = newViewContainer;\n    }\n\n    get currentViewContainer() {\n        return this._currentViewContainer;\n    }\n\n    addViewContainer(name, viewContainer) {\n        if (this._initialized) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n        }\n        this.viewContainers.set(name, viewContainer);\n    }\n}\n","import { Camera, OrthographicCamera, PerspectiveCamera } from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\nimport { MenuState } from \"../MenuState\";\n\nexport class MenuRenderView extends ThreeRenderView {\n    public camera?: OrthographicCamera = undefined;\n    private state: MenuState;\n    private menu: any;\n\n    constructor(state: MenuState) {\n        super();\n\n        this.state = state;\n        this.menu = state.menus;\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new OrthographicCamera(\n            0,\n            this.width,\n            this.height,\n            0,\n            0,\n            1\n        );\n\n        this._initialized = true;\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.currentViewContainerName !== this.state.currentMenuName) {\n            this.currentViewContainer = this.state.currentMenuName;\n        }\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as OrthographicCamera;\n    }\n}\n","import AssetManager from \"../engine/AssetManager\";\n\nexport abstract class StateAudio {\n    protected effectsSpriteName?: string;\n    protected backgroundSpriteName?: string;\n    protected effects?: any;\n    protected backgrounds?: any;\n\n    protected constructor(\n        effectsSpriteName?: string,\n        backgroundSpriteName?: string\n    ) {\n        this.effectsSpriteName = effectsSpriteName;\n        this.backgroundSpriteName = backgroundSpriteName;\n\n        this.effects = null;\n        this.backgrounds = null;\n\n        if (this.effectsSpriteName) {\n            this.effects = AssetManager.getAudioSprite(\n                this.effectsSpriteName\n            ).sound;\n        }\n\n        if (this.backgroundSpriteName) {\n            this.backgrounds = AssetManager.getAudioSprite(\n                this.backgroundSpriteName\n            ).sound;\n        }\n    }\n\n    public abstract update(delta: number): void;\n\n    stopEffects() {\n        if (this.effects) {\n            this.effects.stop();\n        }\n    }\n\n    stopBackground() {\n        if (this.backgrounds) {\n            this.backgrounds.stop();\n        }\n    }\n}\n","import { StateAudio } from \"../StateAudio\";\nimport { MenuState } from \"./MenuState\";\n\nclass MenuAudio extends StateAudio {\n    private selectedItem: any;\n    private state: MenuState;\n\n    constructor(\n        state: MenuState,\n        effectsSpriteName: string,\n        backgroundSpriteName: string\n    ) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.state = state;\n        this.selectedItem = state.currentMenu.selectedItem;\n    }\n\n    update(delta) {\n        // Selected item changed\n        if (this.selectedItem !== this.state.currentMenu.selectedItem) {\n            this.selectedItem = this.state.currentMenu.selectedItem;\n            this.effects.play(\"select\");\n        }\n    }\n}\n\nexport default MenuAudio;\n","class Menu {\n    constructor () {\n        this.menuItems = new Map();\n        this.menuItemKeys = [];\n        this.selectedItemIndex = 0;\n        this.freeze = false;\n    }\n\n    addMenuItem (menuItem) {\n        this.menuItemKeys.push(menuItem.name);\n        this.menuItems.set(menuItem.name, menuItem);\n    }\n\n    get selectedItem () {\n        return this.menuItems.get(this.menuItemKeys[this.selectedItemIndex]);\n    }\n\n    moveUp () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex > 0) {\n                this.selectedItemIndex -= 1;\n            } else {\n                this.selectedItemIndex = 0;\n            }\n        }\n    }\n\n    moveDown () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex < this.menuItemKeys.length - 1) {\n                this.selectedItemIndex += 1;\n            } else {\n                this.selectedItemIndex = this.menuItemKeys.length - 1;\n            }\n        }\n    }\n\n    selectCurrentItem () {\n        this.selectedItem.action();\n    }\n}\n\nexport default Menu;\n","class MenuItem {\n    constructor (name, text, onAction = null) {\n        this.name = name;\n        this.text = text;\n        this.onAction = onAction;\n        this.editable = false;\n    }\n\n    action () {\n        if (this.onAction) {\n            this.onAction(this);\n        }\n    }\n}\n\nexport default MenuItem;\n","import MenuItem from './MenuItem';\n\nclass MenuInputItem extends MenuItem {\n    constructor (name, label, defaultValue, onAction) {\n        super(name, label + ': ' + defaultValue, onAction);\n\n        this.label = label;\n        this.defaultValue = defaultValue;\n        this.isEditing = false;\n        this._value = defaultValue;\n        this.editable = true;\n    }\n\n    action () {\n        this.isEditing = !this.isEditing;\n\n        if (!this.isEditing && this.onAction) {\n            this.onAction(this._value);\n        }\n    }\n\n    set value (value) {\n        this._value = value;\n        this.text = this.label + ': ' + value;\n    }\n\n    get value () {\n        return this._value;\n    }\n}\n\nexport default MenuInputItem;\n","import { RepeatWrapping, Vector2 } from 'three';\nimport AssetManager from '../AssetManager';\n\nclass TextureAtlas {\n    constructor (name, clone, filter = {}) {\n        this.mapping = AssetManager.getAtlasMapping(name);\n\n        if (!this.mapping) {\n            throw new Error('TextureAtlas does not exists', name);\n        }\n\n        if (clone) {\n            this.texture = AssetManager.cloneTexture(name);\n        } else {\n            this.texture = AssetManager.getTexture(name);\n        }\n\n        this.texture.wrapS = RepeatWrapping;\n        this.texture.wrapT = RepeatWrapping;\n\n        this.width = this.mapping.meta.size.w;\n        this.height = this.mapping.meta.size.h;\n\n        this.frames = new Map();\n\n        for (const frame of this.mapping.frames) {\n            const d = frame.frame;\n\n            // Origin image is y-inverted compared to what THREE wants\n            const bounds = [\n                new Vector2(d.x / this.width, (this.height - (d.y)) / this.height), // lower left\n                new Vector2(d.x / this.width, (this.height - (d.y + d.h)) / this.height), // upper left\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y + d.h)) / this.height), // upper right\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y)) / this.height) // lower right\n            ];\n\n            this.frames.set(frame.filename, {\n                bounds: bounds,\n                frame: frame,\n                framePosition: {\n                    x: d.x,\n                    y: d.y\n                },\n                frameSize: {\n                    width: d.w,\n                    height: d.h\n                }\n            });\n        }\n    }\n\n    getFrameOffset (name) {\n        const d = this.frames.get(name + '.png').framePosition;\n\n        return new Vector2(d.x / this.width, (this.height - d.y) / this.height);\n    }\n\n    getFrameSize (name) {\n        return this.frames.get(name + '.png').frameSize;\n    }\n\n    getBounds (name) {\n        return this.frames.get(name + '.png').bounds;\n    }\n}\n\nexport default TextureAtlas;\n","import TextureAtlas from './TextureAtlas';\nconst _atlases = new Map();\n\nexport class TextureManager {\n    static getAtlas (name, clone) {\n        if (clone) {\n            return new TextureAtlas(name, clone);\n        }\n\n        let atlas = _atlases.get(name);\n\n        if (!atlas) {\n            atlas = new TextureAtlas(name);\n\n            _atlases.set(name, atlas);\n        }\n\n        return atlas;\n    }\n}\n","import { Vector2 } from 'three';\n\nexport class TextureFrame {\n    constructor (textureAtlas, geometry, initialFrame, fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n        this.fixed = fixed;\n\n        if (initialFrame) {\n            this.frame = initialFrame;\n\n            if (fixed) {\n                const size = this.textureAtlas.getFrameSize(initialFrame);\n\n                this._changeSize(size.width, size.height);\n            }\n        }\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _changeSize (width, height) {\n        this.width = width;\n        this.height = height;\n        const aw = this.textureAtlas.width;\n        const ah = this.textureAtlas.height;\n\n        if (this.geometry) {\n            // TODO make this more efficient (no new instances necessary)\n            const bounds = [\n                new Vector2(0, ah / ah), // lower left\n                new Vector2(0, (ah - height) / ah), // upper left\n                new Vector2(width / aw, (ah - height) / ah), // upper right\n                new Vector2(width / aw, ah / ah) // lower right\n            ];\n\n            // If a geometry is merged, for example multiple planes\n            for (let i = 1; i < this.geometry.faceVertexUvs[0].length; i += 2) {\n                this.geometry.faceVertexUvs[0][i - 1] = [bounds[0], bounds[1], bounds[3]];\n                this.geometry.faceVertexUvs[0][i] = [bounds[1], bounds[2], bounds[3]];\n            }\n\n            this.geometry.uvsNeedUpdate = true;\n        }\n    }\n\n    set frame (frameName) {\n        const offset = this.textureAtlas.getFrameOffset(frameName);\n        const size = this.textureAtlas.getFrameSize(frameName);\n\n        // Size changed\n        if (!this.fixed) {\n            if (size.width !== this.width || size.height !== this.height) {\n                this._changeSize(size.width, size.height);\n            }\n        }\n\n        this.texture.offset = offset;\n    }\n}\n","export class View {\n    constructor () {\n        this.mesh = null;\n        this.initialPosition = null;\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.initialPosition) {\n            if (!this.mesh) {\n                throw new Error('No mesh initialized!');\n            }\n\n            this.mesh.position.x = this.initialPosition.x;\n            this.mesh.position.y = this.initialPosition.y;\n            this.mesh.position.z = this.initialPosition.z;\n        }\n\n        this._initialized = true;\n    }\n\n    get position () {\n        return this.mesh.position;\n    }\n\n    set position ({ x, y, z }) {\n        if (this.mesh && this.initialized) {\n            if (x) {\n                this.mesh.position.x = x;\n            }\n\n            if (y) {\n                this.mesh.position.y = y;\n            }\n\n            if (z) {\n                this.mesh.position.z = z;\n            }\n        } else {\n            this.initialPosition = {\n                x: x,\n                y: y,\n                z: z\n            };\n        }\n    }\n}\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from './TextureManager';\nimport {TextureFrame} from './TextureFrame';\nimport {View} from './View';\n\nclass BackgroundView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n        this._width = null;\n        this._height = null;\n        this._lightness = 1;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const size = textureAtlas.getFrameSize(this.textureName);\n\n        this._width = size.width;\n        this._height = size.height;\n\n        this.geometry = new PlaneGeometry(size.width, size.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n\n        this.material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        const hsl = this.material.color.getHSL();\n\n        this.material.color.setHSL(hsl.h, hsl.s, this._lightness);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set lightness (lightness) {\n        if (this._initalized) {\n            const hsl = this.material.color.getHSL();\n\n            this.material.color.setHSL(hsl.h, hsl.s, lightness);\n        }\n\n        this._lightness = lightness;\n    }\n\n    get lightness () {\n        return this._lightness;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this.mesh.scale.x = scale;\n        this.mesh.position.x = width / 2;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this.mesh.scale.y = scale;\n        this.mesh.position.y = height / 2;\n    }\n}\n\nexport default BackgroundView;\n","import { Object3D } from 'three';\n\nclass ViewContainer {\n    constructor () {\n        this.staticViews = new Set();\n        this.dynamicViews = new Set();\n        this._backgroundView = null;\n        this._width = 800;\n        this._height = 600;\n\n        this._initialized = false;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        if (this._backgroundView) {\n            this._backgroundView.init();\n            this._backgroundView.width = this._width;\n            this._backgroundView.height = this._height;\n            this._backgroundView.mesh.renderOrder = -1;\n            this.mesh.add(this._backgroundView.mesh);\n        }\n\n        for (const staticView of this.staticViews) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        for (const view of this.dynamicViews) {\n            view.init();\n            this.mesh.add(view.mesh);\n        }\n\n        this._initialized = true;\n    }\n\n    set backgroundView (backgroundView) {\n        if (backgroundView !== this._backgroundView) {\n            if (this._initialized) {\n                this._backgroundView.init();\n                this._backgroundView.width = this._width;\n                this._backgroundView.height = this._height;\n                this._backgroundView.mesh.renderOrder = -1;\n                this.mesh.remove(this._backgroundView);\n            }\n\n            this._backgroundView = backgroundView;\n        } else {\n            console.warn('backgroundView is the same');\n        }\n    }\n\n    update (delta) {\n        if (!this._initialized) {\n            throw new Error('View not initialized.');\n        }\n\n        for (const view of this.dynamicViews) {\n            view.update(delta);\n        }\n    }\n\n    addStaticView (staticView, position) {\n        if (this._initialized) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        if (position) {\n            staticView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.staticViews.add(staticView);\n    }\n\n    addDynamicView (dynamicView, position) {\n        if (this._initialized) {\n            dynamicView.init();\n            this.mesh.add(dynamicView.mesh);\n        }\n\n        if (position) {\n            dynamicView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.dynamicViews.add(dynamicView);\n    }\n\n    set visible (visible) {\n        this.mesh.visible = visible;\n    }\n\n    get visible () {\n        return this.mesh.visible;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this._width = width;\n\n        if (this._backgroundView) {\n            this._backgroundView.width = this._width;\n        }\n\n        this.mesh.scale.x = scale;\n        this.mesh.updateMatrix();\n        this.mesh.updateMatrixWorld(true)\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this._height = height;\n\n        if (this._backgroundView) {\n            this._backgroundView.height = this._height;\n        }\n\n        this.mesh.scale.y = scale;\n        this.mesh.updateMatrix();\n        this.mesh.updateMatrixWorld(true)\n    }\n}\n\nexport default ViewContainer;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {View} from \"../../../engine/graphics/View\";\n\nclass LogoView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const logoSize = textureAtlas.getFrameSize(this.textureName);\n\n        this.geometry = new PlaneGeometry(logoSize.width, logoSize.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n        const material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n}\n\nexport default LogoView;\n","const itemSize = 2;\nconst box = {min: [0, 0], max: [0, 0]};\n\nfunction bounds (positions) {\n  const count = positions.length / itemSize;\n\n  box.min[0] = positions[0]\n  box.min[1] = positions[1]\n  box.max[0] = positions[0]\n  box.max[1] = positions[1]\n\n  for (let i = 0; i < count; i++) {\n    const x = positions[i * itemSize];\n    const y = positions[i * itemSize + 1];\n\n    box.min[0] = Math.min(x, box.min[0])\n    box.min[1] = Math.min(y, box.min[1])\n    box.max[0] = Math.max(x, box.max[0])\n    box.max[1] = Math.max(y, box.max[1])\n  }\n}\n\nexport function computeBox (positions, output) {\n  bounds(positions)\n  output.min.set(box.min[0], box.min[1], 0)\n  output.max.set(box.max[0], box.max[1], 0)\n}\n\nexport function computeSphere (positions, output) {\n  bounds(positions)\n\n  const minX = box.min[0];\n  const minY = box.min[1];\n  const maxX = box.max[0];\n  const maxY = box.max[1];\n  const width = maxX - minX;\n  const height = maxY - minY;\n  const length = Math.sqrt(width * width + height * height);\n\n  output.center.set(minX + width / 2, minY + height / 2, 0)\n  output.radius = length / 2\n}\n","import * as wordWrap from 'word-wrapper';\nimport * as xtend from 'xtend';\nimport * as number from 'as-number';\n\nconst X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z'];\nconst M_WIDTHS = ['m', 'w'];\nconst CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n\nconst TAB_ID = '\\t'.charCodeAt(0);\nconst SPACE_ID = ' '.charCodeAt(0);\nconst ALIGN_LEFT = 0,\n    ALIGN_CENTER = 1,\n    ALIGN_RIGHT = 2;\n\nexport function createLayout(opt) {\n    return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n    this.glyphs = []\n    this._measure = this.computeMetrics.bind(this)\n    this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n    opt = xtend({\n        measure: this._measure\n    }, opt)\n    this._opt = opt\n    this._opt.tabSize = number(this._opt.tabSize, 4)\n\n    if (!opt.font)\n        throw new Error('must provide a valid bitmap font')\n\n    const glyphs = this.glyphs;\n    const text = opt.text || '';\n    const font = opt.font;\n    this._setupSpaceGlyphs(font)\n\n    const lines = wordWrap.lines(text, opt);\n    const minWidth = opt.width || 0;\n\n    //clear glyphs\n    glyphs.length = 0\n\n    //get max line width\n    const maxLineWidth = lines.reduce(function (prev, line) {\n        return Math.max(prev, line.width, minWidth)\n    }, 0);\n\n    //the pen position\n    let x = 0;\n    let y = 0;\n    const lineHeight = number(opt.lineHeight, font.common.lineHeight);\n    const baseline = font.common.base;\n    const descender = lineHeight - baseline;\n    const letterSpacing = opt.letterSpacing || 0;\n    const height = lineHeight * lines.length - descender;\n    const align = getAlignType(this._opt.align);\n\n    //draw text along baseline\n    y -= height\n\n    //the metrics for this text layout\n    this._width = maxLineWidth\n    this._height = height\n    this._descender = lineHeight - baseline\n    this._baseline = baseline\n    this._xHeight = getXHeight(font)\n    this._capHeight = getCapHeight(font)\n    this._lineHeight = lineHeight\n    this._ascender = lineHeight - descender - this._xHeight\n\n    //layout each glyph\n    const self = this;\n    lines.forEach(function(line, lineIndex) {\n        const start = line.start;\n        const end = line.end;\n        const lineWidth = line.width;\n        let lastGlyph;\n\n        //for each glyph in that line...\n        for (let i=start; i<end; i++) {\n            const id = text.charCodeAt(i);\n            const glyph = self.getGlyph(font, id);\n            if (glyph) {\n                if (lastGlyph)\n                    x += getKerning(font, lastGlyph.id, glyph.id)\n\n                let tx = x;\n                if (align === ALIGN_CENTER)\n                    tx += (maxLineWidth-lineWidth)/2\n                else if (align === ALIGN_RIGHT)\n                    tx += (maxLineWidth-lineWidth)\n\n                glyphs.push({\n                    position: [tx, y],\n                    data: glyph,\n                    index: i,\n                    line: lineIndex\n                })\n\n                //move pen forward\n                x += glyph.xadvance + letterSpacing\n                lastGlyph = glyph\n            }\n        }\n\n        //next line down\n        y += lineHeight\n        x = 0\n    })\n    this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n    //These are fallbacks, when the font doesn't include\n    //' ' or '\\t' glyphs\n    this._fallbackSpaceGlyph = null\n    this._fallbackTabGlyph = null\n\n    if (!font.chars || font.chars.length === 0)\n        return\n\n    //try to get space glyph\n    //then fall back to the 'm' or 'w' glyphs\n    //then fall back to the first glyph available\n    const space = getGlyphById(font, SPACE_ID)\n        || getMGlyph(font)\n        || font.chars[0];\n\n    //and create a fallback for tab\n    const tabWidth = this._opt.tabSize * space.xadvance;\n    this._fallbackSpaceGlyph = space\n    this._fallbackTabGlyph = xtend(space, {\n        x: 0, y: 0, xadvance: tabWidth, id: TAB_ID,\n        xoffset: 0, yoffset: 0, width: 0, height: 0\n    })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n    const glyph = getGlyphById(font, id);\n    if (glyph)\n        return glyph\n    else if (id === TAB_ID)\n        return this._fallbackTabGlyph\n    else if (id === SPACE_ID)\n        return this._fallbackSpaceGlyph\n    return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n    const letterSpacing = this._opt.letterSpacing || 0;\n    const font = this._opt.font;\n    let curPen = 0;\n    let curWidth = 0;\n    let count = 0;\n    var glyph\n    let lastGlyph;\n\n    if (!font.chars || font.chars.length === 0) {\n        return {\n            start: start,\n            end: start,\n            width: 0\n        }\n    }\n\n    end = Math.min(text.length, end)\n    for (let i=start; i < end; i++) {\n        const id = text.charCodeAt(i);\n        var glyph = this.getGlyph(font, id)\n\n        if (glyph) {\n            //move pen forward\n            const xoff = glyph.xoffset;\n            const kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0;\n            curPen += kern\n\n            const nextPen = curPen + glyph.xadvance + letterSpacing;\n            const nextWidth = curPen + glyph.width;\n\n            //we've hit our limit; we can't move onto the next glyph\n            if (nextWidth >= width || nextPen >= width)\n                break\n\n            //otherwise continue along our line\n            curPen = nextPen\n            curWidth = nextWidth\n            lastGlyph = glyph\n        }\n        count++\n    }\n\n    //make sure rightmost edge lines up with rendered glyphs\n    if (lastGlyph)\n        curWidth += lastGlyph.xoffset\n\n    return {\n        start: start,\n        end: start + count,\n        width: curWidth\n    }\n}\n\n//getters for the private vars\n;['width', 'height',\n    'descender', 'ascender',\n    'xHeight', 'baseline',\n    'capHeight',\n    'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n    Object.defineProperty(TextLayout.prototype, name, {\n        get: wrapper(name),\n        configurable: true\n    })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n    return (new Function([\n        'return function '+name+'() {',\n        '  return this._'+name,\n        '}'\n    ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n    if (!font.chars || font.chars.length === 0)\n        return null\n\n    const glyphIdx = findChar(font.chars, id);\n    if (glyphIdx >= 0)\n        return font.chars[glyphIdx]\n    return null\n}\n\nfunction getXHeight(font) {\n    for (let i=0; i<X_HEIGHTS.length; i++) {\n        const id = X_HEIGHTS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getMGlyph(font) {\n    for (let i=0; i<M_WIDTHS.length; i++) {\n        const id = M_WIDTHS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx]\n    }\n    return 0\n}\n\nfunction getCapHeight(font) {\n    for (let i=0; i<CAP_HEIGHTS.length; i++) {\n        const id = CAP_HEIGHTS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getKerning(font, left, right) {\n    if (!font.kernings || font.kernings.length === 0)\n        return 0\n\n    const table = font.kernings;\n    for (let i=0; i<table.length; i++) {\n        const kern = table[i];\n        if (kern.first === left && kern.second === right)\n            return kern.amount\n    }\n    return 0\n}\n\nfunction getAlignType(align) {\n    if (align === 'center')\n        return ALIGN_CENTER\n    else if (align === 'right')\n        return ALIGN_RIGHT\n    return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n    start = start || 0\n    for (let i = start; i < array.length; i++) {\n        if (array[i].id === value) {\n            return i\n        }\n    }\n    return -1\n}\n","import { BufferGeometry, Box3, BufferAttribute, Sphere } from 'three';\nimport * as createIndices from 'quad-indices';\nimport * as vertices from './lib/vertices'\nimport * as utils from './lib/utils'\n\nimport {createLayout} from \"./lib/layout-bmfont-text\";\n\nexport class TextGeometry extends BufferGeometry {\n  constructor(opt) {\n    super();\n\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use these as default values for any subsequent\n    // calls to update()\n    this._opt = Object.assign({}, opt)\n\n    // also do an initial setup...\n    if (opt) this.update(opt)\n  }\n\n  update(opt) {\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use constructor defaults\n    opt = Object.assign({}, this._opt, opt)\n\n    if (!opt.font) {\n      throw new TypeError('must specify a { font } in options')\n    }\n\n    this.layout = createLayout(opt)\n\n    // get vec2 texcoords\n    const flipY = opt.flipY !== false;\n\n    // the desired BMFont data\n    const font = opt.font;\n\n    // determine texture size from font file\n    const texWidth = font.common.scaleW;\n    const texHeight = font.common.scaleH;\n\n    // get visible glyphs\n    const glyphs = this.layout.glyphs.filter(function (glyph) {\n      const bitmap = glyph.data;\n      return bitmap.width * bitmap.height > 0\n    });\n\n    // provide visible glyphs for convenience\n    this.visibleGlyphs = glyphs\n\n    // get common vertex data\n    const positions = vertices.positions(glyphs);\n    const uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY);\n    const indices = createIndices([], {\n      clockwise: true,\n      type: 'uint16',\n      count: glyphs.length\n    });\n\n    // update vertex data\n    this.setIndex(indices)\n    this.addAttribute('position', new BufferAttribute(positions, 2))\n    this.addAttribute('uv', new BufferAttribute(uvs, 2))\n\n    // update multipage data\n    if (!opt.multipage && 'page' in this.attributes) {\n      // disable multipage rendering\n      this.removeAttribute('page')\n    } else if (opt.multipage) {\n      // enable multipage rendering\n      const pages = vertices.pages(glyphs);\n      this.addAttribute('page', new BufferAttribute(pages, 1))\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere()\n    }\n\n    const positions = this.attributes.position.array;\n    const itemSize = this.attributes.position.itemSize;\n    if (!positions || !itemSize || positions.length < 2) {\n      this.boundingSphere.radius = 0\n      this.boundingSphere.center.set(0, 0, 0)\n      return\n    }\n    utils.computeSphere(positions, this.boundingSphere)\n    if (isNaN(this.boundingSphere.radius)) {\n      console.error('BufferGeometry.computeBoundingSphere(): ' +\n          'Computed radius is NaN. The ' +\n          '\"position\" attribute is likely to have NaN values.')\n    }\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3()\n    }\n\n    const bbox = this.boundingBox;\n    const positions = this.attributes.position.array;\n    const itemSize = this.attributes.position.itemSize;\n    if (!positions || !itemSize || positions.length < 2) {\n      bbox.makeEmpty()\n      return\n    }\n    utils.computeBox(positions, bbox)\n  }\n}\n","export function pages (glyphs) {\n  const pages = new Float32Array(glyphs.length * 4);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const id = glyph.data.page || 0;\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n  })\n  return pages\n}\n\nexport function uvs (glyphs, texWidth, texHeight, flipY) {\n  const uvs = new Float32Array(glyphs.length * 4 * 2);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const bitmap = glyph.data;\n    const bw = (bitmap.x + bitmap.width);\n    const bh = (bitmap.y + bitmap.height);\n\n    // top left position\n    const u0 = bitmap.x / texWidth;\n    let v1 = bitmap.y / texHeight;\n    const u1 = bw / texWidth;\n    let v0 = bh / texHeight;\n\n    if (flipY) {\n      v1 = (texHeight - bitmap.y) / texHeight\n      v0 = (texHeight - bh) / texHeight\n    }\n\n    // BL\n    uvs[i++] = u0\n    uvs[i++] = v1\n    // TL\n    uvs[i++] = u0\n    uvs[i++] = v0\n    // TR\n    uvs[i++] = u1\n    uvs[i++] = v0\n    // BR\n    uvs[i++] = u1\n    uvs[i++] = v1\n  })\n  return uvs\n}\n\nexport function positions (glyphs) {\n  const positions = new Float32Array(glyphs.length * 4 * 2);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const bitmap = glyph.data;\n\n    // bottom left position\n    const x = glyph.position[0] + bitmap.xoffset;\n    const y = glyph.position[1] + bitmap.yoffset;\n\n    // quad size\n    const w = bitmap.width;\n    const h = bitmap.height;\n\n    // BL\n    positions[i++] = x\n    positions[i++] = y\n    // TL\n    positions[i++] = x\n    positions[i++] = y + h\n    // TR\n    positions[i++] = x + w\n    positions[i++] = y + h\n    // BR\n    positions[i++] = x + w\n    positions[i++] = y\n  })\n  return positions\n}\n","import AssetManager from '../AssetManager';\nimport { Mesh, MeshBasicMaterial } from 'three';\nimport { TextGeometry } from '../three-bmfont-text/index';\nimport {View} from \"./View\";\n\nexport class TextView extends View {\n    constructor (text, options = {}) {\n        super();\n\n        const fontName = options.font || 'keep_calm';\n\n        this._text = text;\n        this.font = AssetManager.getFont(fontName);\n        this.width = options.width || 100;\n        this.align = options.aligh || 'left';\n        this._color = options.color || 0xff0000;\n    }\n\n    init () {\n        this.geometry = new TextGeometry({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping,\n            multipage: true\n        });\n\n        this.material = new MeshBasicMaterial({\n            map: this.font.textures[0],\n            transparent: true,\n            color: this._color\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.rotation.y = 180 * (Math.PI / 180);\n        this.mesh.rotation.z = 180 * (Math.PI / 180);\n\n        super.init();\n    }\n\n    get color () {\n        return this._color;\n    }\n\n    set color (color) {\n        this.material.color.setHex(color);\n    }\n\n    get text () {\n        return this._text;\n    }\n\n    get height () {\n        return this.geometry.layout.height;\n    }\n\n    _updateGeometry () {\n        this.geometry.update({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping\n        });\n\n        this.geometry.uvsNeedUpdate = true;\n    }\n\n    set text (text) {\n        text = text.toString();\n\n        // Check if text is not the same\n        if (text !== this._text) {\n            this._text = text;\n            this._updateGeometry();\n        }\n    }\n}\n","import { Object3D } from 'three';\nimport LogoView from './LogoView';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass MenuItemsView extends View {\n    constructor (menu, options = {\n        selectedTextColor: 0x00ff00,\n        textColor: 0xffdddd\n    }) {\n        super();\n\n        this.menu = menu;\n        this.options = options;\n        this.viewMenuItemPairs = new Map();\n        this.selectedItem = null;\n        this.selectedView = null;\n        this.logoView = new LogoView('logo', 'ui');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const distance = 100;\n        const startY = 200;\n        let itemCount = 0;\n\n        this.selectedItem = this.menu.selectedItem;\n\n        for (const menuItem of this.menu.menuItems.values()) {\n            const textView = new TextView(menuItem.text, {\n                width: 300\n            });\n\n            textView.init();\n            textView.mesh.position.y = startY - (distance * itemCount);\n            textView.mesh.position.x += 100;\n\n            if (this.selectedItem === menuItem) {\n                textView.color = this.options.selectedTextColor;\n            } else {\n                textView.color = this.options.textColor;\n            }\n\n            this.viewMenuItemPairs.set(menuItem, textView);\n\n            this.mesh.add(textView.mesh);\n            itemCount += 1;\n        }\n\n        super.init();\n    }\n\n    update () {\n        // Selected item changed\n        if (this.selectedItem !== this.menu.selectedItem) {\n            const previousItem = this.selectedItem;\n\n            this.selectedItem = this.menu.selectedItem;\n\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n            const previousView = this.viewMenuItemPairs.get(previousItem);\n\n            currentView.text = this.selectedItem.text;\n\n            previousView.color = this.options.textColor;\n            currentView.color = this.options.selectedTextColor;\n        }\n\n        if (this.menu.selectedItem.editable && this.menu.selectedItem.isEditing) {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text + '-';\n        } else {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text;\n        }\n    }\n}\n\nexport default MenuItemsView;\n\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport MenuInputItem from '../../../engine/menu-system/MenuInputItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst OptionsMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuInputItem('name', 'Name', 'Unknown Soldier', function (value) {\n            menuState.changeOption('name', value);\n        }));\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default OptionsMenu;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst HelpMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default HelpMenu;\n","import { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\n\nexport class PauseUpdateSystem implements SystemUpdateInterface {\n    public isPaused: boolean = false;\n\n    update(delta: number): boolean {\n        return !this.isPaused;\n    }\n}\n","export class ObjectPool<T> {\n    private readonly factoryFunction: () => T;\n    private totalInstances: number = 0;\n    private readonly allocationLimit: number;\n    private readonly allocationNumber: number;\n    private availableInstances: T[];\n\n    /**\n     * @param factoryFunction Function that creates the object to pool.\n     * @param firstAllocationNumber Initial amount of objects to allocate.\n     * @param allocationNumber Number to increase the pool by when it is full.\n     * @param allocationLimit Size limit of the pool.\n     */\n    constructor(\n        factoryFunction: () => T,\n        firstAllocationNumber: number,\n        allocationNumber: number,\n        allocationLimit: number\n    ) {\n        this.factoryFunction = factoryFunction;\n        this.allocationLimit = allocationLimit;\n        this.allocationNumber = allocationNumber;\n        this.availableInstances = [];\n        this.allocate(firstAllocationNumber);\n    }\n\n    get size() {\n        return this.totalInstances;\n    }\n\n    /**\n     * Instantiate a given number of elements and add them to the collection of available instances\n     * @param {number} number Number of elements to allocate\n     */\n    public allocate(number: number): ObjectPool<T> {\n        if (this.totalInstances + number < this.allocationLimit) {\n            this.totalInstances += number;\n\n            for (let i = 0; i < number; i++) {\n                this.availableInstances.push(this.factoryFunction());\n            }\n        } else {\n            throw new Error(\"ObjectPool allocation limit reached\");\n        }\n\n        return this;\n    }\n\n    /**\n     * Retrieve an element for the collection of available instances, (re)initialize and return it.\n     */\n    get(): T {\n        // check if we still have enough available instances, instantiate new ones\n        if (this.availableInstances.length < 1) {\n            this.allocate(this.allocationNumber);\n        }\n\n        return this.availableInstances.pop() as T;\n    }\n\n    /**\n     * Add a given element to the pool.\n     * @param {Object} object Element to add to the pool\n     */\n    public free(object: T): ObjectPool<T> {\n        if (this.availableInstances.indexOf(object) === -1) {\n            this.availableInstances.push(object);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clear all references.\n     */\n    public clear(): ObjectPool<T> {\n        while (this.availableInstances.length) {\n            this.availableInstances.pop();\n        }\n\n        this.totalInstances = 0;\n\n        return this;\n    }\n}\n","import { Vector2 } from \"three\";\n\nexport class Vector2Helper {\n    private constructor() {}\n\n    public static perp(v: Vector2): Vector2 {\n        const x = v.x;\n\n        v.x = v.y;\n        v.y = -x;\n\n        return v;\n    }\n}\n","import { Vector2 } from \"three\";\nimport { Vector2Helper } from \"./Vector2Helper\";\n\n/**\n * Represents a *convex* polygon with any number of vertices (specified in counter-clockwise order)\n *\n * Note: Do _not_ manually change the `vertices`, `angle`, or `offset` properties. Use the\n * provided setters. Otherwise the calculated properties will not be updated correctly.\n *\n * `pos` can be changed directly.\n\n * Create a new polygon, passing in a position vector, and an array of vertices (represented\n * by vectors relative to the position vector). If no position is passed in, the position\n * of the polygon will be `(0,0)`.\n */\nexport class Polygon {\n    public position: Vector2;\n    public angle: number = 0;\n    public offset: Vector2 = new Vector2();\n    public computedVertices: Vector2[] = [];\n    public vertices: Vector2[] = [];\n    public edges: Vector2[] = [];\n    public normals: Vector2[] = [];\n\n    /**\n     * @param position A vector representing the origin of the polygon. (all other vertices are relative to this one)\n     * @param vertices An array of vectors representing the vertices in the polygon, in counter-clockwise order.\n     */\n    constructor(position = new Vector2(), vertices: Vector2[] = []) {\n        this.position = position;\n\n        this.setVertices(vertices);\n    }\n\n    public static fromBox(\n        position: Vector2,\n        width: number,\n        height: number\n    ): Polygon {\n        return new Polygon(new Vector2(position.x, position.y), [\n            new Vector2(),\n            new Vector2(width, 0),\n            new Vector2(width, height),\n            new Vector2(0, height),\n        ]);\n    }\n\n    /**\n     * Set the vertices of the polygon.\n     * Note: The vertices are counter-clockwise *with respect to the coordinate system*.\n     * If you directly draw the vertices on a screen that has the origin at the top-left corner\n     * it will _appear_ visually that the vertices are being specified clockwise. This is just\n     * because of the inversion of the Y-axis when being displayed.\n     *\n     * @param vertices An array of vectors representing the vertices in the polygon, in counter-clockwise order.\n     */\n    setVertices(vertices: Vector2[]): Polygon {\n        // Only re-allocate if this is a new polygon or the number of vertices has changed.\n        const lengthChanged =\n            !this.vertices || this.vertices.length !== vertices.length;\n\n        if (lengthChanged) {\n            this.computedVertices = [];\n            this.edges = [];\n            this.normals = [];\n\n            // Allocate the vector arrays for the calculated properties\n            for (let i = 0; i < vertices.length; i++) {\n                this.computedVertices.push(new Vector2());\n                this.edges.push(new Vector2());\n                this.normals.push(new Vector2());\n            }\n        }\n        this.vertices = vertices;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * @param angle The current rotation angle (in radians).\n     */\n    setAngle(angle: number): Polygon {\n        this.angle = angle;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current offset to apply to the `vertices` before applying the `angle` rotation.\n     *\n     * @param offset The new offset vector.\n     */\n    setOffset(offset: Vector2): Polygon {\n        this.offset = offset;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n     * Note: This changes the **original** vertices (so any `angle` will be applied on top of this rotation).\n     *\n     * @param angle The angle to rotate (in radians)\n     */\n    rotate(angle): Polygon {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].rotateAround(new Vector2(), angle);\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Translates the vertices of this polygon by a specified amount relative to the origin of *its own coordinate\n     * system* (i.e. `pos`).\n     *\n     * This is most useful to change the \"center vertex\" of a polygon. If you just want to move the whole polygon, change\n     * the coordinates of `pos`.\n     *\n     * Note: This changes the **original** vertices (so any `offset` will be applied on top of this translation)\n     *\n     * @param x The horizontal amount to translate.\n     * @param y The vertical amount to translate.\n     */\n    translate(x: number, y: number): Polygon {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].x += x;\n            vertices[i].y += y;\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Computes the calculated collision polygon. Applies the `angle` and `offset` to the original vertices then recalculates the\n     * edges and normals of the collision polygon.\n     */\n    private _compute(): void {\n        // Calculated vertices - this is what is used for underlying collisions and takes into account\n        // the angle/offset set on the polygon.\n        const computedVertices = this.computedVertices;\n\n        // The edges here are the direction of the `n`th edge of the polygon, relative to\n        // the `n`th vertex. If you want to draw a given edge from the edge value, you must\n        // first translate to the position of the starting vertex.\n        const edges = this.edges;\n\n        // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n        // to the position of the `n`th vertex. If you want to draw an edge normal, you must first\n        // translate to the position of the starting vertex.\n        const normals = this.normals;\n\n        // Copy the original vertices array and apply the offset/angle\n        const vertices = this.vertices;\n        const offset = this.offset;\n        const angle = this.angle;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            const computedVertex = computedVertices[i].copy(vertices[i]);\n\n            computedVertex.x += offset.x;\n            computedVertex.y += offset.y;\n\n            if (angle !== 0) {\n                computedVertex.rotateAround(new Vector2(), angle);\n            }\n        }\n\n        // Calculate the edges/normals\n        for (let i = 0; i < len; i++) {\n            const p1 = computedVertices[i];\n            const p2 =\n                i < len - 1 ? computedVertices[i + 1] : computedVertices[0];\n            const e = edges[i].copy(p2).sub(p1);\n\n            Vector2Helper.perp(normals[i].copy(e)).normalize();\n        }\n    }\n\n    /**\n     * Compute the axis-aligned bounding box. Any current state\n     * (translations/rotations) will be applied before constructing the AABB.\n     *\n     *  Note: Returns a _new_ `Polygon` each time you call this.\n     */\n    getAABB(): Polygon {\n        const vertices = this.computedVertices;\n        const len = vertices.length;\n        let xMin = vertices[0].x;\n        let yMin = vertices[0].y;\n        let xMax = vertices[0].x;\n        let yMax = vertices[0].y;\n\n        for (let i = 1; i < len; i++) {\n            const vertex = vertices[i];\n\n            if (vertex.x < xMin) {\n                xMin = vertex.x;\n            } else if (vertex.x > xMax) {\n                xMax = vertex.x;\n            }\n\n            if (vertex.y < yMin) {\n                yMin = vertex.y;\n            } else if (vertex.y > yMax) {\n                yMax = vertex.y;\n            }\n        }\n\n        return Polygon.fromBox(\n            this.position.clone().add(new Vector2(xMin, yMin)),\n            xMax - xMin,\n            yMax - yMin\n        );\n    }\n}\n","import { Polygon } from \"../../engine/math/Polygon\";\nimport { Vector2 } from \"three\";\n\nconst DEFAULT_SPEED = 0.2;\nconst DEFAULT_ROTATION_SPEED = 0.3;\n\nexport class Entity {\n    public position: { x: number; y: number; z: number };\n    public previousPosition: { x: number; y: number; z: number };\n    public width: number;\n    public height: number;\n    public depth: number;\n    public speed: number;\n    public rotationSpeed: number;\n    private readonly _body: Polygon;\n    public options: {\n        isPlayer: boolean;\n        physics: boolean;\n        isBullet: boolean;\n        isCharacter: boolean;\n        audio: boolean;\n        bullets: boolean;\n        isSoldier: boolean;\n    };\n    public angle: number = Math.PI * 2;\n    public dead: boolean = false;\n    public velocity: { x: number; y: number; z: number } = {\n        x: 0,\n        y: 0,\n        z: 0,\n    };\n    public isMoving: boolean = false;\n    public reverse: boolean = false;\n    public angularVelocity: number = 0;\n    public collidable: boolean = true;\n    public shouldUpdate: boolean = true;\n    public actions: {\n        firedBullet: boolean;\n    } = {\n        firedBullet: false,\n    };\n\n    constructor(x: number, y: number, z = 0, width = 0, height = 0, depth = 0) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z,\n        };\n\n        this.previousPosition = {\n            x: x,\n            y: y,\n            z: z,\n        };\n\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.speed = DEFAULT_SPEED;\n        this.rotationSpeed = DEFAULT_ROTATION_SPEED;\n\n        this.reset();\n\n        this._body = new Polygon(new Vector2(this.x, this.y), [\n            new Vector2(-this.halfWidth, -this.halfHeight),\n            new Vector2(-this.halfWidth, this.halfHeight),\n            new Vector2(this.halfWidth, this.halfHeight),\n            new Vector2(this.halfWidth, 0),\n        ]);\n\n        this.options = {\n            physics: false,\n            bullets: false,\n            audio: false,\n            isBullet: false,\n            isPlayer: false,\n            isCharacter: false,\n            isSoldier: false,\n        };\n    }\n\n    get rotatedBody() {\n        const body = this._body;\n\n        body.setAngle(this.angle);\n\n        return body;\n    }\n\n    onWallCollision() {\n        return null;\n    }\n\n    get body() {\n        this._body.position.x = this.position.x;\n        this._body.position.y = this.position.y;\n\n        return this._body;\n    }\n\n    get x() {\n        return this.position.x;\n    }\n\n    get y() {\n        return this.position.y;\n    }\n\n    get z() {\n        return this.position.z;\n    }\n\n    get halfWidth() {\n        return this.width / 2;\n    }\n\n    get halfHeight() {\n        return this.height / 2;\n    }\n\n    kill() {\n        this.dead = true;\n    }\n\n    get point(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n    reset() {\n        this.velocity = {\n            x: 0,\n            y: 0,\n            z: 0,\n        };\n\n        this.dead = false;\n        this.reverse = false;\n        this.angle = Math.PI * 2;\n        this.angularVelocity = 0;\n\n        // If entity is moving backwards\n        this.reverse = false;\n\n        this.collidable = true;\n        this.shouldUpdate = true;\n\n        this.isMoving = false;\n\n        // Actions can trigger things that should happen in the next update.\n        this.actions = {\n            firedBullet: false,\n        };\n    }\n\n    respawn(position) {\n        this.reset();\n\n        this.position = {\n            x: position.x,\n            y: position.y,\n            z: position.z,\n        };\n\n        this.previousPosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z,\n        };\n    }\n\n    moveUp() {\n        this.reverse = false;\n        this.isMoving = true;\n        this.velocity.x = -this.speed * Math.cos(this.angle);\n        this.velocity.y = -this.speed * Math.sin(this.angle);\n    }\n\n    moveDown() {\n        this.reverse = true;\n        this.isMoving = true;\n        this.velocity.x = this.speed * Math.cos(this.angle);\n        this.velocity.y = this.speed * Math.sin(this.angle);\n    }\n\n    turnLeft() {\n        this.angularVelocity = this.rotationSpeed * (Math.PI / 180);\n    }\n\n    turnRight() {\n        this.angularVelocity = -this.rotationSpeed * (Math.PI / 180);\n    }\n\n    stopMoving() {\n        this.isMoving = false;\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    }\n\n    stopTurning() {\n        this.angularVelocity = 0;\n    }\n\n    update(delta) {\n        if (!this.dead) {\n            this.angle += this.angularVelocity * delta;\n\n            if (this.angle < 0) {\n                this.angle = Math.PI * 2 - this.angle;\n            }\n\n            this.previousPosition.x = this.position.x;\n            this.previousPosition.y = this.position.y;\n            this.previousPosition.z = this.position.z;\n\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n            this.position.z += this.velocity.z * delta;\n        }\n    }\n}\n","import { Entity } from \"./Entity\";\nimport { Soldier } from \"./Soldier\";\n\nexport class Bullet extends Entity {\n    public firedBy?: Soldier;\n    public firedByWeapon?: any;\n    private maxDistance: number = 500;\n    private traveledDistance: number = 0;\n\n    constructor(x, y, z, width, height) {\n        super(x, y, z, width, height);\n\n        this.dead = true;\n        this.speed = 0.3;\n\n        this.options.isBullet = true;\n    }\n\n    get damage() {\n        if (this.firedByWeapon) {\n            return this.firedByWeapon.damage;\n        }\n\n        return 0;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        this.traveledDistance += this.speed * delta;\n\n        if (this.traveledDistance > this.maxDistance) {\n            this.dead = true;\n            this.traveledDistance = 0;\n        } else {\n            this.moveUp();\n        }\n    }\n}\n","import { Polygon } from \"./Polygon\";\nimport { Vector2 } from \"three\";\n\n/**\n * Represents an axis-aligned box, with a width and height.\n * Create a new box, with the specified position, width, and height. If no position\n * is given, the position will be `(0,0)`. If no width or height are given, they will\n * be set to `0`.\n */\nexport class Box {\n    public position: Vector2;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param position A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n     * @param width The width of the box.\n     * @param height The height of the box.\n     */\n    constructor(\n        position = new Vector2(),\n        width: number = 0,\n        height: number = 0\n    ) {\n        this.position = position;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * Returns a polygon whose edges are the same as this box.\n     */\n    toPolygon(): Polygon {\n        const pos = this.position;\n        const w = this.width;\n        const h = this.height;\n\n        return new Polygon(new Vector2(pos.x, pos.y), [\n            new Vector2(),\n            new Vector2(w, 0),\n            new Vector2(w, h),\n            new Vector2(0, h),\n        ]);\n    }\n}\n","import { Vector2 } from \"three\";\n\n/**\n * Calculates which Voronoi region a point is on a line segment.\n * It is assumed that both the line and the point are relative to `(0,0)`\n *\n *            |       (0)      |\n *     (-1)  [S]--------------[E]  (1)\n *            |       (0)      |\n */\nexport class VoronoiRegion {\n    // Constants for Voronoi regions\n    public static LEFT_VORONOI_REGION = -1;\n    public static MIDDLE_VORONOI_REGION = 0;\n    public static RIGHT_VORONOI_REGION = 1;\n\n    private constructor() {}\n\n    /**\n     * @param line The line segment.\n     * @param point The point.\n     * @return {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n     *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n     *          RIGHT_VORONOI_REGION (1) if it is the right region.\n     */\n    public static calculate(line: Vector2, point: Vector2): number {\n        const len2 = line.lengthSq();\n        const dp = point.dot(line);\n\n        // If the point is beyond the start of the line, it is in the\n        // left voronoi region.\n        if (dp < 0) {\n            return VoronoiRegion.LEFT_VORONOI_REGION;\n        } else if (dp > len2) {\n            // If the point is beyond the end of the line, it is in the\n            // right voronoi region.\n\n            return VoronoiRegion.RIGHT_VORONOI_REGION;\n        } else {\n            // Otherwise, it's in the middle one.\n            return VoronoiRegion.MIDDLE_VORONOI_REGION;\n        }\n    }\n}\n","import { Vector2 } from \"three\";\nimport { Polygon } from \"../math/Polygon\";\nimport { Box } from \"../math/Box\";\nimport { Circle } from \"../math/Circle\";\n\n/**\n *\n * An object representing the result of an intersection. Contains:\n *  - The two objects participating in the intersection\n *  - The vector representing the minimum change necessary to extract the first object\n *    from the second one (as well as a unit vector in that direction and the magnitude\n *    of the overlap)\n *  - Whether the first object is entirely inside the second, and vice versa.\n */\nexport class SatResult {\n    public a?: Polygon | Circle | Box = undefined;\n    public b?: Polygon | Circle | Box = undefined;\n    public overlapN: Vector2 = new Vector2();\n    public overlapV: Vector2 = new Vector2();\n    public aInB: boolean = true;\n    public bInA: boolean = true;\n    public overlap: number = Number.MAX_VALUE;\n\n    constructor() {\n        this.clear();\n    }\n\n    /**\n     * Set some values of the response back to their defaults.  Call this between tests if\n     * you are going to reuse a single SatResult object for multiple intersection tests (recommended\n     * as it will avoid allcating extra memory)\n     */\n    clear(): SatResult {\n        this.aInB = true;\n        this.bInA = true;\n        this.overlap = Number.MAX_VALUE;\n\n        return this;\n    }\n}\n","import { Polygon } from \"../math/Polygon\";\nimport { Vector2 } from \"three\";\nimport { ObjectPool } from \"../utils/ObjectPool\";\nimport { Box } from \"../math/Box\";\nimport { Circle } from \"../math/Circle\";\nimport { VoronoiRegion } from \"../math/VornoiRegion\";\nimport { Vector2Helper } from \"../math/Vector2Helper\";\nimport { SatResult } from \"./SatResult\";\n\nconst POINT_POLYGON = new Box(new Vector2(), 0.00001, 0.00001).toPolygon();\n\n/**\n * Determining intersections of circles and\n * polygons using the Separating Axis Theorem.\n *\n * Based on https://github.com/jriecken/sat-js (Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>)\n */\nexport class SeparatingAxisTheorem {\n    private arrayPool: ObjectPool<number[]>;\n    private vectorPool: ObjectPool<Vector2>;\n    private cachedSatResult: SatResult = new SatResult();\n\n    constructor() {\n        this.arrayPool = new ObjectPool<number[]>(() => [], 5, 5, 20);\n        this.vectorPool = new ObjectPool<Vector2>(\n            () => new Vector2(),\n            10,\n            10,\n            40\n        );\n    }\n\n    /**\n     * Flattens the specified array of vertices onto a unit vector axis,\n     * resulting in a one dimensional range of the minimum and\n     * maximum value on that axis.\n     * @param vertices The vertices to flatten.\n     * @param normal The unit vector axis to flatten on.\n     * @param result An array.  After calling this function,\n     *   result[0] will be the minimum value,\n     *   result[1] will be the maximum value.\n     */\n    private static flattenVerticesOn(\n        vertices: Vector2[],\n        normal: Vector2,\n        result: number[]\n    ): void {\n        let min = Number.MAX_VALUE;\n        let max = -Number.MAX_VALUE;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            // The magnitude of the projection of the point onto the normal\n            const dot = vertices[i].dot(normal);\n\n            if (dot < min) {\n                min = dot;\n            }\n            if (dot > max) {\n                max = dot;\n            }\n        }\n\n        result[0] = min;\n        result[1] = max;\n    }\n\n    /**\n     * Check whether two convex polygons are separated by the specified\n     * axis (must be a unit vector).\n     *\n     * @param aPos The position of the first polygon.\n     * @param bPos The position of the second polygon.\n     * @param aPoints The vertices in the first polygon.\n     * @param bPoints The vertices in the second polygon.\n     * @param axis The axis (unit sized) to test against.  The points of both polygons\n     *   will be projected onto this axis.\n     * @param result A SatResult object (optional) which will be populated\n     *   if the axis is not a separating axis.\n     * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n     *   and a response is passed in, information about how much overlap and\n     *   the direction of the overlap will be populated.\n     */\n    private isSeparatingAxis(\n        aPos: Vector2,\n        bPos: Vector2,\n        aPoints: Vector2[],\n        bPoints: Vector2[],\n        axis: Vector2,\n        result?: SatResult\n    ): boolean {\n        const rangeA: number[] = this.arrayPool.get();\n        const rangeB: number[] = this.arrayPool.get();\n\n        // The magnitude of the offset between the two polygons\n        const offsetV = this.vectorPool.get().copy(bPos).sub(aPos);\n        const projectedOffset = offsetV.dot(axis);\n\n        // Project the polygons onto the axis.\n        SeparatingAxisTheorem.flattenVerticesOn(aPoints, axis, rangeA);\n        SeparatingAxisTheorem.flattenVerticesOn(bPoints, axis, rangeB);\n\n        // Move B's range to its position relative to A.\n        rangeB[0] += projectedOffset;\n        rangeB[1] += projectedOffset;\n\n        // Check if there is a gap. If there is, this is a separating axis and we can stop\n        if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n            this.vectorPool.free(offsetV);\n            this.arrayPool.free(rangeA);\n            this.arrayPool.free(rangeB);\n\n            return true;\n        }\n\n        // This is not a separating axis. If we're calculating a result, calculate the overlap.\n        if (result) {\n            let overlap = 0;\n\n            // A starts further left than B\n            if (rangeA[0] < rangeB[0]) {\n                result.aInB = false;\n\n                // A ends before B does. We have to pull A out of B\n                if (rangeA[1] < rangeB[1]) {\n                    overlap = rangeA[1] - rangeB[0];\n                    result.bInA = false;\n                } else {\n                    // B is fully inside A.  Pick the shortest way out.\n                    const option1 = rangeA[1] - rangeB[0];\n                    const option2 = rangeB[1] - rangeA[0];\n\n                    overlap = option1 < option2 ? option1 : -option2;\n                }\n            } else {\n                // B starts further left than A\n                result.bInA = false;\n\n                // B ends before A ends. We have to push A out of B\n                if (rangeA[1] > rangeB[1]) {\n                    overlap = rangeA[0] - rangeB[1];\n                    result.aInB = false;\n\n                    // A is fully inside B.  Pick the shortest way out.\n                } else {\n                    const option1 = rangeA[1] - rangeB[0];\n                    const option2 = rangeB[1] - rangeA[0];\n\n                    overlap = option1 < option2 ? option1 : -option2;\n                }\n            }\n\n            // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n            const absOverlap = Math.abs(overlap);\n\n            if (absOverlap < result.overlap) {\n                result.overlap = absOverlap;\n                result.overlapN.copy(axis);\n                if (overlap < 0) {\n                    result.overlapN.negate();\n                }\n            }\n        }\n\n        this.vectorPool.free(offsetV);\n        this.arrayPool.free(rangeA);\n        this.arrayPool.free(rangeB);\n\n        return false;\n    }\n\n    /**\n     * Check if a polygon and a circle collide.\n     *\n     * @param polygon\n     * @param circle\n     * @param response SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testPolygonInCircle(\n        polygon: Polygon,\n        circle: Circle,\n        response?: SatResult\n    ): boolean {\n        // Get the position of the circle relative to the polygon.\n        const circlePos = this.vectorPool\n            .get()\n            .copy(circle.position)\n            .sub(polygon.position);\n        const radius = circle.radius;\n        const radius2 = radius * radius;\n        const points = polygon.computedVertices;\n        const len = points.length;\n        const edge = this.vectorPool.get();\n        const point = this.vectorPool.get();\n\n        // For each edge in the polygon:\n        for (let i = 0; i < len; i++) {\n            const next = i === len - 1 ? 0 : i + 1;\n            const prev = i === 0 ? len - 1 : i - 1;\n            let overlap = 0;\n            let overlapN: Vector2 | undefined = undefined;\n\n            // Get the edge.\n            edge.copy(polygon.edges[i] as Vector2);\n\n            // Calculate the center of the circle relative to the starting point of the edge.\n            point.copy(circlePos).sub(points[i]);\n\n            // If the distance between the center of the circle and the point\n            // is bigger than the radius, the polygon is definitely not fully in\n            // the circle.\n            if (response && point.lengthSq() > radius2) {\n                response.aInB = false;\n            }\n\n            // Calculate which Voronoi region the center of the circle is in.\n            let region = VoronoiRegion.calculate(edge, point);\n\n            // If it's the left region:\n            if (region === VoronoiRegion.LEFT_VORONOI_REGION) {\n                // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n                edge.copy(polygon.edges[prev]);\n\n                // Calculate the center of the circle relative the starting point of the previous edge\n                const point2 = this.vectorPool\n                    .get()\n                    .copy(circlePos)\n                    .sub(points[prev]);\n\n                region = VoronoiRegion.calculate(edge, point2);\n\n                if (region === VoronoiRegion.RIGHT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    const dist = point.length();\n\n                    if (dist > radius) {\n                        // No intersection\n                        this.vectorPool.free(circlePos);\n                        this.vectorPool.free(edge);\n                        this.vectorPool.free(point);\n                        this.vectorPool.free(point2);\n\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response.bInA = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n\n                this.vectorPool.free(point2);\n\n                // If it's the right region:\n            } else if (region === VoronoiRegion.RIGHT_VORONOI_REGION) {\n                // We need to make sure we're in the left region on the next edge\n                edge.copy(polygon.edges[next]);\n\n                // Calculate the center of the circle relative to the starting point of the next edge.\n                point.copy(circlePos).sub(points[next]);\n                region = VoronoiRegion.calculate(edge, point);\n                if (region === VoronoiRegion.LEFT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    const dist = point.length();\n\n                    if (dist > radius) {\n                        // No intersection\n                        this.vectorPool.free(circlePos);\n                        this.vectorPool.free(edge);\n                        this.vectorPool.free(point);\n\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response.bInA = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n\n                // Otherwise, it's the middle region:\n            } else {\n                // Need to check if the circle is intersecting the edge,\n                // Change the edge into its \"edge normal\".\n                const normal = Vector2Helper.perp(edge).normalize();\n\n                // Find the perpendicular distance between the center of the\n                // circle and the edge.\n                const dist = point.dot(normal);\n                const distAbs = Math.abs(dist);\n\n                // If the circle is on the outside of the edge, there is no intersection.\n                if (dist > 0 && distAbs > radius) {\n                    // No intersection\n                    this.vectorPool.free(circlePos);\n                    this.vectorPool.free(normal);\n                    this.vectorPool.free(point);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    overlapN = normal;\n                    overlap = radius - dist;\n\n                    // If the center of the circle is on the outside of the edge, or part of the\n                    // circle is on the outside, the circle is not fully inside the polygon.\n                    if (dist >= 0 || overlap < 2 * radius) {\n                        response.bInA = false;\n                    }\n                }\n            }\n\n            // If this is the smallest overlap we've seen, keep it.\n            // (overlapN may be null if the circle was in the wrong Voronoi region).\n            if (\n                overlapN &&\n                response &&\n                Math.abs(overlap) < Math.abs(response.overlap)\n            ) {\n                response.overlap = overlap;\n                response.overlapN.copy(overlapN);\n            }\n        }\n\n        // Calculate the final overlap vector - based on the smallest overlap.\n        if (response) {\n            response.a = polygon;\n            response.b = circle;\n            response.overlapV\n                .copy(response.overlapN)\n                .multiplyScalar(response.overlap);\n        }\n\n        this.vectorPool.free(circlePos);\n        this.vectorPool.free(edge);\n        this.vectorPool.free(point);\n\n        return true;\n    }\n\n    /**\n     * Check if a circle and a polygon collide.\n     *\n     *   **NOTE:** This is slightly less efficient than polygonCircle as it just\n     *   runs polygonCircle and reverses everything at the end.\n     * @param circle\n     * @param polygon\n     * @param response SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testCircleInPolygon(\n        circle: Circle,\n        polygon: Polygon,\n        response?: SatResult\n    ): boolean {\n        // Test the polygon against the circle.\n        const result = this.testPolygonInCircle(polygon, circle, response);\n\n        if (result && response) {\n            // Swap A and B in the response.\n            const a = response.a;\n            const aInB = response.aInB;\n\n            response.overlapN.negate();\n            response.overlapV.negate();\n            response.a = response.b;\n            response.b = a;\n            response.aInB = response.bInA;\n            response.bInA = aInB;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a point is inside a convex polygon.\n     *\n     * @param point\n     * @param polygon\n     * @return {boolean} true if the point is inside the polygon, false if it is not.\n     */\n    public testPointInPolygon(point: Vector2, polygon: Polygon): boolean {\n        POINT_POLYGON.position.copy(point);\n\n        this.cachedSatResult.clear();\n\n        let result = this.testPolygonInPolygon(\n            POINT_POLYGON,\n            polygon,\n            this.cachedSatResult\n        );\n\n        if (result) {\n            result = this.cachedSatResult.aInB;\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks whether polygons collide.\n     *\n     * @param a The first polygon.\n     * @param b The second polygon.\n     * @param result SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testPolygonInPolygon(\n        a: Polygon,\n        b: Polygon,\n        result?: SatResult\n    ): boolean {\n        const aPoints = a.computedVertices;\n        const aLen = aPoints.length;\n        const bPoints = b.computedVertices;\n        const bLen = bPoints.length;\n\n        // If any of the edge normals of A is a separating axis, no intersection.\n        for (let i = 0; i < aLen; i++) {\n            if (\n                this.isSeparatingAxis(\n                    a.position,\n                    b.position,\n                    aPoints,\n                    bPoints,\n                    a.normals[i],\n                    result\n                )\n            ) {\n                return false;\n            }\n        }\n\n        // If any of the edge normals of B is a separating axis, no intersection.\n        for (let i = 0; i < bLen; i++) {\n            if (\n                this.isSeparatingAxis(\n                    a.position,\n                    b.position,\n                    aPoints,\n                    bPoints,\n                    b.normals[i],\n                    result\n                )\n            ) {\n                return false;\n            }\n        }\n\n        // Since none of the edge normals of A or B are a separating axis, there is an intersection\n        // and we've already calculated the smallest overlap (in _isSeparatingAxis).  Calculate the\n        // final overlap vector.\n        if (result) {\n            result.a = a;\n            result.b = b;\n            result.overlapV\n                .copy(result.overlapN)\n                .multiplyScalar(result.overlap);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if two circles collide.\n     *\n     * @param a The first circle.\n     * @param b The second circle.\n     * @param response SatResult object (optional) that will be populated if the circles intersect.\n     * @return {boolean} true if the circles intersect, false if they don't.\n     */\n    public testCircleInCircle(\n        a: Circle,\n        b: Circle,\n        response?: SatResult\n    ): boolean {\n        // Check if the distance between the centers of the two\n        // circles is greater than their combined radius.\n        const differenceV = this.vectorPool\n            .get()\n            .copy(b.position)\n            .sub(a.position);\n        const totalRadius = a.radius + b.radius;\n        const totalRadiusSq = totalRadius * totalRadius;\n        const distanceSq = differenceV.lengthSq();\n\n        // If the distance is bigger than the combined radius, they don't intersect.\n        if (distanceSq > totalRadiusSq) {\n            this.vectorPool.free(differenceV);\n\n            return false;\n        }\n\n        // They intersect.  If we're calculating a response, calculate the overlap.\n        if (response) {\n            const dist = Math.sqrt(distanceSq);\n\n            response.a = a;\n            response.b = b;\n            response.overlap = totalRadius - dist;\n            response.overlapN.copy(differenceV.normalize());\n            response.overlapV\n                .copy(differenceV)\n                .multiplyScalar(response.overlap);\n            response.aInB = a.radius <= b.radius && dist <= b.radius - a.radius;\n            response.bInA = b.radius <= a.radius && dist <= a.radius - b.radius;\n        }\n\n        this.vectorPool.free(differenceV);\n\n        return true;\n    }\n\n    /**\n     * Check if a point is inside a circle.\n     * @param point The point to test.\n     * @param circle The circle to test.\n     * @return {boolean} true if the point is inside the circle, false if it is not.\n     */\n    public testPointInCircle(point: Vector2, circle: Circle): boolean {\n        const differenceV = this.vectorPool\n            .get()\n            .copy(point)\n            .sub(circle.position);\n        const radiusSq = circle.radius * circle.radius;\n        const distanceSq = differenceV.lengthSq();\n\n        this.vectorPool.free(differenceV);\n\n        // If the distance between is smaller than the radius then the point is inside the circle.\n        return distanceSq <= radiusSq;\n    }\n}\n","import {SeparatingAxisTheorem} from \"../engine/physics/SeparatingAxisTheorem\";\nimport {SatResult} from \"../engine/physics/SatResult\";\n\nconst sat = new SeparatingAxisTheorem();\n\nconst rayPositions = function (entity, rayDistance) {\n    let x = entity.position.x;\n    let y = entity.position.y;\n    const angle = entity.angle;\n\n    const reverse = entity.reverse ? -1 : 1;\n\n    const start = {};\n    const end = {};\n\n    if (Math.abs(entity.velocity.x) > 0) {\n        x -= rayDistance * Math.cos(angle) * reverse;\n    } else {\n        x -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.x < 0) {\n        start.x = x;\n        end.x = entity.position.x;\n    } else {\n        start.x = entity.position.x;\n        end.x = x;\n    }\n\n    if (Math.abs(entity.velocity.y) > 0) {\n        y -= rayDistance * Math.sin(angle) * reverse;\n    } else {\n        y -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.y < 0) {\n        start.y = y;\n        end.y = entity.position.y;\n    } else {\n        start.y = entity.position.y;\n        end.y = y;\n    }\n\n    start.z = entity.position.z;\n    end.z = entity.position.z;\n\n    return { min: start, max: end };\n};\n\nconst cachedSatResult = new SatResult();\n\nconst CollisionUtils = {\n    wallCollision (map, entity, onCollision) {\n        const rayDistance = (map.blockWidth + map.blockHeight) / 2;\n        const ray = rayPositions(entity, rayDistance);\n\n        if (!(ray.min.x === ray.max.x && ray.min.y === ray.max.y)) {\n            const blocks = map.blocksBetweenPositions(ray.min, ray.max, ['wall']);\n\n            for (const block of blocks) {\n                if (block.collidable) {\n                    const polygons = block.bodies;\n\n                    for (const polygon of polygons) {\n                        cachedSatResult.clear();\n\n                        if (sat.testPolygonInPolygon(entity.body, polygon, cachedSatResult)) {\n                            onCollision(cachedSatResult);\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    floorCollision (map, entity, delta, onCollision) {\n        const nextEntityPosition = {\n            x: entity.position.x + (entity.velocity.x * delta),\n            y: entity.position.y + (entity.velocity.y * delta),\n            z: entity.position.z + (entity.velocity.z * delta)\n        };\n\n        const floorBlockIndex = map.positionToIndex(entity.position);\n\n        floorBlockIndex.z -= 1;\n\n        const block = map.blockAtIndex(floorBlockIndex);\n\n        if (block && block.collidable && block.walls.top) {\n            if (nextEntityPosition.z <= block.position.z + block.depth) {\n                onCollision(block);\n            }\n        } else {\n            entity.fall();\n        }\n    }\n};\n\nexport default CollisionUtils;\n","import { PlayState } from \"../client/play/PlayState\";\nimport { Soldier } from \"./entities/Soldier\";\nimport { ObjectPool } from \"../engine/utils/ObjectPool\";\nimport { Bullet } from \"./entities/Bullet\";\nimport { SeparatingAxisTheorem } from \"../engine/physics/SeparatingAxisTheorem\";\nimport CollisionUtils from \"./CollisionUtils\";\n\nexport class BulletSystem {\n    private state: PlayState;\n    private readonly soldiers: Set<Soldier>;\n    private readonly map: any;\n    private bulletPool: ObjectPool<Bullet>;\n\n    // Bullets that died last turn\n    public readonly deadBullets: Set<Bullet> = new Set();\n\n    // Bullets currently flying around\n    public readonly activeBullets: Set<Bullet> = new Set();\n    private sat: SeparatingAxisTheorem = new SeparatingAxisTheorem();\n\n    constructor(state: PlayState, poolLimit?: number) {\n        this.state = state;\n        this.soldiers = this.state.soldiers;\n        this.map = this.state.map;\n\n        this.bulletPool = new ObjectPool<Bullet>(\n            (): Bullet => {\n                return new Bullet(0, 0, 0, 4, 10);\n            },\n            10,\n            10,\n            poolLimit || 200\n        );\n    }\n\n    get poolSize() {\n        return this.bulletPool.size;\n    }\n\n    _fireBullet(firedBy) {\n        let bullet = this.bulletPool.get();\n\n        // If the pool is full, reused the first item.\n        if (!bullet) {\n            const firstBullet = this.activeBullets.values().next().value;\n\n            this.bulletPool.free(firstBullet);\n            bullet = this.bulletPool.get();\n        }\n\n        bullet.firedBy = firedBy;\n        bullet.firedByWeapon = firedBy.currentWeapon;\n        bullet.respawn(firedBy.position);\n        bullet.angle = firedBy.angle;\n        this.activeBullets.add(bullet);\n\n        return bullet;\n    }\n\n    update(delta: number): void {\n        for (const soldier of this.soldiers) {\n            if (soldier.actions.firedBullet) {\n                this._fireBullet(soldier);\n            }\n        }\n\n        for (const bullet of this.activeBullets) {\n            bullet.update(delta);\n            CollisionUtils.wallCollision(this.map, bullet, () => {\n                bullet.kill();\n                this.bulletPool.free(bullet);\n            });\n\n            if (bullet.dead) {\n                this.deadBullets.add(bullet);\n                this.activeBullets.delete(bullet);\n                this.bulletPool.free(bullet);\n            } else {\n                for (const soldier of this.soldiers) {\n                    if (!soldier.dead) {\n                        // Can't kill itself\n                        if (bullet.firedBy !== soldier) {\n                            // Check if on same level\n                            if (\n                                bullet.position.z >= soldier.position.z &&\n                                bullet.position.z < soldier.position.z + 50\n                            ) {\n                                if (\n                                    this.sat.testPointInPolygon(\n                                        bullet.point,\n                                        soldier.body\n                                    )\n                                ) {\n                                    soldier.hitByBullet(bullet);\n                                    bullet.kill();\n                                    this.bulletPool.free(bullet);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import { AbstractState } from \"../AbstractState\";\nimport { Soldier } from \"../../core/entities/Soldier\";\nimport { Player } from \"../../core/entities/Player\";\nimport { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\nimport { PauseUpdateSystem } from \"../update-system/PauseUpdateSystem\";\nimport { BulletSystem } from \"../../core/BulletSystem\";\nimport { Match } from \"../../core/Match\";\nimport { Engine } from \"../../engine/Engine\";\n\n/**\n * State of playing the game.\n */\nexport class PlayState extends AbstractState {\n    public bulletSystem: BulletSystem;\n    public player?: Player;\n    public map: any;\n    public match: any;\n    public showScores: boolean = false;\n    private pauseSystem?: PauseUpdateSystem;\n\n    constructor(engine: Engine, match: Match, map: any) {\n        super(\"play\", engine);\n\n        this.map = map;\n        this.match = match;\n        this.bulletSystem = new BulletSystem(this, 200);\n    }\n\n    init() {\n        super.init();\n    }\n\n    get soldiers(): Set<Soldier> {\n        return this.match.soldiers;\n    }\n\n    get paused(): boolean {\n        const pauseSystem = this.pauseSystem;\n\n        return pauseSystem ? pauseSystem.isPaused : false;\n    }\n\n    pause() {\n        const pauseSystem = this.pauseSystem;\n\n        if (pauseSystem) {\n            pauseSystem.isPaused = true;\n        }\n    }\n\n    resume() {\n        const pauseSystem = this.pauseSystem;\n\n        if (pauseSystem) {\n            pauseSystem.isPaused = false;\n        }\n    }\n\n    addSystem(system: SystemUpdateInterface, priority: number) {\n        if (system instanceof PauseUpdateSystem) {\n            this.pauseSystem = system;\n        }\n\n        super.addSystem(system, priority);\n    }\n}\n","import { Camera, OrthographicCamera, PerspectiveCamera } from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { PlayState } from \"../PlayState\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\n\nexport class StatsRenderView extends ThreeRenderView {\n    private camera?: OrthographicCamera = undefined;\n    private state: PlayState;\n\n    constructor(state: PlayState) {\n        super();\n\n        this.state = state;\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new OrthographicCamera(\n            0,\n            this.width,\n            this.height,\n            0,\n            0,\n            1\n        );\n\n        this._initialized = true;\n    }\n\n    update(delta) {\n        super.update(delta);\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as OrthographicCamera;\n    }\n}\n","import { Mesh, MeshBasicMaterial, Object3D, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass AmmoView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('ui', false);\n\n        const material = new MeshBasicMaterial({\n            map: textureAtlas.texture,\n            transparent: true\n        });\n\n        const ammoSize = textureAtlas.getFrameSize('ammo');\n\n        this.geometry = new PlaneGeometry(ammoSize.width, ammoSize.height);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'ammo');\n\n        const ammoMesh = new Mesh(this.geometry, material);\n\n        ammoMesh.scale.set(0.5, 0.5, 1);\n\n        this.magazineText = new TextView('0', {\n            color: 0xffffcc\n        });\n\n        this.magazineText.init();\n\n        this.magazineText.mesh.scale.set(2, 2, 1);\n\n        this.magazineText.position = {\n            x: ammoSize.width + 10,\n            y: -this.magazineText.height\n        };\n\n        this.mesh.add(this.magazineText.mesh);\n\n        this.ammoText = new TextView('0', {\n            color: 0xffff99\n        });\n\n        this.ammoText.init();\n\n        this.ammoText.mesh.scale.set(1, 1, 1);\n\n        this.ammoText.position = {\n            x: ammoSize.width + 64,\n            y: -this.ammoText.height\n        };\n\n        ammoMesh.position.x = 20;\n        this.magazineText.position.x = 40;\n        this.ammoText.position.x = 120;\n\n        this.mesh.add(this.ammoText.mesh);\n        this.mesh.add(ammoMesh);\n\n        super.init();\n    }\n\n    set ammo (ammo) {\n        if (ammo === null) {\n            this.ammoText.text = '-';\n        }\n        this.ammoText.text = ammo;\n    }\n\n    set magazine (magazine) {\n        if (magazine === null) {\n            this.magazineText.text = '-';\n        }\n        this.magazineText.text = magazine;\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.ammo = weapon.ammo;\n            this.magazine = weapon.magazine;\n        } else {\n            this.ammo = null;\n            this.magazine = null;\n        }\n    }\n}\n\nexport default AmmoView;\n","import { Matrix4, Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from '../../../engine/graphics/View';\n\nclass HealthView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._healthScale = 1;\n    }\n\n    init () {\n        const material = new MeshBasicMaterial({\n            color: 0xcc0000\n        });\n\n        this.geometry = new PlaneGeometry(200, 20);\n\n        // Change originX to left side\n        this.geometry.applyMatrix(new Matrix4().makeTranslation(100, 0, 0));\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n\n    set healthScale (value) {\n        if (value !== this._healthScale) {\n            this._healthScale = value;\n\n            if (value <= 0) {\n                this.mesh.visible = false;\n            } else {\n                if (!this.mesh.visible) {\n                    this.mesh.visible = true;\n                }\n\n                const oldX = this.mesh.position.x;\n\n                this.mesh.scale.set(value, 1, 1);\n                this.mesh.position.x = oldX;\n            }\n        }\n    }\n\n    update () {\n        this.healthScale = this.player.health / this.player.maxHealth;\n    }\n}\n\nexport default HealthView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass WeaponView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._weapon = null;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas('ui', true);\n\n        this.geometry = new PlaneGeometry(196, 64);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry);\n\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set weapon (weapon) {\n        if (this._weapon !== weapon) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            this._weapon = weapon;\n            this.textureFrame.frame = weapon;\n        } else if (weapon === null) {\n            if (this.mesh.visible) {\n                this.mesh.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.weapon = weapon.name;\n        } else {\n            this.weapon = null;\n        }\n    }\n}\n\nexport default WeaponView;\n","import {Mesh, MeshLambertMaterial, Object3D, PlaneGeometry} from 'three';\nimport {TextView} from \"../../../engine/graphics/TextView\";\nimport {View} from \"../../../engine/graphics/View\";\n\nfunction converToText (teams) {\n    let resultText = '';\n\n    for (const [teamName, teamData] of teams.entries()) {\n        resultText += `${teamName} - k: ${teamData.kills} - d: ${teamData.deaths} \\n`;\n\n        const soldierText = [];\n\n        for (const soldier of teamData.soldiers) {\n            const text = `${soldier.name} - k: ${soldier.totalKills} - d: ${soldier.totalDeaths}`;\n\n            soldierText.push(text);\n        }\n\n        resultText += soldierText.join('\\n');\n        resultText += '\\n----------------------\\n';\n    }\n\n    return resultText;\n}\n\nclass ScoreView extends View {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.match = state.match;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const backgroundMaterial = new MeshLambertMaterial({\n            color: 0x00000,\n            transparent: true,\n            opacity: 0.5\n        });\n\n        const backgroundGeometry = new PlaneGeometry(600, 800);\n\n        this.mesh.add(new Mesh(backgroundGeometry, backgroundMaterial));\n\n        this.scoreTextView = new TextView(this._scoreText, {\n            color: 0xfeff80,\n            width: 600,\n            align: 'left'\n        });\n\n        this.scoreTextView.init();\n\n        this.mesh.visible = false;\n        this.mesh.add(this.scoreTextView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        if (this.state.showScores) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            // Scores have changed\n            this.scoreTextView.text = converToText(this.match.sortedScores());\n        } else if (this.mesh.visible) {\n            this.mesh.visible = false;\n        }\n    }\n}\n\nexport default ScoreView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass BulletView extends View {\n    constructor (bullet) {\n        super();\n\n        this.bullet = bullet;\n    }\n\n    init () {\n        const bullet = this.bullet;\n\n        const textureAtlas = TextureManager.getAtlas('world', false);\n\n        this.geometry = new PlaneGeometry(2, 8);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'bullet1');\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n        this.mesh = new Mesh(this.geometry, this.material);\n        this.mesh.position.set(bullet.position.x, bullet.position.y, bullet.position.z);\n        this.mesh.rotation.z = bullet.angle + (90 * (Math.PI / 180));\n\n        super.init();\n    }\n\n    update (interpolationPercentage) {\n        const previous = this.bullet.previousPosition;\n        const current = this.bullet.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n        this.mesh.rotation.z = this.bullet.angle + (90 * (Math.PI / 180));\n\n        if (this.bullet.dead) {\n            this.mesh.visible = false;\n        } else {\n            this.mesh.visible = true;\n        }\n    }\n}\n\nexport default BulletView;\n","import { Object3D } from \"three\";\nimport { ObjectPool } from \"../../../engine/utils/ObjectPool\";\nimport { View } from \"../../../engine/graphics/View\";\nimport BulletView from \"./BulletView\";\nimport { BulletSystem } from \"../../../core/BulletSystem\";\nimport { Bullet } from \"../../../core/entities/Bullet\";\n\nexport class BulletSystemView extends View {\n    private bulletSystem: BulletSystem;\n    private bulletViewPool: ObjectPool<BulletView>;\n    private bulletViewPairs: WeakMap<Bullet, BulletView> = new WeakMap<\n        Bullet,\n        BulletView\n    >();\n\n    constructor(bulletSystem, poolLimit?: number) {\n        super();\n\n        this.bulletSystem = bulletSystem;\n        this.bulletViewPool = new ObjectPool<BulletView>(\n            (): BulletView => {\n                return new BulletView(null);\n            },\n            this.bulletSystem.poolSize,\n            10,\n            poolLimit || 200\n        );\n    }\n\n    init() {\n        this.mesh = new Object3D();\n\n        super.init();\n    }\n\n    update(delta) {\n        // Keep viewPool in sync with bullet pool\n        if (this.bulletSystem.poolSize > this.bulletViewPool.size) {\n            this.bulletViewPool.allocate(\n                this.bulletSystem.poolSize - this.bulletViewPool.size\n            );\n        }\n\n        // Clear previously killed bullets\n        for (const deadBullet of this.bulletSystem.deadBullets) {\n            const bulletView = this.bulletViewPairs.get(deadBullet);\n\n            if (bulletView) {\n                bulletView.update(delta);\n            }\n\n            this.bulletSystem.deadBullets.delete(deadBullet);\n        }\n\n        for (const bullet of this.bulletSystem.activeBullets) {\n            let bulletView = this.bulletViewPairs.get(bullet);\n\n            if (!bulletView) {\n                bulletView = this.bulletViewPool.get();\n\n                bulletView.bullet = bullet;\n                bulletView.init();\n\n                this.mesh.add(bulletView.mesh);\n\n                this.bulletViewPairs.set(bullet, bulletView);\n            }\n\n            bulletView.update(delta);\n        }\n    }\n}\n\nexport default BulletSystemView;\n","import {TextureFrame} from './TextureFrame';\n\nexport class Animation {\n    constructor (textureAtlas, geometry, interval = 10, repeat = true, frames = [],\n            framePrefix = '', fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n\n        // Use the first frame as a size reference\n        this.textureFrame = new TextureFrame(this.textureAtlas, geometry, framePrefix + frames[0], fixed);\n\n        this.interval = interval;\n        this.frames = frames;\n        this.framePrefix = framePrefix;\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n\n        this._updateTexture();\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _updateTexture () {\n        this.textureFrame.frame = this.framePrefix + this.frames[this.currentFrameIndex];\n    }\n\n    reset () {\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n    }\n\n    update (delta) {\n        this.currentDisplayTime += 1;\n\n        if (this.currentDisplayTime > this.interval) {\n            this.currentDisplayTime = 0;\n\n            this.currentFrameIndex++;\n\n            if (this.currentFrameIndex >= this.frames.length) {\n                this.currentFrameIndex = 0;\n            }\n\n            this._updateTexture();\n        }\n    }\n\n    get currentFrame () {\n        return this.frames[this.currentFrameIndex];\n    }\n}\n","import { Matrix4, Geometry, Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {Animation} from \"../../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nconst WATER_FRAMES = [\n    'animation_water_0001',\n    'animation_water_0002',\n    'animation_water_0003',\n    'animation_water_0004',\n    'animation_water_0005',\n    'animation_water_0006',\n    'animation_water_0007',\n    'animation_water_0008',\n    'animation_water_0009'\n];\n\nfunction waterGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = waterGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass WaterBlocksView extends View {\n    constructor (map, textureAtlasName, waterFrames = WATER_FRAMES) {\n        super();\n\n        this.map = map;\n        this._textureAtlasName = textureAtlasName;\n        this._waterFrames = waterFrames;\n        this.blocks = map.blocks(['water']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        // Do not clone, since all water animates in sync\n        this.textureAtlas = TextureManager.getAtlas(this._textureAtlasName, true);\n\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.animation = new Animation(this.textureAtlas, this.geometry, 9, true, this._waterFrames, '', true);\n        this.animation.textureFrame.width = 100;\n        this.animation.textureFrame.height = 100;\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: false\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n\n    update () {\n        this.animation.update();\n    }\n}\n\nexport default WaterBlocksView;\n","import { DoubleSide, Matrix4, Mesh, MeshLambertMaterial, Geometry, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nfunction wallBlockGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.south) {\n        const south = textureAtlas.getBounds(block.walls.south);\n\n        const southGeometry = new PlaneGeometry(block.width, block.height);\n\n        southGeometry.faceVertexUvs[0][0] = [south[0], south[1], south[3]];\n        southGeometry.faceVertexUvs[0][1] = [south[1], south[2], south[3]];\n        southGeometry.rotateY(Math.PI / 2);\n        southGeometry.translate(block.width / 2, 0, 0);\n\n        geometries.push(southGeometry);\n    }\n\n    if (block.walls.north) {\n        const north = textureAtlas.getBounds(block.walls.north);\n\n        const northGeometry = new PlaneGeometry(block.width, block.height);\n\n        northGeometry.faceVertexUvs[0][0] = [north[0], north[1], north[3]];\n        northGeometry.faceVertexUvs[0][1] = [north[1], north[2], north[3]];\n        northGeometry.rotateY(-(Math.PI / 2));\n        northGeometry.translate(-(block.width / 2), 0, 0);\n\n        geometries.push(northGeometry);\n    }\n\n    if (block.walls.west) {\n        const west = textureAtlas.getBounds(block.walls.west);\n\n        const westGeometry = new PlaneGeometry(block.width, block.height);\n\n        westGeometry.faceVertexUvs[0][0] = [west[0], west[1], west[3]];\n        westGeometry.faceVertexUvs[0][1] = [west[1], west[2], west[3]];\n        westGeometry.rotateX((Math.PI / 2));\n        westGeometry.translate(0, -(block.height / 2), 0);\n\n        geometries.push(westGeometry);\n    }\n\n    if (block.walls.east) {\n        const east = textureAtlas.getBounds(block.walls.east);\n\n        const eastGeometry = new PlaneGeometry(block.width, block.height);\n\n        eastGeometry.faceVertexUvs[0][0] = [east[0], east[1], east[3]];\n        eastGeometry.faceVertexUvs[0][1] = [east[1], east[2], east[3]];\n        eastGeometry.rotateX(-(Math.PI / 2));\n        eastGeometry.rotateY((Math.PI / 2));\n        eastGeometry.translate(0, (block.height / 2), 0);\n\n        geometries.push(eastGeometry);\n    }\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = wallBlockGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass StaticBlocksView extends View {\n    constructor (map, textureAtlasName) {\n        super();\n\n        this.map = map;\n        this.textureAtlasName = textureAtlasName;\n        this.blocks = map.blocks(['wall']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        this.textureAtlas = TextureManager.getAtlas(this.textureAtlasName, false);\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: true,\n            side: DoubleSide\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n}\n\nexport default StaticBlocksView;\n","import { Mesh, MeshLambertMaterial, Object3D, PlaneGeometry, SpotLight } from 'three';\nimport { TextureFrame } from '../../../../engine/graphics/TextureFrame';\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\nimport {View} from \"../../../../engine/graphics/View\";\n\nclass LightView extends View {\n    constructor (light) {\n        super();\n        this.light = light;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('world', true);\n        const lightGeometry = new PlaneGeometry(32, 32);\n\n        this.textureFrame = new TextureFrame(textureAtlas, lightGeometry, 'light1');\n\n        const lightMaterial = new MeshLambertMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        const lightMesh = new Mesh(lightGeometry, lightMaterial);\n\n        lightMesh.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        lightMesh.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(lightMesh);\n\n        const spotLight = new SpotLight(0xff00000, 1);\n\n        const target = new Object3D();\n\n        target.position.set(this.light.x, this.light.y, -this.light.z);\n        target.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(target);\n\n        spotLight.target = target;\n        spotLight.angle = 45 * (Math.PI / 180);\n        spotLight.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        spotLight.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(spotLight);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.translateX(100 / 2);\n        this.mesh.translateY(100 / 2);\n        this.mesh.translateZ(100);\n\n        super.init();\n    }\n}\n\nexport default LightView;\n","import { Object3D } from 'three';\nimport WaterBlocksView from './world/WaterBlocksView';\nimport StaticBlocksView from './world/StaticBlocksView';\nimport LightView from './lights/LightView';\nimport {View} from '../../../engine/graphics/View';\n\nclass WorldMapView extends View {\n    constructor (map) {\n        super();\n\n        this.map = map;\n        this.wallsView = new StaticBlocksView(map, 'tiles');\n        this.waterView = new WaterBlocksView(map, 'tiles');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        for (const light of this.map.lights) {\n            const lightView = new LightView(light);\n\n            lightView.init();\n\n            this.mesh.add(lightView.mesh);\n        }\n\n        this.wallsView.init();\n        this.waterView.init();\n\n        this.mesh.add(this.wallsView.mesh);\n        this.mesh.add(this.waterView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        this.waterView.update();\n    }\n}\n\nexport default WorldMapView;\n","import { Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {Animation} from \"../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\n\nconst WALK_FRAMES = [\n    'walk_0001',\n    'walk_0002',\n    'walk_0003',\n    'walk_0004',\n    'walk_0005',\n    'walk_0006',\n    'walk_0007',\n    'walk_0008'\n];\n\nconst RUN_FRAMES = [\n    'run_0001',\n    'run_0002',\n    'run_0003',\n    'run_0004',\n    'run_0005',\n    'run_0006',\n    'run_0007',\n    'run_0008'\n];\n\nconst IDLE_FRAMES = ['idle_0001'];\n\nconst TEAM_COLORS = {\n    american: 0x006D02,\n    german: 0xcccc00\n};\n\nclass SoldierView extends View {\n    constructor (soldier) {\n        super();\n\n        this.soldier = soldier;\n        this._team = soldier ? soldier.team : 'american';\n    }\n\n    set team (team) {\n        if (team !== this._team) {\n            this._team = team;\n            this.material.color.setHex(TEAM_COLORS[team]);\n        }\n    }\n\n    init () {\n        const soldier = this.soldier;\n\n        this.geometry = new PlaneGeometry(soldier.height * 2, soldier.width * 2);\n\n        this.geometry.rotateZ(Math.PI);\n\n        const textureAtlas = TextureManager.getAtlas('soldier', true);\n\n        this.animations = {\n            walk: new Animation(textureAtlas, this.geometry, 9, true, WALK_FRAMES, 'soldier_weapon_'),\n            run: new Animation(textureAtlas, this.geometry, 5, true, RUN_FRAMES, 'soldier_weapon_'),\n            idle: new Animation(textureAtlas, this.geometry, 8, true, IDLE_FRAMES, 'soldier_weapon_')\n        };\n\n        this.currentAnimation = this.animations.idle;\n\n        this.material = new MeshLambertMaterial({\n            map: textureAtlas.texture,\n            transparent: true,\n            color: TEAM_COLORS[this._team]\n        });\n\n        this.material.color.offsetHSL(0.1, 0.8, 0.4);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.position.set(soldier.position.x, soldier.position.y, soldier.position.z);\n        this.mesh.rotation.z = soldier.angle;\n\n        super.init();\n    }\n\n    _updateAnimation () {\n        let animation = this.currentAnimation;\n\n        if (this.soldier.isMoving) {\n            if (this.soldier.isRunning) {\n                animation = this.animations.run;\n            } else {\n                animation = this.animations.walk;\n            }\n        } else {\n            animation = this.animations.idle;\n        }\n\n        // Animation changed\n        if (animation !== this.currentAnimation) {\n            this.currentAnimation = animation;\n            this.currentAnimation.reset();\n        }\n\n        this.currentAnimation.update();\n    }\n\n    update (interpolationPercentage) {\n        let zOffset = this.soldier.depth;\n\n        if (this.soldier.dead) {\n            this.mesh.visible = false;\n            zOffset = 0;\n        } else if (!this.mesh.visible) {\n            this.mesh.visible = true;\n        }\n\n        const previous = this.soldier.previousPosition;\n        const current = this.soldier.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n\n        this.mesh.position.z += zOffset;\n\n        this.mesh.rotation.z = this.soldier.angle + (90 * (Math.PI / 180));\n\n        this._updateAnimation();\n    }\n}\n\nexport default SoldierView;\n","import { Object3D } from \"three\";\nimport { ObjectPool } from \"../../../engine/utils/ObjectPool\";\nimport { View } from \"../../../engine/graphics/View\";\nimport SoldierView from \"./SoldierView\";\nimport { Soldier } from \"../../../core/entities/Soldier\";\n\nexport class SoldierViewPool extends View {\n    private readonly soldiers: Set<Soldier>;\n    private viewPool: ObjectPool<SoldierView>;\n    private viewPairs: WeakMap<Soldier, SoldierView>;\n\n    constructor(soldiers: Set<Soldier>, poolLimit?: number) {\n        super();\n\n        this.soldiers = soldiers;\n\n        this.viewPool = new ObjectPool<SoldierView>(\n            (): SoldierView => {\n                return new SoldierView(null);\n            },\n            this.soldiers.size,\n            10,\n            poolLimit || 200\n        );\n\n        this.viewPairs = new WeakMap();\n    }\n\n    init() {\n        this.mesh = new Object3D();\n        this._initialized = true;\n    }\n\n    update(interpolationPercentage) {\n        // Keep viewPool in sync with soldier pool\n        if (this.viewPool.size > this.soldiers.size) {\n            this.viewPool.allocate(this.soldiers.size - this.viewPool.size);\n        }\n\n        for (const soldier of this.soldiers) {\n            let view = this.viewPairs.get(soldier);\n\n            if (!view && !soldier.dead) {\n                view = this.viewPool.get();\n\n                view.soldier = soldier;\n                view.init();\n\n                // Team is set after, because it affects the material\n                view.team = soldier.team;\n\n                this.mesh.add(view.mesh);\n\n                this.viewPairs.set(soldier, view);\n            } else if (view) {\n                view.update(interpolationPercentage);\n\n                if (soldier.dead && this.viewPairs.has(soldier)) {\n                    this.viewPool.free(view);\n                    this.viewPairs.delete(soldier);\n                }\n            }\n        }\n    }\n}\n","import {\n    AmbientLight,\n    Camera,\n    OrthographicCamera,\n    PerspectiveCamera,\n    SpotLight,\n} from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { PlayState } from \"../PlayState\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\n\nexport class PlayRenderView extends ThreeRenderView {\n    public camera?: PerspectiveCamera = undefined;\n    private state: PlayState;\n    private map: any;\n    private _cameraFollowView?: any;\n    private _cameraFollowLight?: SpotLight;\n\n    constructor(state: PlayState) {\n        super();\n\n        this.state = state;\n        this.map = this.state.map;\n    }\n\n    get cameraFollowView(): any {\n        return this._cameraFollowView as any;\n    }\n\n    get cameraFollowLight(): SpotLight {\n        return this._cameraFollowLight as SpotLight;\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new PerspectiveCamera(\n            75,\n            this.map.width / this.map.height,\n            100,\n            1000\n        );\n\n        this.getCamera().position.x =\n            (this.map.width / 2) * this.map.blockWidth;\n        this.getCamera().position.y =\n            (this.map.height / 2) * this.map.blockHeight;\n        this.getCamera().position.z = this.map.blockDepth * 6;\n\n        const ambientLight = new AmbientLight(0x030303);\n\n        this.scene.add(ambientLight);\n\n        this._cameraFollowLight = new SpotLight(0xfffffff, 2, 800);\n        this._cameraFollowLight.angle = 135 * (Math.PI / 180);\n        this._cameraFollowLight.exponent = 10;\n        this._cameraFollowLight.target = this._cameraFollowView.mesh;\n\n        this.scene.add(this._cameraFollowLight);\n\n        this._initialized = true;\n    }\n\n    update(delta: number) {\n        if (this.state.paused) {\n            return;\n        }\n\n        super.update(delta);\n\n        if (this.cameraFollowView) {\n            this.getCamera().position.setX(this.cameraFollowView.position.x);\n            this.getCamera().position.setY(this.cameraFollowView.position.y);\n\n            this.cameraFollowLight.position.setX(\n                this.cameraFollowView.position.x\n            );\n            this.cameraFollowLight.position.setY(\n                this.cameraFollowView.position.y\n            );\n            this.cameraFollowLight.position.setZ(\n                this.cameraFollowView.position.z + 400\n            );\n        }\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as PerspectiveCamera;\n    }\n}\n","import ViewContainer from '../../engine/graphics/ViewContainer';\n\nimport {StatsRenderView} from './ui/StatsRenderView';\nimport AmmoView from './ui/AmmoView';\nimport HealthView from './ui/HealthView';\nimport WeaponView from './ui/WeaponView';\nimport ScoreView from './ui/ScoreView';\n\nimport BulletSystemView from './views/BulletSystemView';\nimport WorldMapView from './views/WorldMapView';\nimport SoldierView from './views/SoldierView';\nimport {SoldierViewPool} from './views/SoldierViewPool';\nimport {PlayRenderView} from './views/PlayRenderView';\n\nexport const ViewBuilder = {\n    uiView (playState) {\n        const uiView = new StatsRenderView(playState);\n        const uiViewContainer = new ViewContainer();\n\n        const scoreView = new ScoreView(playState);\n        const weaponView = new WeaponView(playState);\n        const ammoView = new AmmoView(playState);\n        const healthView = new HealthView(playState);\n\n        uiViewContainer.addDynamicView(scoreView, { x: 100, y: 100, z: 0 });\n        uiViewContainer.addDynamicView(weaponView, { x: 280, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(ammoView, { x: 10, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(healthView, { x: 600, y: 540, z: 0 });\n        uiView.addViewContainer('main', uiViewContainer);\n        uiView.currentViewContainer = 'main';\n\n        return uiView;\n    },\n\n    playView (playState) {\n        const playView = new PlayRenderView(playState);\n\n        const playerView = new SoldierView(playState.player);\n        const soldierView = new SoldierViewPool(playState.soldiers);\n        const bulletSystemView = new BulletSystemView(playState.bulletSystem);\n        const worldMapView = new WorldMapView(playState.map);\n\n        const viewContainer = new ViewContainer();\n\n        viewContainer.addDynamicView(playerView);\n        viewContainer.addDynamicView(soldierView);\n        viewContainer.addDynamicView(bulletSystemView);\n        viewContainer.addDynamicView(worldMapView);\n\n        playView.addViewContainer('main', viewContainer);\n        playView.currentViewContainer = 'main';\n\n        // Camera follow\n        playView._cameraFollowView = playerView;\n\n        return playView;\n    }\n};\n","/**\n * Get a given statistic of a all soldiers per team.\n *\n * @param {string} stat Stat to get.\n *\n * @return {Map} Stats per team\n */\nimport { Soldier } from \"./entities/Soldier\";\n\nexport class Match {\n    private matchTime: number = 0;\n    private matchDuration: number = 300000;\n    public readonly soldiers: Set<Soldier> = new Set<Soldier>();\n    private teamNames: string[] = [];\n    private teams: Map<string, Set<Soldier>> = new Map();\n\n    constructor(teams: string[]) {\n        for (const teamName of teams) {\n            this.teamNames.push(teamName);\n            this.teams.set(teamName, new Set());\n        }\n    }\n\n    teamWithLeastPlayers() {\n        let leastTeamName: string | undefined = undefined;\n        let minCount = Number.MAX_VALUE;\n\n        for (const teamName of this.teamNames) {\n            const team = this.teams.get(teamName) as Set<Soldier>;\n            const count = team.size;\n\n            if (count < minCount) {\n                leastTeamName = teamName;\n                minCount = count;\n            }\n        }\n\n        return leastTeamName;\n    }\n\n    addSoldier(soldier, teamName) {\n        if (!teamName) {\n            teamName = this.teamWithLeastPlayers();\n        }\n\n        // FIXME get this out of here?\n        soldier.team = teamName;\n\n        const team = this.teams.get(teamName);\n\n        if (team) {\n            team.add(soldier);\n            this.soldiers.add(soldier);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    sortedScores() {\n        const teams = new Map();\n\n        for (const soldier of new Set([...this.soldiers])) {\n            const team = teams.get(soldier.team);\n\n            if (team) {\n                team.kills += soldier.totalKills;\n                team.deaths += soldier.totalDeaths;\n                team.soldiers.push(soldier);\n            } else {\n                teams.set(soldier.team, {\n                    kills: soldier.totalKills,\n                    deaths: soldier.totalDeaths,\n                    soldiers: [soldier],\n                });\n            }\n        }\n\n        for (const team of teams.values()) {\n            team.soldiers.sort((a, b) => b.kills - a.kills);\n        }\n\n        return new Map(\n            [...teams.entries()].sort((teamA, teamB) => {\n                return teamB[1].kills - teamA[1].kills;\n            })\n        );\n    }\n\n    removeSoldier(soldier) {\n        for (const team of this.teams.values()) {\n            if (team.has(soldier)) {\n                team.delete(soldier);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    killsByTeam() {\n        return this.soldierStatsByTeam(\"kills\");\n    }\n\n    deathsByTeam() {\n        return this.soldierStatsByTeam(\"deaths\");\n    }\n    private soldierStatsByTeam(stat) {\n        const resultsByTeam = new Map();\n\n        for (let [teamName, soldiers] of this.teams.entries()) {\n            for (const soldier of soldiers) {\n                const teamResult = resultsByTeam.get(teamName);\n\n                if (teamResult) {\n                    resultsByTeam.set(teamName, teamResult + soldier[stat]);\n                } else {\n                    resultsByTeam.set(teamName, soldier[stat]);\n                }\n            }\n        }\n    }\n\n    start() {}\n\n    end() {}\n\n    update(delta): void {\n        this.matchTime += delta;\n\n        if (this.matchTime >= this.matchDuration) {\n            this.end();\n        }\n    }\n}\n","import Gamepad from \"../../../engine/input/Gamepad\";\nimport { Player } from \"../../../core/entities/Player\";\nimport { Keys, LetterKeys } from \"../../../engine/input/Keys\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../../engine/input/InputSourceInterface\";\nimport { KeyboardInputSource } from \"../../../engine/input/KeyboardInputSource\";\nimport { Keyboard } from \"../../../engine/input/Keyboard\";\nimport { GamepadInputSource } from \"../../../engine/input/GamepadInputSource\";\n\nexport class PlayerInput implements StateInput {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private player: Player;\n\n    constructor(inputSources: Map<string, InputSourceInterface>, player) {\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n        this.player = player;\n    }\n\n    update(delta) {\n        if (\n            this.keyboard.isDown(Keys.UP) ||\n            this.gamepad?.isStickDown(\"left\", \"up\")\n        ) {\n            this.player.moveUp();\n        } else if (\n            this.keyboard.isDown(Keys.DOWN) ||\n            this.gamepad?.isStickDown(\"left\", \"down\")\n        ) {\n            this.player.moveDown();\n        } else {\n            this.player.stopMoving();\n        }\n\n        if (\n            this.keyboard.isDown(Keys.RIGHT) ||\n            this.gamepad?.isStickDown(\"right\", \"right\")\n        ) {\n            this.player.turnRight();\n        } else if (\n            this.keyboard.isDown(Keys.LEFT) ||\n            this.gamepad?.isStickDown(\"right\", \"left\")\n        ) {\n            this.player.turnLeft();\n        } else {\n            this.player.stopTurning();\n        }\n\n        if (\n            !this.player.isRunning &&\n            (this.keyboard.isDown(Keys.CTRL) ||\n                this.gamepad?.isDown(\"rightTrigger\"))\n        ) {\n            this.player.fireBullet();\n        }\n\n        if (\n            this.keyboard.isDown(Keys.SHIFT) ||\n            this.gamepad?.isDown(\"actionSouth\")\n        ) {\n            this.player.isRunning = true;\n        } else {\n            this.player.isRunning = false;\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.R) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionWest\")\n        ) {\n            this.player.reload();\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.X) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionNorth\")\n        ) {\n            this.player.scrollWeapons(\"down\");\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.Z) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionEast\")\n        ) {\n            this.player.scrollWeapons(\"up\");\n        }\n    }\n}\n","import { PlayState } from \"../PlayState\";\nimport { Keys, LetterKeys } from \"../../../engine/input/Keys\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../../engine/input/InputSourceInterface\";\nimport { KeyboardInputSource } from \"../../../engine/input/KeyboardInputSource\";\nimport { Keyboard } from \"../../../engine/input/Keyboard\";\nimport { GamepadInputSource } from \"../../../engine/input/GamepadInputSource\";\nimport Gamepad from \"../../../engine/input/Gamepad\";\n\nexport class UiInput implements StateInput {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private state: PlayState;\n\n    constructor(inputSources: Map<string, InputSourceInterface>, state) {\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n\n        this.state = state;\n    }\n\n    update(delta) {\n        if (\n            this.keyboard.isDown(LetterKeys.E) ||\n            this.gamepad?.gamepadButtonDownOnce(\"leftBumper\")\n        ) {\n            this.state.showScores = true;\n        } else {\n            this.state.showScores = false;\n        }\n\n        if (this.keyboard.keyboardDownOnce(Keys.ESC)) {\n            if (this.state.paused) {\n                this.state.resume();\n            } else {\n                this.state.pause();\n            }\n        }\n    }\n}\n","import { Entity } from \"./Entity\";\n\nconst GRAVITY = -0.2;\n\n/**\n * Entities that walk, run, jump, die and get hit by bullets.\n */\nexport class Character extends Entity {\n    public maxHealth: number = 100;\n    public walkingSpeed: number = 0.1;\n    public runningSpeed: number = 0.2;\n    private _isRunning: boolean = false;\n    public health: number = 100;\n\n    constructor(x, y, z, width, height, depth) {\n        super(x, y, z, width, height, depth);\n\n        this.reset();\n\n        this.options.physics = true;\n        this.options.bullets = true;\n        this.options.isCharacter = true;\n    }\n\n    set isRunning(running) {\n        if (running) {\n            this._isRunning = true;\n            this.speed = this.runningSpeed;\n        } else {\n            this._isRunning = false;\n            this.speed = this.walkingSpeed;\n        }\n    }\n\n    get isRunning() {\n        return this._isRunning;\n    }\n\n    fall() {\n        this.velocity.z = GRAVITY;\n    }\n\n    hitByBullet(bullet) {\n        this.health -= bullet.damage;\n\n        if (this.health === 0) {\n            this.kill();\n        }\n    }\n\n    stopFalling() {\n        this.velocity.z = 0;\n    }\n\n    reset() {\n        super.reset();\n\n        this._isRunning = false;\n        this.speed = this.walkingSpeed;\n        this.health = 100;\n\n        this.health = this.maxHealth;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.position.z <= 0) {\n            this.kill();\n        }\n    }\n}\n","class Gun {\n    constructor (name, options = {}) {\n        this.name = name;\n        this.maxMagazine = options.maxMagazine || 10;\n        this.magazine = options.magazine || this.maxMagazine;\n\n        this.maxAmmo = options.maxAmmo || 10;\n        this.ammo = (options.ammo || this.maxAmmo) - this.magazine;\n\n        this.fireRate = options.fireRate || 150;\n        this.damage = options.damage || 10;\n        this.reloadTime = options.reloadTime || 500;\n\n        this._reloadingTime = 0;\n        this._firedTime = 0;\n        this._canFire = true;\n\n        this.isReloading = false;\n        this.fired = false;\n    }\n\n    fire () {\n        if (!this.isReloading && this._canFire && this.magazine > 0) {\n            this.fired = true;\n            this._canFire = false;\n            this.magazine -= 1;\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    reload () {\n        if (!this.isReloading) {\n            this.isReloading = true;\n\n            let refill = this.maxMagazine - this.magazine;\n\n            const newAmmo = this.ammo - refill;\n\n            if (newAmmo < 0) {\n                refill = this.ammo;\n\n                this.ammo = 0;\n            } else {\n                this.ammo -= refill;\n            }\n\n            this.magazine += refill;\n        }\n    }\n\n    get magazines () {\n        return Math.floor(this.ammo / this.maxMagazine);\n    }\n\n    update (delta) {\n        if (this._fired) {\n            this._fired = false;\n        }\n\n        if (this.isReloading) {\n            this._reloadingTime += delta;\n\n            if (this._reloadingTime > this.reloadTime) {\n                this._reloadingTime = 0;\n                this.isReloading = false;\n            }\n        } else if (!this._canFire) {\n            this._firedTime += delta;\n\n            if (this._firedTime > this.fireRate) {\n                this._firedTime = 0;\n                this._canFire = true;\n            }\n        }\n    }\n}\n\nexport default Gun;\n","import Gun from './Gun';\n\nexport default {\n    mp44: function () {\n        const mp44 = new Gun('mp44', {\n            maxAmmo: 120,\n            maxMagazine: 30\n        });\n\n        return mp44;\n    },\n    thompson: function () {\n        const thompson = new Gun('thompson', {\n            maxAmmo: 90,\n            maxMagazine: 25,\n            fireRate: 90\n        });\n\n        return thompson;\n    }\n};\n","import { Character } from \"./Character\";\nimport WeaponFactory from \"../weapons/WeaponFactory\";\n\nexport class Soldier extends Character {\n    public name: string;\n    public weapons: any[] = [];\n    public currentWeaponIndex: number = 0;\n    public currentWeapon?: any;\n    public team: any;\n    public maxHealth: number = 100;\n    public walkingSpeed: number = 0.1;\n    public runningSpeed: number = 0.2;\n\n    // Contains the character killed, and the count\n    public kills: Map<Character, number> = new Map();\n\n    // Contains the characters killed by, and the count\n    public deaths: Map<Character, number> = new Map();\n\n    constructor(x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        // FIXME make configurable\n        this.name = \"cpu\";\n        this.team = team;\n\n        // TODO remove this hardcoded stuff\n        this.addWeapon(WeaponFactory.mp44());\n        this.addWeapon(WeaponFactory.thompson());\n        this.currentWeapon = this.weapons[0];\n\n        this.reset();\n\n        this.options.isSoldier = true;\n    }\n\n    addWeapon(weapon) {\n        // TODO increase ammo if weapon is the same\n        this.weapons.push(weapon);\n    }\n\n    scrollWeapons(direction) {\n        if (direction === \"up\") {\n            if (this.currentWeaponIndex === this.weapons.length - 1) {\n                this.currentWeaponIndex = 0;\n            } else {\n                this.currentWeaponIndex += 1;\n            }\n        } else if (direction === \"down\") {\n            if (this.currentWeaponIndex === 0) {\n                this.currentWeaponIndex = this.weapons.length - 1;\n            } else {\n                this.currentWeaponIndex -= 1;\n            }\n        } else {\n            throw new Error('direction is not \"up\" or \"down\"');\n        }\n\n        this.currentWeapon = this.weapons[this.currentWeaponIndex];\n    }\n\n    reload() {\n        if (!this.dead && this.currentWeapon) {\n            this.currentWeapon.reload();\n        }\n    }\n\n    hitByBullet(bullet) {\n        super.hitByBullet(bullet);\n\n        // TODO prevent team killing / make configurable\n        if (this.health === 0) {\n            let deathCount = this.deaths.get(bullet.firedBy);\n\n            if (deathCount) {\n                deathCount += 1;\n            } else {\n                deathCount = 1;\n            }\n\n            this.deaths.set(bullet.firedBy, deathCount);\n\n            let killedByCount = bullet.firedBy.kills.get(this);\n\n            if (killedByCount) {\n                killedByCount += 1;\n            } else {\n                killedByCount = 1;\n            }\n\n            bullet.firedBy.kills.set(this, killedByCount);\n        }\n    }\n\n    kill() {\n        super.kill();\n        const suicides = this.deaths.get(this);\n\n        if (suicides) {\n            this.deaths.set(this, suicides + 1);\n        } else {\n            this.deaths.set(this, 1);\n        }\n    }\n\n    get totalKills() {\n        let total = 0;\n\n        for (const kill of this.kills.values()) {\n            total += kill;\n        }\n\n        return total;\n    }\n\n    get totalDeaths() {\n        let total = 0;\n\n        for (const death of this.deaths.values()) {\n            total += death;\n        }\n\n        return total;\n    }\n\n    fireBullet() {\n        if (!this.dead && this.currentWeapon) {\n            const fired = this.currentWeapon.fire();\n\n            if (fired) {\n                this.actions.firedBullet = true;\n            }\n        }\n    }\n\n    reset() {\n        super.reset();\n\n        this.actions.firedBullet = false;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.actions.firedBullet) {\n            this.actions.firedBullet = false;\n        }\n\n        if (this.currentWeapon) {\n            this.currentWeapon.update(delta);\n        }\n    }\n}\n","import { Soldier } from \"./Soldier\";\n\nexport class Player extends Soldier {\n    constructor(x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth, team);\n\n        // FIXME make configurable\n        this.name = \"player\";\n\n        this.options.isPlayer = true;\n        this.options.audio = true;\n    }\n\n    update(delta) {\n        super.update(delta);\n    }\n}\n","import { StateAudio } from \"../StateAudio\";\nimport { PlayState } from \"./PlayState\";\n\nclass PlayAudio extends StateAudio {\n    private entities: any;\n    private player: any;\n\n    constructor(\n        state: PlayState,\n        effectsSpriteName: string,\n        backgroundSpriteName: string\n    ) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.entities = state.soldiers;\n        this.player = state.player;\n    }\n\n    update(delta) {\n        for (const entity of this.entities) {\n            if (entity === this.player && entity.actions.firedBullet) {\n                this.effects.play(entity.currentWeapon.name);\n            }\n        }\n    }\n}\n\nexport default PlayAudio;\n","import {Polygon} from '../../engine/math/Polygon';\nimport {Vector2} from \"three\";\n\nclass Block {\n    constructor (position, width, height, depth, options = {}) {\n        this._position = position;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.options = options;\n        this.type = options.type || 'wall';\n        this._walls = options.walls || {};\n        this.collidable = options.collidable || true;\n\n        this._computeBodies();\n    }\n\n    set walls (walls) {\n        this._walls = walls;\n        this._computeBodies();\n    }\n\n    get walls () {\n        return this._walls;\n    }\n\n    set position (position) {\n        this._position = position;\n        this._computeBodies();\n    }\n\n    get position () {\n        return this._position;\n    }\n\n    _computeBodies () {\n         // If fully closed block (nothing should be inside it)\n        if (this._walls.top && this._walls.west && this._walls.east && this._walls.south && this._walls.north) {\n            this.bodies = [\n                new Polygon(new Vector2(this.x, this.y), [\n                    new Vector2(0, 0),\n                    new Vector2(this.width, 0),\n                    new Vector2(this.width, this.height),\n                    new Vector2(0, this.height)\n                ])\n            ];\n        }\n\n        const bodies = [];\n\n        if (this._walls.west) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y), [\n                new Vector2(0, 0),\n                new Vector2(this.width, 0),\n                new Vector2(this.width, 2),\n                new Vector2(0, 2)\n            ]));\n        }\n\n        if (this._walls.east) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y + this.height), [\n                new Vector2(0, 0),\n                new Vector2(this.width, 0),\n                new Vector2(this.width, -2),\n                new Vector2(0, -2)\n            ]));\n        }\n\n        if (this._walls.south) {\n            bodies.push(new Polygon(new Vector2(this.x + this.width, this.y), [\n                new Vector2(0, 0),\n                new Vector2(0, this.height),\n                new Vector2(-2, this.height),\n                new Vector2(-2, 0)\n            ]));\n        }\n\n        if (this._walls.north) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y), [\n                new Vector2(0, 0),\n                new Vector2(0, this.height),\n                new Vector2(2, this.height),\n                new Vector2(2, 0)\n            ]));\n        }\n\n        this.bodies = bodies;\n    }\n\n    get x () {\n        return this._position.x;\n    }\n\n    get y () {\n        return this._position.y;\n    }\n\n    get z () {\n        return this._position.z;\n    }\n}\n\nexport default Block;\n","class Light {\n    constructor (x, y, z, color) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n        this.color = color;\n        this.sourcePosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.angle = Math.PI * 2;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n}\n\nexport default Light;\n","class WorldMap {\n    constructor (layers, width, height, depth, blockWidth, blockHeight, blockDepth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.blockWidth = blockWidth;\n        this.blockHeight = blockHeight;\n        this.blockDepth = blockDepth;\n\n        this.lights = [];\n        this.layers = layers;\n        this.name = null;\n    }\n\n    blocks (types) {\n        return this.blocksBetweenIndexes({\n            x: 0, y: 0, z: 0\n        }, {\n            x: this.width - 1,\n            y: this.height - 1,\n            z: this.depth - 1\n        }, types);\n    }\n\n    get totalWidth () {\n        return this.width * this.blockWidth;\n    }\n\n    get totalHeight () {\n        return this.height * this.blockHeight;\n    }\n\n    get totalDepth () {\n        return this.depth * this.blockDepth;\n    }\n\n    indexToPosition (index) {\n        return {\n            x: index.x * this.blockWidth,\n            y: index.y * this.blockHeight,\n            z: index.z * this.blockDepth\n        };\n    }\n\n    positionToIndex (position) {\n        const x = position.x;\n        const y = position.y;\n        const z = position.z;\n\n        const index = {};\n\n        index.x = Math.floor(x / this.blockWidth);\n        index.y = Math.floor(y / this.blockHeight);\n        index.z = Math.floor(z / this.blockDepth);\n\n        return index;\n    }\n\n    randomRespawnPosition () {\n        const respawn = this.respawns[Math.round(Math.random() * (this.respawns.length - 1))];\n        const position = this.indexToPosition(respawn.position);\n\n        return position;\n    }\n\n    blockAtIndex (index) {\n        if (index.z < 0 || index.z >= this.depth) {\n            return null;\n        }\n\n        if (index.y < 0 || index.y >= this.height) {\n            return null;\n        }\n\n        if (index.x < 0 || index.x >= this.width) {\n            return null;\n        }\n\n        return this.layers[index.z][index.y][index.x];\n    }\n\n    blockAtPosition (position) {\n        const indexes = this.positionToIndex(position);\n\n        return this.blockAtIndex(indexes);\n    }\n\n    blocksAtPositions (positions, types = []) {\n        const blocks = [];\n\n        for (const position of positions) {\n            const block = this.blockAtPosition(position);\n\n            if (block && types.indexOf(block.type) !== -1) {\n                blocks.push(block);\n            }\n        }\n\n        return blocks;\n    }\n\n    /**\n     * Get all blocks within two index positions in the map.\n     *\n     * @param {object} start - contains x, y, z index positions for start.\n     * @param {object} end - contains x, y, z index positions for end.\n     *\n     * @returns {array} All blocks within the box\n     */\n    blocksBetweenIndexes (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types = []) {\n        const blocks = [];\n\n        const min = start;\n        const max = end;\n\n        for (let z = 0; z < this.layers.length; z++) {\n            if ((z >= min.z && z <= max.z)) {\n                for (let y = 0; y < this.layers[z].length; y++) {\n                    if ((y >= min.y && y <= max.y)) {\n                        for (let x = 0; x < this.layers[z][y].length; x++) {\n                            if ((x >= min.x && x <= max.x)) {\n                                const index = { x, y, z };\n\n                                const block = this.blockAtIndex(index);\n\n                                if (block && types.indexOf(block.type) !== -1) {\n                                    blocks.push(block);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return blocks;\n    }\n\n    blocksBetweenPositions (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types) {\n        return this.blocksBetweenIndexes(this.positionToIndex(start), this.positionToIndex(end), types);\n    }\n\n    toString () {\n        let finalString = '';\n\n        for (const layer of this.layers) {\n            const layerStrings = [];\n\n            for (const layerRow of layer) {\n                const blocks = layerRow.map(v => v ? v.id : 0);\n\n                layerStrings.push(blocks.join(', '));\n            }\n\n            finalString = finalString.concat(layerStrings.join('\\n'));\n            finalString = finalString.concat('\\n---------------\\n');\n        }\n\n        return finalString;\n    }\n}\n\nexport default WorldMap;\n","import Block from './Block';\nimport Light from './Light';\nimport WorldMap from './WorldMap';\n\nconst _parseBlock = function (rawBlock, blockWidth, blockHeight, blockDepth) {\n    const position = {\n        x: rawBlock.position.x * blockWidth,\n        y: rawBlock.position.y * blockHeight,\n        z: rawBlock.position.z * blockDepth\n    };\n\n    const blockOptions = {\n        walls: rawBlock.walls,\n        type: rawBlock.type,\n        collidable: rawBlock.collidable\n    };\n\n    const block = new Block(position, blockWidth, blockHeight, blockDepth, blockOptions);\n\n    block.collidable = rawBlock.collidable || false;\n\n    return block;\n};\n\nconst _createEmptyLayers = function (mapWidth, mapHeight, mapDepth) {\n    const layers = [];\n\n    for (let z = 0; z < mapDepth; z++) {\n        const layer = [];\n\n        for (let y = 0; y < mapHeight; y++) {\n            const row = [];\n\n            for (let x = 0; x < mapDepth; x++) {\n                row.push(null);\n            }\n\n            layer.push(row);\n        }\n\n        layers.push(layer);\n    }\n\n    return layers;\n};\n\nconst parseLight = function (rawLight, blockWidth, blockHeight, blockDepth) {\n    const rawPosition = rawLight.position;\n    const sourcePosition = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    const position = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    let angle = Math.PI * 2;\n\n    if (rawLight.align === 'west') {\n        sourcePosition.x -= blockWidth / 2;\n    } else if (rawLight.align === 'east') {\n        sourcePosition.x += blockWidth / 2;\n        angle = 180 * (Math.PI / 180);\n    } else if (rawLight.align === 'north') {\n        sourcePosition.y += blockHeight / 2;\n        angle = 90 * (Math.PI / 180);\n    } else if (rawLight.align === 'south') {\n        sourcePosition.y -= blockHeight / 2;\n        angle = 270 * (Math.PI / 180);\n    }\n\n    const light = new Light(position.x, position.y, position.z, rawLight.color);\n\n    light.angle = angle;\n    light.sourcePosition = sourcePosition;\n\n    return light;\n};\n\nconst _parseRawMap = function (rawMap) {\n    // TODO validate map\n    const rawBlocks = rawMap.blocks;\n\n    const blockWidth = rawMap.blockWidth;\n    const blockHeight = rawMap.blockHeight;\n    const blockDepth = rawMap.blockDepth;\n\n    const mapWidth = rawMap.width;\n    const mapHeight = rawMap.height;\n    const mapDepth = rawMap.depth;\n\n    const layers = _createEmptyLayers(mapWidth, mapHeight, mapDepth);\n\n    for (const rawBlock of rawBlocks) {\n        const block = _parseBlock(rawBlock, blockWidth, blockHeight, blockDepth);\n\n        const position = rawBlock.position;\n\n        // TODO check for out of bounds\n        layers[position.z][position.y][position.x] = block;\n    }\n\n    const worldMap = new WorldMap(layers, mapWidth, mapHeight, mapDepth, blockWidth, blockHeight, blockDepth);\n\n    if (rawMap.lights) {\n        for (const rawLight of rawMap.lights) {\n            worldMap.lights.push(parseLight(rawLight, blockWidth, blockHeight, blockDepth));\n        }\n    }\n\n    worldMap.name = rawMap.name;\n    worldMap.respawns = [];\n\n    for (const respawn of rawMap.respawns) {\n        worldMap.respawns.push(respawn);\n    }\n\n    return worldMap;\n};\n\nconst MapParser = {\n    parse: function (rawMap) {\n        return _parseRawMap(rawMap);\n    }\n};\n\nexport default MapParser;\n","import CollisionUtils from \"../../core/CollisionUtils\";\nimport { PlayState } from \"../play/PlayState\";\nimport { Soldier } from \"../../core/entities/Soldier\";\nimport { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\n\nexport class CollisionUpdateSystem implements SystemUpdateInterface {\n    private readonly entities: Set<Soldier>;\n    private readonly map: any;\n\n    constructor(state: PlayState) {\n        this.entities = state.soldiers;\n        this.map = state.map;\n    }\n\n    update(delta: number): boolean {\n        for (const entity of this.entities) {\n            CollisionUtils.wallCollision(this.map, entity, (response) => {\n                entity.position.x -= response.overlapV.x;\n                entity.position.y -= response.overlapV.y;\n            });\n\n            CollisionUtils.floorCollision(this.map, entity, delta, (block) => {\n                if (block.type === \"water\") {\n                    entity.fall();\n                    entity.kill();\n                } else {\n                    entity.position.z = block.position.z + block.depth;\n                    entity.stopFalling();\n                }\n            });\n        }\n\n        return true;\n    }\n}\n","import { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\nimport { PlayState } from \"../play/PlayState\";\n\nexport class BulletUpdateSystem implements SystemUpdateInterface {\n    private state: PlayState;\n\n    constructor(state: PlayState) {\n        this.state = state;\n    }\n\n    update(delta: number): boolean {\n        this.state.bulletSystem.update(delta);\n\n        return true;\n    }\n}\n","import { SystemUpdateInterface } from \"./SystemUpdateInterface\";\nimport { StateInput } from \"../state/StateInput\";\n\nexport class ControllerUpdateSystem implements SystemUpdateInterface {\n    private readonly controllers: StateInput[];\n\n    constructor(controllers: StateInput[]) {\n        this.controllers = controllers;\n    }\n\n    public update(delta: number): boolean {\n        for (const controller of this.controllers) {\n            controller.update(delta);\n        }\n\n        return true;\n    }\n}\n","import { Soldier } from \"../../../core/entities/Soldier\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\n\nexport class ComputerInput implements StateInput {\n    private readonly soldier: Soldier;\n\n    constructor(soldier: Soldier) {\n        this.soldier = soldier;\n    }\n\n    update() {\n        if (Math.random() < 0.05) {\n            this.soldier.fireBullet();\n        }\n\n        if (Math.random() > 0.8) {\n            this.soldier.moveUp();\n        }\n\n        if (Math.random() > 0.7) {\n            if (Math.random() > 0.5) {\n                this.soldier.turnRight();\n            } else {\n                this.soldier.turnLeft();\n            }\n        } else {\n            this.soldier.stopTurning();\n        }\n\n        if (this.soldier.currentWeapon) {\n            if (this.soldier.currentWeapon.magazine === 0) {\n                this.soldier.reload();\n            }\n        }\n    }\n}\n","import { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\nimport { StateAudio } from \"../StateAudio\";\n\nexport class AudioUpdateSystem implements SystemUpdateInterface {\n    private audio: StateAudio;\n\n    constructor(audio: StateAudio) {\n        this.audio = audio;\n    }\n\n    update(delta: number): boolean {\n        this.audio.update(delta);\n\n        return true;\n    }\n}\n","import { SystemUpdateInterface } from \"../../engine/system/SystemUpdateInterface\";\nimport { PlayState } from \"../play/PlayState\";\nimport { Match } from \"../../core/Match\";\n\nexport class MatchUpdateSystem implements SystemUpdateInterface {\n    private map: any;\n    private match: Match;\n\n    constructor(state: PlayState) {\n        this.map = state.map;\n        this.match = state.match;\n    }\n\n    update(delta): boolean {\n        for (const soldier of this.match.soldiers) {\n            soldier.update(delta);\n\n            if (soldier.dead) {\n                const position = this.map.randomRespawnPosition();\n\n                soldier.respawn(position);\n            }\n        }\n\n        this.match.update(delta);\n\n        return true;\n    }\n}\n","import { PlayState } from \"./PlayState\";\nimport { ViewBuilder } from \"./ViewBuilder\";\n\nimport { Match } from \"../../core/Match\";\nimport { PlayerInput } from \"./input/PlayerInput\";\nimport { UiInput } from \"./input/UiInput\";\nimport { Player } from \"../../core/entities/Player\";\n\nimport PlayAudio from \"./PlayAudio\";\nimport MapParser from \"../../core/maps/MapParser\";\nimport AssetManager from \"../../engine/AssetManager\";\n\nimport { Soldier } from \"../../core/entities/Soldier\";\nimport { CollisionUpdateSystem } from \"../update-system/CollisionUpdateSystem\";\nimport { BulletUpdateSystem } from \"../update-system/BulletUpdateSystem\";\nimport { ControllerUpdateSystem } from \"../../engine/system/ControllerUpdateSystem\";\nimport { ComputerInput } from \"./input/ComputerInput\";\nimport { PauseUpdateSystem } from \"../update-system/PauseUpdateSystem\";\nimport { AudioUpdateSystem } from \"../update-system/AudioUpdateSystem\";\nimport { MatchUpdateSystem } from \"../update-system/MatchUpdateSystem\";\n\n/**\n * Create CPU soldiers.\n *\n * @param {PlayState} state The play state.\n * @param {number} count Number of CPU soldiers.\n *\n * @return {void}\n */\nfunction createCpuSoldiers(state, count): Soldier[] {\n    const soldiers: Soldier[] = [];\n\n    for (let i = 0; i < count; i++) {\n        const { x, y, z } = state.map.randomRespawnPosition();\n        const soldier = new Soldier(x, y, z, 48, 48, 1, \"american\");\n\n        state.match.addSoldier(soldier);\n        soldiers.push(soldier);\n    }\n\n    return soldiers;\n}\n\n/**\n * Create the player entity and add it to the play state.\n *\n * @param {PlayState} state The play state.\n * @param {string} name Name of the player.\n *\n * @param dead\n * @return {void}\n */\nfunction createPlayer(engine, state, name, dead = false): Player {\n    const { x, y, z } = state.map.randomRespawnPosition();\n    const player = new Player(x, y, z, 48, 48, 1, \"american\");\n\n    state.player = player;\n\n    player.kill();\n\n    state.match.addSoldier(player, \"american\");\n\n    return player;\n}\n\n/**\n * Create the views for the play state.\n *\n * @param {PlayState} state The play state.\n *\n * @return {void}\n */\nfunction createViews(state) {\n    state.addView(ViewBuilder.playView(state));\n    state.addView(ViewBuilder.uiView(state));\n}\n\nconst PlayBuilder = {\n    createSingleplayer(engine, options) {\n        const map = MapParser.parse(AssetManager.getMap(options.map));\n        const match = new Match(options.teams);\n        const state = new PlayState(engine, match, map);\n\n        const soldiers = createCpuSoldiers(state, options.cpuCount);\n        const player = createPlayer(engine, state, options.playerName);\n\n        state.addSystem(\n            new ControllerUpdateSystem([\n                new UiInput(engine.inputSources, state),\n                new PlayerInput(engine.inputSources, player),\n                ...soldiers.map((soldier) => new ComputerInput(soldier)),\n            ]),\n            0\n        );\n        state.addSystem(new PauseUpdateSystem(), 1);\n        state.addSystem(\n            new AudioUpdateSystem(new PlayAudio(state, \"guns\", \"background\")),\n            2\n        );\n        state.addSystem(new BulletUpdateSystem(state), 3);\n        state.addSystem(new MatchUpdateSystem(state), 4);\n        state.addSystem(new CollisionUpdateSystem(state), 5);\n\n        createViews(state);\n\n        return state;\n    },\n};\n\nexport default PlayBuilder;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\nimport PlayBuilder from '../../play/PlayBuilder';\nimport LogoView from '../../menu/views/LogoView';\n\n/**\n * Create the play state.\n *\n * @param {Engine} engine Game engine.\n * @param {object} options Options for the play state.\n *\n * @return {PlayState} The created play state.\n */\nfunction createPlayState (engine, options) {\n    const playOptions = Object.assign({\n        poolLimit: 200,\n        teams: ['american', 'german'],\n        cpuCount: 7,\n        map: 'level2',\n        playerName: 'unknown soldier'\n    }, options);\n\n    const playState = PlayBuilder.createSingleplayer(engine, playOptions);\n\n    engine.addState('play', playState);\n\n    return playState;\n}\n\n/**\n * Create the menu and add items to it.\n *\n * @param {Engine} engine Game engine instance.\n * @param {MenuState} menuState The menu state.\n *\n * @return {Menu} Menu instance.\n */\nfunction createMenu (engine, menuState) {\n    const menu = new Menu();\n\n    menu.addMenuItem(new MenuItem('createGame', 'Singleplayer', (menuItem) => {\n        let playState = engine.states.get('play');\n\n        if (!playState) {\n            playState = createPlayState(engine, {\n                playerName: menuState.options.get('name')\n            });\n\n            menuItem.text = 'Create game';\n        } else {\n            menuState.gamePlaying = true;\n\n            playState.player.name = menuState.options.get('name');\n            menuItem.text = 'Continue game';\n        }\n\n        playState.resume();\n\n        engine.changeState('play');\n    }));\n\n    menu.addMenuItem(new MenuItem('options', 'Options', () => {\n        menuState.currentMenu = 'options';\n    }));\n\n    menu.addMenuItem(new MenuItem('help', 'Help', () => {\n        menuState.currentMenu = 'help';\n    }));\n\n    return menu;\n}\n\n/**\n * Create the ViewContainer for this menu.\n *\n * @param {Menu} menu Menu instance.\n *\n * @return {ViewContainer} ViewContainer for the menu.\n */\nfunction createView (menu) {\n    const viewContainer = new ViewContainer();\n    const background = new BackgroundView('normandy', 'ui');\n\n    viewContainer.addDynamicView(new MenuItemsView(menu), { x: 500, y: 200, z: 0 });\n    viewContainer.addStaticView(new LogoView('logo', 'ui'), { x: 300, y: 300, z: 0 });\n\n    background.lightness = 0.5;\n    viewContainer.backgroundView = background;\n\n    return viewContainer;\n}\n\nconst MainMenu = {\n    create (engine, menuState) {\n        const menu = createMenu(engine, menuState);\n        const viewContainer = createView(menu);\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default MainMenu;\n","import { AbstractState } from \"../AbstractState\";\n\nexport class MenuState extends AbstractState {\n    public menus: Map<any, any>;\n    private _currentMenu: any;\n    public currentMenuName: any;\n    public options: Map<string, string>;\n    public gamePlaying: boolean;\n    public currentOptionsEdit: any;\n\n    constructor(engine) {\n        super(\"menu\", engine);\n\n        this.menus = new Map();\n        this._currentMenu = null;\n        this.currentMenuName = null;\n        this.options = new Map([[\"name\", \"Unknown Soldier\"]]);\n        this.gamePlaying = false;\n        this.currentOptionsEdit = null;\n    }\n\n    addMenu(name, menu) {\n        this.menus.set(name, menu);\n    }\n\n    changeOption(optionName, value) {\n        this.options.set(optionName, value);\n    }\n\n    set currentMenu(name) {\n        this._currentMenu = this.menus.get(name);\n\n        if (!this._currentMenu) {\n            throw new Error('Menu \"' + name + '\" does not exist');\n        }\n\n        this.currentMenuName = name;\n    }\n\n    get currentMenu() {\n        return this._currentMenu;\n    }\n\n    init() {\n        super.init();\n    }\n}\n","import MenuInput from \"./MenuInput\";\nimport { MenuRenderView } from \"./views/MenuRenderView\";\nimport MenuAudio from \"./MenuAudio\";\nimport OptionsMenu from \"./menus/OptionsMenu\";\nimport HelpMenu from \"./menus/HelpMenu\";\nimport MainMenu from \"./menus/MainMenu\";\nimport { MenuState } from \"./MenuState\";\nimport { AudioUpdateSystem } from \"../update-system/AudioUpdateSystem\";\nimport { ControllerUpdateSystem } from \"../../engine/system/ControllerUpdateSystem\";\n\nconst MenuBuilder = {\n    create(engine) {\n        const state = new MenuState(engine);\n\n        const subMenus = new Map([\n            [\"main\", MainMenu.create(engine, state)],\n            [\"options\", OptionsMenu.create(state)],\n            [\"help\", HelpMenu.create(state)],\n        ]);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            state.addMenu(subMenuName, subMenu.menu);\n        }\n\n        const menuView = new MenuRenderView(state);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            menuView.addViewContainer(subMenuName, subMenu.viewContainer);\n        }\n\n        menuView.currentViewContainer = \"main\";\n        state.addView(menuView);\n\n        state.currentMenu = \"main\";\n\n        state.addSystem(\n            new ControllerUpdateSystem([\n                new MenuInput(engine.inputSources, state),\n            ]),\n            0\n        );\n        state.addSystem(\n            new AudioUpdateSystem(\n                new MenuAudio(state, \"menu_effects\", \"background\")\n            ),\n            1\n        );\n\n        return state;\n    },\n};\n\nexport default MenuBuilder;\n","/**\n * Copyright 2014 Christopher Dolphin. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author dolphin@likethemammal.com (Chris Dolphin)\n */\n\n/**\n * GamepadMicro provides an easy interface to the Gamepad API.\n *\n * @constructor\n */\nfunction GamepadMicro () {\n    this._buttonNames = [\n        'actionSouth',\n        'actionEast',\n        'actionWest',\n        'actionNorth',\n        'leftBumper',\n        'rightBumper',\n        'leftTrigger',\n        'rightTrigger',\n        'select',\n        'start',\n        'leftStick',\n        'rightStick',\n        'dPadUp',\n        'dPadDown',\n        'dPadLeft',\n        'dPadRight',\n        'extra'\n    ];\n\n    this.reset();\n}\n\nGamepadMicro.prototype.reset = function () {\n    this._ticking = false;\n    this._prevTimestamps = [];\n    this._connectionListening = false;\n    this._updateCallback = function () {};\n    this._prevRawGamepadTypes = [];\n    this.gamepadconnected = _getRawGamepads.length > 0;\n    this.gamepadConnected = Boolean(this.gamepadconnected);\n    this.gamepadSupported = Boolean(_gamepadSupported());\n    this.gamepads = [];\n    this._heldButtonDelay = 200;\n    this._heldTimestampByGamepad = {};\n};\n\nconst _newGamepad = function () {\n    return {\n        leftStick: { x: 0, y: 0 },\n        rightStick: { x: 0, y: 0 },\n        dPad: { x: 0, y: 0 },\n        buttons: {},\n        _pressed: {},\n        timestamp: 0\n    };\n};\n\nGamepadMicro.prototype.onUpdate = function (callback) {\n    this._updateCallback = callback;\n    this._checkForEvents();\n    this._setupPoll();\n};\n\nGamepadMicro.prototype.offUpdate = function () {\n    this._shouldRemoveEvents();\n    this._removePoll();\n};\n\nGamepadMicro.prototype.update = function () {\n    this._updateCallback(this.gamepads);\n};\n\nGamepadMicro.prototype._checkForEvents = function () {\n    if (!this._connectionListening) {\n        window.addEventListener('gamepadconnected', this._onGamepadConnected.bind(this), false);\n        window.addEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this), false);\n        this._connectionListening = true;\n    }\n};\n\nGamepadMicro.prototype._shouldRemoveEvents = function () {\n    if (this._connectionListening) {\n        window.removeEventListener('gamepadconnected', this._onGamepadConnected.bind(this));\n        window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this));\n        this._connectionListening = false;\n    }\n};\n\nGamepadMicro.prototype._onGamepadConnected = function (event) {\n    const gamepad = event.gamepad;\n\n    if (gamepad.mapping === 'standard') {\n        this.gamepads[gamepad.index] = _newGamepad();\n        this.gamepadconnected = true;\n\n        this.update();\n    }\n};\n\nGamepadMicro.prototype._onGamepadDisconnected = function (event) {\n    const disconnectedGamepad = event.gamepad;\n    const gamepads = this.gamepads;\n\n    gamepads.forEach(function (gamepad, index) {\n        if (index === disconnectedGamepad.index) {\n            gamepads.splice(index, 1);\n        }\n    });\n\n    if (!gamepads.length) {\n        this.gamepadconnected = false;\n    }\n\n    this.update();\n};\n\nconst _getRawGamepads = function () {\n    const gamepads = (navigator.getGamepads && navigator.getGamepads()) || (navigator.webkitGetGamepads && navigator.webkitGetGamepads());\n    const standardGamepads = [];\n\n    if (gamepads) {\n        for (let i = 0, len = gamepads.length; i < len; i++) {\n            const gp = gamepads[i];\n\n            if (gp && gp.mapping === 'standard') {\n                standardGamepads.push(gp);\n            }\n        }\n    }\n\n    return standardGamepads;\n};\n\nconst _buttonPressed = function (gamepad, index) {\n    if (!gamepad || !gamepad.buttons || index >= gamepad.buttons.length) {\n        return false;\n    }\n\n    const b = gamepad.buttons[index];\n    let pressure = null;\n\n    if (!b) {\n        return false;\n    }\n\n    pressure = b;\n\n    if (typeof b === 'object') {\n        pressure = b.value;\n    }\n\n    return (pressure === 1.0);\n};\n\nGamepadMicro.prototype._checkForGamepadChange = function () {\n    const rawGamepads = _getRawGamepads();\n    let changed = false;\n    const changedRawGamepads = {};\n    let gamepadIndex = 0;\n\n    for (let i = 0; i < rawGamepads.length; i++) {\n        const gamepad = rawGamepads[i];\n        let heldTimestamps = null;\n        let hasBeenHeld = null;\n\n        if (!gamepad.timestamp) {\n            continue;\n        }\n\n        gamepadIndex = gamepad.index;\n\n        // Browsers don't update the gamepad timestamp if a button remains held.\n        // This is a manual check to see if any button has been held. Since the\n        // browser would tell us if it released, we'll assume some button is\n        // still held and announce it's continued heldness.\n        heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n        hasBeenHeld = Object.keys(heldTimestamps).length === 0;\n\n        // Don’t do anything if the current timestamp is the same as previous\n        // one, which means that the state of the gamepad hasn’t changed.\n        // This is only supported by Chrome right now, so the first check\n        // makes sure we’re not doing anything if the timestamps are empty\n        // or undefined.\n\n        if (gamepad.timestamp === this._prevTimestamps[gamepadIndex] && hasBeenHeld) {\n            continue;\n        }\n\n        this._prevTimestamps[gamepadIndex] = gamepad.timestamp;\n        changedRawGamepads[gamepadIndex] = gamepad;\n        changed = true;\n    }\n\n    return (changed) ? changedRawGamepads : false;\n};\n\nGamepadMicro.prototype._poll = function () {\n    const rawGamepads = this._checkForGamepadChange();\n\n    if (!rawGamepads) {\n        return;\n    }\n\n    this.gamepadconnected = true;\n    this.gamepadConnected = true;\n    this.gamepadSupported = true;\n\n    const currentGamepads = this.gamepads;\n    const buttonNames = this._buttonNames;\n\n    Object.keys(rawGamepads).map((gamepadIndex) => {\n        const currentRawGamepad = rawGamepads[gamepadIndex];\n\n        if (!currentRawGamepad) {\n            return;\n        }\n\n        // Gamepad(s) has changed\n        if (typeof currentRawGamepad !== this._prevRawGamepadTypes[gamepadIndex]) {\n            this._prevRawGamepadTypes[gamepadIndex] = typeof currentGamepad;\n        }\n\n        const activeButtons = {};\n        const currentGamepad = currentGamepads[gamepadIndex] || _newGamepad();\n        const heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n\n        for (let k = 0, len = buttonNames.length; k < len; k++) {\n            const name = buttonNames[k];\n            const heldTimestamp = heldTimestamps[name];\n            let isSameTimestamp = null;\n            const wasDown = Boolean(currentGamepad._pressed[name]);\n            const isDown = currentGamepad._pressed[name] = _buttonPressed(currentRawGamepad, k);\n            const now = Date.now();\n\n            if (wasDown && !isDown) {\n                activeButtons[name] = {\n                    released: true,\n                    held: false\n                };\n\n                if (heldTimestamps) {\n                    delete heldTimestamps[name];\n                }\n            } else if (isDown) {\n                if (heldTimestamp) {\n                    isSameTimestamp = heldTimestamp.gamepadTimestamp === currentRawGamepad.timestamp;\n\n                    // If the gamepad timestamp hasn't changed and the time is after the held delay\n                    if ((isSameTimestamp && now > heldTimestamp.browserTimestamp + this._heldButtonDelay) || (currentRawGamepad.timestamp > heldTimestamp.gamepadTimestamp + this._heldButtonDelay)) {\n                        activeButtons[name] = {\n                            held: true\n                        };\n                    }\n                } else {\n                    heldTimestamps[name] = {\n\n                        // Gamepad Timestamps are HighResTimeStamps relative when gamepad was connected\n                        gamepadTimestamp: currentRawGamepad.timestamp,\n                        browserTimestamp: now\n                    };\n                }\n            }\n        }\n\n        this._heldTimestampByGamepad[gamepadIndex] = heldTimestamps;\n\n        currentGamepad.timestamp = currentRawGamepad.timestamp;\n        currentGamepad.buttons = activeButtons;\n\n        // update the sticks\n        currentGamepad.leftStick.x = currentRawGamepad.axes[0];\n        currentGamepad.leftStick.y = currentRawGamepad.axes[1];\n        currentGamepad.rightStick.x = currentRawGamepad.axes[2];\n        currentGamepad.rightStick.y = currentRawGamepad.axes[3];\n\n        // dpad isn't a true stick, infer from buttons\n        currentGamepad.dPad.x = (currentGamepad.buttons.dPadLeft ? -1 : 0) + (currentGamepad.buttons.dPadRight ? 1 : 0);\n        currentGamepad.dPad.y = (currentGamepad.buttons.dPadUp ? -1 : 0) + (currentGamepad.buttons.dPadDown ? 1 : 0);\n\n        this.gamepads[gamepadIndex] = currentGamepad;\n    });\n\n    this.update();\n};\n\nGamepadMicro.prototype._setupPoll = function () {\n    if (!this._ticking) {\n        this._ticking = true;\n        this._tick();\n    }\n};\n\nGamepadMicro.prototype._tick = function () {\n    const tickFunc = GamepadMicro.prototype._tick.bind(this);\n\n    this._poll();\n\n    if (this._ticking) {\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(tickFunc);\n        } else if (window.mozRequestAnimationFrame) {\n            window.mozRequestAnimationFrame(tickFunc);\n        } else if (window.webkitRequestAnimationFrame) {\n            window.webkitRequestAnimationFrame(tickFunc);\n        }\n    }\n};\n\nGamepadMicro.prototype._removePoll = function () {\n    this._ticking = false;\n};\n\nconst _gamepadSupported = function () {\n    return navigator.getGamepads ||\n        Boolean(navigator.webkitGetGamepads) ||\n        Boolean(navigator.webkitGamepads);\n};\n\nexport default GamepadMicro;\n","import GamepadMicro from \"./utils/gamepad-micro\";\n\nexport class Gamepad {\n    private readonly gp: any;\n    private gamepad: any;\n    private readonly _previousGamepadStick: {};\n    private readonly _previousGamepadButton: {};\n    public readonly gamepadIndex: number;\n\n    constructor() {\n        this._previousGamepadStick = {};\n        this._previousGamepadButton = {};\n        this.gamepadIndex = 0;\n        this.gp = new GamepadMicro();\n\n        this.gp.onUpdate((gamepads: []) => {\n            this.gamepad = gamepads[this.gamepadIndex];\n\n            if (this.gp.gamepadsconnected) {\n            } else {\n            }\n        });\n    }\n\n    isDown(button) {\n        if (\n            this.gamepad?.buttons[button] &&\n            this.gamepad?.buttons[button].held\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    isStickDown(stick, direction) {\n        const gamepad = this.gamepad;\n\n        if (gamepad) {\n            if (stick === \"right\" && gamepad.rightStick) {\n                if (direction === \"right\") {\n                    if (gamepad.rightStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === \"left\") {\n                    if (gamepad.rightStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"up\") {\n                    if (gamepad.rightStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"down\") {\n                    if (gamepad.rightStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n\n            if (stick === \"left\" && gamepad.leftStick) {\n                if (direction === \"right\") {\n                    if (gamepad.leftStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === \"left\") {\n                    if (gamepad.leftStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"up\") {\n                    if (gamepad.leftStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"down\") {\n                    if (gamepad.leftStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    gamepadStickDownOnce(stick, direction) {\n        if (\n            !this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)\n        ) {\n            this._previousGamepadStick[stick + direction] = true;\n        } else if (\n            this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)\n        ) {\n            this._previousGamepadStick[stick + direction] = false;\n        }\n    }\n\n    gamepadButtonDownOnce(button) {\n        if (!this._previousGamepadButton[button] && !this.isDown(button)) {\n            this._previousGamepadButton[button] = true;\n        } else if (\n            this._previousGamepadButton[button] &&\n            !this.isDown(button)\n        ) {\n            this._previousGamepadButton[button] = false;\n        }\n    }\n}\n\nexport default Gamepad;\n","import { InputSourceInterface } from \"./InputSourceInterface\";\n\nimport Gamepad from \"./Gamepad\";\n\nexport class GamepadInputSource implements InputSourceInterface {\n    public readonly gamepad: Gamepad;\n\n    constructor() {\n        this.gamepad = new Gamepad();\n    }\n}\n","import { WebGLRenderer } from \"three\";\nimport { RendererInterface } from \"./RendererInterface\";\nimport { AbstractState } from \"../../client/AbstractState\";\nimport { ThreeRenderView } from \"./render-view/ThreeRenderView\";\n\nexport interface ThreeRendererOptions {\n    /**\n     * id of the html div to render into.\n     */\n    div: string;\n\n    width: number;\n    height: number;\n}\n\nexport class ThreeRenderer implements RendererInterface {\n    private _views?: Set<ThreeRenderView>;\n    protected webglRenderer: WebGLRenderer;\n\n    constructor(private options: ThreeRendererOptions) {\n        this.webglRenderer = new WebGLRenderer();\n\n        this.webglRenderer.setSize(options.width, options.height);\n        this.webglRenderer.setClearColor(0x000000);\n        this.webglRenderer.setPixelRatio(window.devicePixelRatio);\n        this.webglRenderer.autoClear = false;\n\n        (document.getElementById(options.div) as HTMLDivElement).appendChild(\n            this.webglRenderer.domElement\n        );\n    }\n\n    set views(views) {\n        this._views = views;\n\n        if (!views) {\n            return;\n        }\n\n        let index = 0;\n\n        for (const view of views) {\n            if (index === 0) {\n                // Get the clear color from the first view\n                this.webglRenderer.setClearColor(view.clearColor);\n            }\n\n            view.changeSize({\n                width: this.options.width,\n                height: this.options.height,\n            });\n\n            index += 1;\n        }\n    }\n\n    handleStateChange(state: AbstractState): void {\n        const views = state.views;\n\n        if (views.size > 0) {\n            this.views = views;\n        }\n    }\n\n    get views() {\n        return this._views;\n    }\n\n    preRender(): void {}\n\n    postRender(): void {}\n\n    render(interpolationPercentage: number): void {\n        this.webglRenderer.clear();\n\n        let index = 0;\n\n        const views = this._views;\n\n        if (!views) {\n            return;\n        }\n\n        for (const view of views) {\n            if (index > 0) {\n                this.webglRenderer.clearDepth();\n            }\n\n            this.webglRenderer.render(view.scene, view.getCamera());\n\n            index += 1;\n        }\n    }\n}\n","import DebugStats from './statsjs';\n\nconst _rendererStats = function () {\n    const container = document.createElement('div');\n\n    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n    const msDiv = document.createElement('div');\n\n    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#200;';\n    container.appendChild(msDiv);\n\n    const msText = document.createElement('div');\n\n    msText.style.cssText = 'color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n    msText.innerHTML = 'WebGLRenderer';\n    msDiv.appendChild(msText);\n\n    const msTexts = [];\n    const nLines = 9;\n\n    for (let i = 0; i < nLines; i++) {\n        msTexts[i] = document.createElement('div');\n        msTexts[i].style.cssText = 'color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        msDiv.appendChild(msTexts[i]);\n        msTexts[i].innerHTML = '-';\n    }\n\n    let lastTime = Date.now();\n\n    return {\n        domElement: container,\n\n        update: function (info) {\n            // refresh only 30time per second\n            if (Date.now() - lastTime < 1000 / 30) {\n                return;\n            }\n\n            lastTime = Date.now();\n\n            let i = 0;\n\n            if (info) {\n                msTexts[i++].textContent = '== Memory =====';\n                msTexts[i++].textContent = 'Programs: ' + info.memory.programs;\n                msTexts[i++].textContent = 'Geometries: ' + info.memory.geometries;\n                msTexts[i++].textContent = 'Textures: ' + info.memory.textures;\n\n                msTexts[i++].textContent = '== Render =====';\n                msTexts[i++].textContent = 'Calls: ' + info.render.calls;\n                msTexts[i++].textContent = 'Vertices: ' + info.render.vertices;\n                msTexts[i++].textContent = 'Faces: ' + info.render.faces;\n                msTexts[i++].textContent = 'Points: ' + info.render.points;\n            }\n        }\n    };\n};\n\nexport default class RenderDebug {\n    constructor (renderer) {\n        this.renderer = renderer;\n    }\n\n    init () {\n        this.statjs = new DebugStats();\n        this.statjs.setModes([0, 1, 2]);\n\n        // Stats.js\n        this.statjs.domElement.style.position = 'absolute';\n        this.statjs.domElement.style.right = '81px';\n        this.statjs.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.statjs.domElement);\n\n        this.rendererStats = _rendererStats();\n\n        // renderer-stats.js\n        this.rendererStats.domElement.style.position = 'absolute';\n\n        this.rendererStats.domElement.style.right = '0px';\n        this.rendererStats.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.rendererStats.domElement);\n    }\n\n    before () {\n        this.statjs.begin();\n    }\n\n    after () {\n        this.statjs.end();\n        this.rendererStats.update(this.renderer.info);\n    }\n}\n","import { ThreeRenderer, ThreeRendererOptions } from \"./ThreeRenderer\";\nimport RenderDebug from \"../utils/debug/RenderDebug\";\nimport { WebGLProgram } from \"three\";\n\nexport class DebugThreeRenderer extends ThreeRenderer {\n    private info: {} = {};\n    private readonly renderDebug: RenderDebug;\n\n    constructor(options: ThreeRendererOptions) {\n        super(options);\n\n        this.renderDebug = new RenderDebug(this);\n        this.renderDebug.init();\n    }\n\n    render(interpolationPercentage) {\n        this.webglRenderer.clear();\n\n        const info = {\n            memory: {\n                programs: 0,\n                geometries: 0,\n                textures: 0,\n            },\n            render: {\n                calls: 0,\n                vertices: 0,\n                faces: 0,\n                points: 0,\n            },\n        };\n\n        let index = 0;\n\n        if (this.views) {\n            for (const view of this.views) {\n                if (index > 0) {\n                    this.webglRenderer.clearDepth();\n                }\n\n                this.webglRenderer.render(view.scene, view.getCamera());\n\n                const programs: WebGLProgram[] = this.webglRenderer.info\n                    .programs as unknown as WebGLProgram[];\n\n                info.memory.programs += programs.length;\n                info.memory.geometries +=\n                    this.webglRenderer.info.memory.geometries;\n                info.memory.textures += this.webglRenderer.info.memory.textures;\n                info.render.calls += this.webglRenderer.info.render.calls;\n                info.render.vertices += this.webglRenderer.info.render.vertices;\n                info.render.faces += this.webglRenderer.info.render.faces;\n                info.render.points += this.webglRenderer.info.render.points;\n\n                index += 1;\n            }\n        }\n\n        this.info = info;\n    }\n\n    preRender(): void {\n        this.renderDebug.before();\n    }\n\n    postRender(): void {\n        this.renderDebug.after();\n    }\n}\n","import { AbstractState } from \"../../client/AbstractState\";\nimport { Engine } from \"../Engine\";\n\nexport class NullState extends AbstractState {\n    constructor(engine: Engine) {\n        super(\"null\", engine);\n    }\n\n    update() {}\n}\n","import Mainloop from \"@arjanfrans/mainloop\";\nimport { AbstractState } from \"../client/AbstractState\";\nimport { NullState } from \"./state/NullState\";\nimport { InputSourceInterface } from \"./input/InputSourceInterface\";\nimport { RendererInterface } from \"./renderer/RendererInterface\";\n\nexport interface EngineOptions {\n    renderer: RendererInterface;\n    input: { [key: string]: InputSourceInterface };\n}\n\nexport class Engine {\n    private states: Map<string, AbstractState> = new Map();\n    private currentState: AbstractState;\n    private readonly renderer: RendererInterface;\n    public readonly inputSources: Map<string, InputSourceInterface> = new Map();\n\n    constructor(options: EngineOptions) {\n        this.currentState = new NullState(this);\n        this.renderer = options.renderer;\n\n        for (const [key, inputSource] of Object.entries(options.input)) {\n            this.inputSources.set(key, inputSource);\n        }\n    }\n\n    /**\n     * Add a State to the engine.\n     */\n    addState(name: string, state: AbstractState): void {\n        this.states.set(name, state);\n    }\n\n    /**\n     * Change the current state and change the renderer's view to the view of the state.\n     *\n     * @param name Name of the state to change to.\n     */\n    changeState(name: string): void {\n        const state = this.states.get(name);\n\n        if (!state) {\n            throw new Error(`State ${name} not found.`);\n        }\n\n        this.currentState = state;\n        this.currentState.init();\n\n        this.renderer.handleStateChange(this.currentState);\n    }\n\n    /**\n     * Remove a state from the engine.\n     *\n     * @param name Name of the state to remove.\n     */\n    removeState(name: string): void {\n        this.states.delete(name);\n    }\n\n    /**\n     * The game loop. Updates the current state and renders it's Views.\n     */\n    run(): void {\n        const render = (interpolationPercentage) => {\n            this.currentState.render(interpolationPercentage);\n            this.renderer.render(interpolationPercentage);\n        };\n\n        const update = (delta) => {\n            if (this.currentState) {\n                this.currentState.update(delta);\n            } else {\n                console.warn(\"no current State\");\n            }\n        };\n\n        const before = () => {\n            this.renderer.preRender();\n        };\n\n        const after = () => {\n            this.renderer.postRender();\n        };\n\n        const loop = new Mainloop();\n\n        loop.setUpdate(update);\n        loop.setDraw(render);\n        loop.setBegin(before);\n        loop.setEnd(after);\n\n        loop.start();\n    }\n}\n","import { Game } from \"./client/Game\";\n\nnew Game().start();\n"],"sourceRoot":""}