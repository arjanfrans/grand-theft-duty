{"version":3,"sources":["engine/input/Keys.ts","engine/AssetManager.js","engine/input/KeyboardInputSource.ts","client/AbstractState.ts","client/Game.ts","engine/input/Keyboard.ts","engine/utils/debug/statsjs.js","client/menu/MenuInput.ts","engine/renderer/render-view/ThreeRenderView.ts","client/menu/views/MenuRenderView.ts","client/StateAudio.ts","client/menu/MenuAudio.ts","engine/menu-system/Menu.js","engine/menu-system/MenuItem.js","engine/menu-system/MenuInputItem.js","engine/graphics/TextureAtlas.js","engine/graphics/TextureManager.js","engine/graphics/TextureFrame.js","engine/graphics/View.js","engine/graphics/BackgroundView.js","engine/graphics/ViewContainer.js","client/menu/views/LogoView.js","engine/three-bmfont-text/lib/utils.js","engine/three-bmfont-text/lib/layout-bmfont-text.js","engine/three-bmfont-text/index.js","engine/three-bmfont-text/lib/vertices.js","engine/graphics/TextView.js","client/menu/views/MenuItemsView.js","client/menu/menus/OptionsMenu.js","client/menu/menus/HelpMenu.js","client/play/PlayState.ts","client/play/ui/StatsRenderView.ts","client/play/ui/AmmoView.js","client/play/ui/HealthView.js","client/play/ui/WeaponView.js","client/play/ui/ScoreView.js","engine/utils/ObjectPool.ts","client/play/views/BulletView.js","client/play/views/BulletSystemView.ts","engine/graphics/Animation.js","client/play/views/world/WaterBlocksView.js","client/play/views/world/StaticBlocksView.js","client/play/views/lights/LightView.js","client/play/views/WorldMapView.js","client/play/views/SoldierView.js","client/play/views/SoldierViewPool.ts","client/play/views/PlayRenderView.ts","client/play/ViewBuilder.js","core/Match.js","client/play/input/PlayerInput.ts","client/play/input/UiInput.ts","engine/math/Vector2Helper.ts","engine/math/Polygon.ts","core/entities/Entity.ts","core/entities/Character.ts","core/weapons/Gun.js","core/weapons/WeaponFactory.js","core/entities/Soldier.ts","core/entities/Player.ts","client/play/PlayAudio.ts","core/maps/Block.js","core/maps/Light.js","core/maps/WorldMap.js","core/maps/MapParser.js","engine/math/Box.ts","engine/math/VornoiRegion.ts","engine/physics/SatResult.ts","engine/physics/SeparatingAxisTheorem.ts","core/CollisionUtils.js","core/CollisionSystem.js","core/entities/Bullet.ts","core/BulletSystem.ts","client/play/input/ComputerInput.ts","client/play/PlayBuilder.js","client/menu/menus/MainMenu.js","client/menu/MenuState.js","client/menu/MenuBuilder.js","engine/input/utils/gamepad-micro.js","engine/input/Gamepad.ts","engine/input/GamepadInputSource.ts","engine/renderer/ThreeRenderer.ts","engine/utils/debug/RenderDebug.js","engine/renderer/DebugThreeRenderer.ts","engine/state/NullState.ts","engine/Engine.ts","index.ts"],"names":["Keys","BACKSPACE","CTRL","SPACE","ENTER","SHIFT","ESC","TAB","LEFT","UP","RIGHT","DOWN","SpecialKeysShift","_","SpecialKeys","NumberKeys","LetterKeys","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AllKeys","_assets","atlases","Map","textures","maps","fonts","audio","_loadAudioSprite","audioSpritePath","name","_loadJson","then","spriteJson","src","urls","fullSources","push","Promise","resolve","reject","onload","onloaderror","soundId","err","sound","Howler","Howl","mapping","set","_loadHowlerAudio","_loadFont","fontsPath","font","pages","fontJson","pageTextures","map","pageName","_loadTexture","all","page","get","url","_textureLoader","load","texture","progress","console","log","loaded","total","fileLoader","response","_loadXhr","JSON","parse","_loadAtlas","atlasesPath","atlas","meta","image","_loadMap","mapsPath","AssetLoader","init","assetConfig","TextureLoader","FileLoader","assetsToLoad","paths","textureAtlases","atlasName","mapName","fontName","audioSpriteName","getTexture","Error","cloneTexture","clone","this","needsUpdate","getMap","getAtlasMapping","getFont","getAudioSprite","audioSprite","KeyboardInputSource","keyboard","Keyboard","global","addEventListener","event","onKeyup","onKeydown","AbstractState","engine","inputs","views","_initialized","Set","undefined","view","add","input","values","delta","update","ASSET_PATH","path","__dirname","ASSET_CONFIG","Game","AssetManager","Engine","renderer","DebugThreeRenderer","div","width","height","gamepad","GamepadInputSource","menuState","MenuBuilder","create","addState","changeState","run","keys","_previousKeyboardKeys","_pressed","shiftDown","lastPressed","charKeys","codes","charCodes","codesShift","Object","concat","entries","key","code","charKey","shiftKey","keyCode","isDown","indexOf","shiftCode","toUpperCase","toLowerCase","Stats","now","performance","bind","Date","startTime","prevTime","frames","modes","createElement","tag","id","css","element","document","style","cssText","createPanel","fg","bg","text","innerHTML","appendChild","graph","i","setModes","children","container","length","display","updateGraph","dom","value","firstChild","Math","min","fps","fpsMin","Number","POSITIVE_INFINITY","fpsMax","fpsDiv","fpsText","fpsGraph","ms","msMin","msMax","msDiv","msText","msGraph","mem","memMin","memMax","memDiv","memText","memGraph","memory","REVISION","domElement","setMode","begin","end","time","max","textContent","round","heapSize","usedJSHeapSize","heapSizeLimit","jsHeapSizeLimit","MenuInput","inputSources","state","keyboardInputSource","gamepadInputSource","selectedItem","currentMenu","isEditing","keyboardDownOnce","isStickDown","moveUp","moveDown","editable","slice","lastPressedIsChar","keyByCode","lastPressedChar","gamepadButtonDownOnce","selectCurrentItem","ThreeRenderView","clearColor","viewContainers","currentViewContainerName","_currentViewContainer","_scene","currentViewContainer","Scene","viewContainer","mesh","visible","scene","warn","size","newViewContainer","MenuRenderView","camera","menu","menus","OrthographicCamera","currentMenuName","StateAudio","effectsSpriteName","backgroundSpriteName","effects","backgrounds","stop","MenuAudio","play","Menu","menuItems","menuItemKeys","selectedItemIndex","freeze","menuItem","action","MenuItem","onAction","MenuInputItem","label","defaultValue","_value","TextureAtlas","wrapS","RepeatWrapping","wrapT","w","h","frame","d","bounds","Vector2","x","y","filename","framePosition","frameSize","_atlases","TextureManager","TextureFrame","textureAtlas","geometry","initialFrame","fixed","getFrameSize","_changeSize","aw","ah","faceVertexUvs","uvsNeedUpdate","frameName","offset","getFrameOffset","View","initialPosition","position","z","initialized","BackgroundView","textureName","textureAtlasName","_width","_height","_lightness","getAtlas","PlaneGeometry","textureFrame","material","MeshBasicMaterial","transparent","hsl","color","getHSL","setHSL","s","Mesh","lightness","_initalized","scale","ViewContainer","staticViews","dynamicViews","_backgroundView","Object3D","renderOrder","staticView","backgroundView","remove","dynamicView","updateMatrix","updateMatrixWorld","LogoView","logoSize","box","positions","count","X_HEIGHTS","M_WIDTHS","CAP_HEIGHTS","TAB_ID","charCodeAt","SPACE_ID","TextLayout","opt","glyphs","_measure","computeMetrics","wrapper","Function","join","getGlyphById","chars","glyphIdx","findChar","getKerning","left","right","kernings","table","kern","first","second","amount","array","start","prototype","xtend","measure","_opt","tabSize","number","_setupSpaceGlyphs","lines","wordWrap","minWidth","maxLineWidth","reduce","prev","line","lineHeight","common","baseline","base","descender","letterSpacing","align","getAlignType","_descender","_baseline","_xHeight","idx","getXHeight","_capHeight","getCapHeight","_lineHeight","_ascender","self","forEach","lineIndex","lastGlyph","lineWidth","glyph","getGlyph","tx","data","index","xadvance","_linesTotal","_fallbackSpaceGlyph","_fallbackTabGlyph","space","getMGlyph","tabWidth","xoffset","yoffset","curPen","curWidth","nextPen","nextWidth","defineProperty","configurable","TextGeometry","assign","TypeError","layout","createLayout","flipY","texWidth","scaleW","texHeight","scaleH","filter","bitmap","visibleGlyphs","Float32Array","vertices","uvs","bw","bh","u0","v1","u1","v0","indices","createIndices","clockwise","type","setIndex","addAttribute","BufferAttribute","multipage","attributes","removeAttribute","boundingSphere","Sphere","itemSize","radius","center","output","minX","minY","sqrt","utils","isNaN","error","boundingBox","Box3","bbox","makeEmpty","BufferGeometry","TextView","options","_text","aligh","_color","rotation","PI","setHex","toString","_updateGeometry","MenuItemsView","selectedTextColor","textColor","viewMenuItemPairs","selectedView","logoView","itemCount","textView","previousItem","currentView","previousView","OptionsMenu","addMenuItem","changeOption","addDynamicView","background","HelpMenu","PlayState","match","collisionSystem","bulletSystem","player","showScores","paused","onPause","soldiers","soldier","dead","randomRespawnPosition","respawn","StatsRenderView","AmmoView","ammoSize","ammoMesh","magazineText","ammoText","ammo","magazine","currentWeapon","weapon","HealthView","_healthScale","applyMatrix","Matrix4","makeTranslation","oldX","healthScale","health","maxHealth","WeaponView","_weapon","ScoreView","backgroundMaterial","MeshLambertMaterial","opacity","backgroundGeometry","scoreTextView","_scoreText","teams","resultText","teamName","teamData","kills","deaths","soldierText","totalKills","totalDeaths","converToText","sortedScores","ObjectPool","factoryFunction","firstAllocationNumber","allocationNumber","allocationLimit","totalInstances","availableInstances","allocate","pop","object","BulletView","bullet","angle","interpolationPercentage","previous","previousPosition","current","BulletSystemView","poolLimit","bulletViewPool","bulletViewPairs","WeakMap","poolSize","deadBullets","deadBullet","bulletView","delete","activeBullets","Animation","interval","framePrefix","currentFrameIndex","currentDisplayTime","_updateTexture","WATER_FRAMES","waterGeometry","block","geometries","walls","top","getBounds","topGeometry","translate","blockGeometry","Geometry","merge","WaterBlocksView","waterFrames","_textureAtlasName","_waterFrames","blocks","blockWidth","blockHeight","blockDepth","mergedGeometry","mergeVertices","createMergedBlockGeometry","animation","wallBlockGeometry","south","southGeometry","rotateY","north","northGeometry","west","westGeometry","rotateX","east","eastGeometry","StaticBlocksView","side","DoubleSide","LightView","light","lightGeometry","lightMaterial","lightMesh","sourcePosition","rotateZ","spotLight","SpotLight","target","translateX","translateY","translateZ","WorldMapView","wallsView","waterView","lights","lightView","WALK_FRAMES","RUN_FRAMES","IDLE_FRAMES","TEAM_COLORS","american","german","SoldierView","_team","team","animations","walk","idle","currentAnimation","offsetHSL","isMoving","isRunning","reset","zOffset","depth","_updateAnimation","SoldierViewPool","viewPool","viewPairs","has","free","PlayRenderView","_cameraFollowView","_cameraFollowLight","PerspectiveCamera","getCamera","ambientLight","AmbientLight","exponent","cameraFollowView","setX","setY","cameraFollowLight","setZ","ViewBuilder","playState","uiView","uiViewContainer","scoreView","weaponView","ammoView","healthView","addViewContainer","playView","playerView","soldierView","bulletSystemView","worldMapView","soldierStatsByTeam","stat","resultsByTeam","teamResult","Match","matchTime","matchDuration","teamNames","leastTeamName","minCount","MAX_VALUE","teamWithLeastPlayers","sort","a","b","teamA","teamB","PlayerInput","stopMoving","turnRight","turnLeft","stopTurning","fireBullet","reload","scrollWeapons","UiInput","resume","pause","Vector2Helper","v","Polygon","computedVertices","edges","normals","setVertices","_compute","len","rotateAround","computedVertex","copy","p1","p2","e","sub","perp","normalize","xMin","yMin","xMax","yMax","vertex","fromBox","Entity","speed","rotationSpeed","_body","velocity","reverse","angularVelocity","collidable","shouldUpdate","actions","firedBullet","halfWidth","halfHeight","physics","bullets","isBullet","isPlayer","isCharacter","isSoldier","body","setAngle","cos","sin","Character","walkingSpeed","runningSpeed","_isRunning","running","damage","kill","Gun","maxMagazine","maxAmmo","fireRate","reloadTime","_reloadingTime","_firedTime","_canFire","isReloading","fired","refill","floor","_fired","mp44","thompson","Soldier","weapons","currentWeaponIndex","addWeapon","WeaponFactory","direction","deathCount","firedBy","killedByCount","suicides","fire","Player","PlayAudio","entities","entity","Block","_position","_walls","_computeBodies","bodies","Light","WorldMap","layers","types","blocksBetweenIndexes","respawns","random","indexToPosition","indexes","positionToIndex","blockAtIndex","blockAtPosition","finalString","layer","layerStrings","_parseBlock","rawBlock","blockOptions","parseLight","rawLight","rawPosition","MapParser","rawMap","rawBlocks","mapWidth","mapHeight","mapDepth","row","_createEmptyLayers","worldMap","_parseRawMap","Box","pos","VoronoiRegion","point","len2","lengthSq","dp","dot","LEFT_VORONOI_REGION","RIGHT_VORONOI_REGION","MIDDLE_VORONOI_REGION","SatResult","overlapN","overlapV","aInB","bInA","overlap","clear","POINT_POLYGON","toPolygon","SeparatingAxisTheorem","arrayPool","vectorPool","cachedSatResult","aPos","bPos","aPoints","bPoints","axis","result","rangeA","rangeB","offsetV","projectedOffset","flattenVerticesOn","option1","option2","absOverlap","abs","negate","polygon","circle","circlePos","radius2","points","edge","next","region","calculate","point2","dist","normal","distAbs","multiplyScalar","testPolygonInCircle","testPolygonInPolygon","aLen","bLen","isSeparatingAxis","differenceV","totalRadius","totalRadiusSq","distanceSq","radiusSq","sat","CollisionUtils","wallCollision","onCollision","ray","rayDistance","rayPositions","blocksBetweenPositions","polygons","floorCollision","nextEntityPosition","floorBlockIndex","fall","CollisionSystem","stopFalling","Bullet","firedByWeapon","maxDistance","traveledDistance","BulletSystem","bulletPool","firstBullet","_fireBullet","testPointInPolygon","hitByBullet","ComputerInput","PlayBuilder","createSingleplayer","addInput","addSoldier","createCpuSoldiers","cpuCount","playerInput","createPlayer","playerName","uiInput","addView","createViews","createMenu","states","gamePlaying","playOptions","createPlayState","MainMenu","addStaticView","createView","MenuState","_currentMenu","currentOptionsEdit","optionName","menuInput","subMenus","subMenuName","subMenu","addMenu","menuView","GamepadMicro","_buttonNames","_ticking","_prevTimestamps","_connectionListening","_updateCallback","_prevRawGamepadTypes","gamepadconnected","_getRawGamepads","gamepadConnected","Boolean","gamepadSupported","_gamepadSupported","gamepads","_heldButtonDelay","_heldTimestampByGamepad","onUpdate","callback","_checkForEvents","_setupPoll","offUpdate","_shouldRemoveEvents","_removePoll","window","_onGamepadConnected","_onGamepadDisconnected","removeEventListener","leftStick","rightStick","dPad","buttons","timestamp","disconnectedGamepad","splice","navigator","getGamepads","webkitGetGamepads","standardGamepads","gp","_buttonPressed","pressure","_checkForGamepadChange","rawGamepads","changed","changedRawGamepads","gamepadIndex","heldTimestamps","hasBeenHeld","_poll","currentGamepads","buttonNames","currentRawGamepad","currentGamepad","activeButtons","k","heldTimestamp","wasDown","released","held","gamepadTimestamp","browserTimestamp","axes","dPadLeft","dPadRight","dPadUp","dPadDown","_tick","tickFunc","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","webkitGamepads","Gamepad","_previousGamepadStick","_previousGamepadButton","gamepadsconnected","button","stick","ThreeRenderer","_views","webglRenderer","WebGLRenderer","setSize","setClearColor","setPixelRatio","devicePixelRatio","autoClear","getElementById","changeSize","clearDepth","render","RenderDebug","statjs","DebugStats","bottom","rendererStats","msTexts","lastTime","info","programs","calls","faces","_rendererStats","renderDebug","before","after","NullState","currentState","inputSource","handleStateChange","loop","Mainloop","setUpdate","setDraw","setBegin","preRender","setEnd","postRender"],"mappings":"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","file":"static/js/main.9138fd1a.chunk.js","sourcesContent":["export const Keys = {\n    BACKSPACE: 8,\n    CTRL: 17,\n    SPACE: 32,\n    ENTER: 13,\n    SHIFT: 16,\n    ESC: 27,\n    TAB: 9,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n};\n\nexport const SpecialKeysShift = {\n    \":\": 186,\n    \"+\": 187,\n    \"<\": 188,\n    _: 189,\n    \">\": 190,\n    \"?\": 191,\n    \"~\": 192,\n    \"{\": 219,\n    \"|\": 220,\n    \"}\": 221,\n    '\"': 222,\n};\n\nexport const SpecialKeys = {\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222,\n};\n\nexport const NumberKeys = {\n    \"0\": 48,\n    \"1\": 49,\n    \"2\": 50,\n    \"3\": 51,\n    \"4\": 52,\n    \"5\": 53,\n    \"6\": 54,\n    \"7\": 55,\n    \"8\": 56,\n    \"9\": 57,\n};\n\nexport const LetterKeys = {\n    A: 65,\n    B: 66,\n    C: 67,\n    D: 68,\n    E: 69,\n    F: 70,\n    G: 71,\n    H: 72,\n    I: 73,\n    J: 74,\n    K: 75,\n    L: 76,\n    M: 77,\n    N: 78,\n    O: 79,\n    P: 80,\n    Q: 81,\n    R: 82,\n    S: 83,\n    T: 84,\n    U: 86,\n    V: 86,\n    W: 87,\n    X: 88,\n    Y: 89,\n    Z: 90,\n};\nexport const AllKeys = {\n    ...Keys,\n    ...LetterKeys,\n    ...SpecialKeys,\n    ...NumberKeys,\n};\n","import Howler from 'howler';\nimport { FileLoader, TextureLoader } from 'three';\n\nconst _assets = {\n    atlases: new Map(),\n    textures: new Map(),\n    maps: new Map(),\n    fonts: new Map(),\n    audio: new Map()\n};\n\nconst _loadHowlerAudio = function (name, spriteJson) {\n    return new Promise((resolve, reject) => {\n        spriteJson.onload = function () {\n            return resolve();\n        };\n\n        spriteJson.onloaderror = function (soundId, err) {\n            return reject(err);\n        };\n\n        const sound = new Howler.Howl(spriteJson);\n\n        const audio = {\n            mapping: spriteJson,\n            sound: sound\n        };\n\n        _assets.audio.set(name, audio);\n    });\n};\n\nconst _loadAudioSprite = function (audioSpritePath, name) {\n    return _loadJson(audioSpritePath + name + '.json').then(function (spriteJson) {\n        // FIXME change \"urls\" to \"src\" to work with Howler 2\n        spriteJson.src = spriteJson.urls;\n\n        const fullSources = [];\n\n        for (const src of spriteJson.src) {\n            fullSources.push(audioSpritePath + src);\n        }\n\n        spriteJson.src = fullSources;\n\n        return _loadHowlerAudio(name, spriteJson);\n    });\n};\n\nconst _loadFont = function (fontsPath, name) {\n    const font = {\n        mapping: null,\n        pages: [],\n        textures: []\n    };\n\n    return _loadJson(fontsPath + name + '.json').then((fontJson) => {\n        font.mapping = fontJson;\n\n        const pageTextures = fontJson.pages.map((pageName) => {\n            font.pages.push(pageName);\n\n            return _loadTexture(pageName, fontsPath + pageName);\n        });\n\n        return Promise.all(pageTextures);\n    }).then(() => {\n        for (const page of font.pages) {\n            font.textures.push(_assets.textures.get(page));\n        }\n\n        _assets.fonts.set(name, font);\n    });\n};\n\nconst _loadTexture = function (name, url) {\n    return new Promise(function (resolve, reject) {\n        _textureLoader.load(url, function (texture) {\n            _assets.textures.set(name, texture);\n\n            return resolve();\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadXhr = function (url) {\n    return new Promise(function (resolve, reject) {\n        fileLoader.load(url, function (response) {\n            return resolve(response);\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadJson = function (url) {\n    return _loadXhr(url).then(function (response) {\n        try {\n            return JSON.parse(response);\n        } catch (err) {\n            throw err;\n        }\n    });\n};\n\nconst _loadAtlas = function (atlasesPath, name) {\n    return _loadJson(atlasesPath + name + '.json').then(function (atlas) {\n        return atlas;\n    }).then(function (atlas) {\n        _assets.atlases.set(name, atlas);\n\n        return _loadTexture(name, atlasesPath + atlas.meta.image);\n    });\n};\n\nconst _loadMap = function (mapsPath, name) {\n    return _loadJson(mapsPath + name + '.json').then(function (atlas) {\n        _assets.maps.set(name, atlas);\n    });\n};\n\nlet _textureLoader = null;\nlet fileLoader = null;\n\nconst AssetLoader = {\n    init: function (assetConfig) {\n        _textureLoader = new TextureLoader();\n        fileLoader = new FileLoader();\n\n        const assetsToLoad = [];\n        const paths = assetConfig.paths;\n\n        for (const atlasName of assetConfig.textureAtlases) {\n            assetsToLoad.push(_loadAtlas(paths.atlases + '/', atlasName));\n        }\n\n        for (const mapName of assetConfig.maps) {\n            assetsToLoad.push(_loadMap(paths.maps + '/', mapName));\n        }\n\n        for (const fontName of assetConfig.fonts) {\n            assetsToLoad.push(_loadFont(paths.fonts + '/', fontName));\n        }\n\n        for (const audioSpriteName of assetConfig.audio) {\n            assetsToLoad.push(_loadAudioSprite(paths.audio + '/', audioSpriteName));\n        }\n\n        return Promise.all(assetsToLoad);\n    },\n\n    getTexture (name) {\n        const texture = _assets.textures.get(name);\n\n        if (!texture) {\n            throw new Error('Texture does not exist: ' + name);\n        }\n\n        return texture;\n    },\n\n    cloneTexture (name) {\n        const texture = this.getTexture(name);\n        const clone = texture.clone();\n\n        clone.needsUpdate = true;\n\n        return clone;\n    },\n\n    getMap (name) {\n        const map = _assets.maps.get(name);\n\n        if (!map) {\n            throw new Error('Map does not exist: ' + name);\n        }\n\n        return map;\n    },\n\n    getAtlasMapping (name) {\n        const mapping = _assets.atlases.get(name);\n\n        if (!mapping) {\n            throw new Error('Atlas mapping does not exist: ' + name);\n        }\n\n        return mapping;\n    },\n\n    getFont (name) {\n        const font = _assets.fonts.get(name);\n\n        if (!font) {\n            throw new Error('Font does not exist: ' + name);\n        }\n\n        return font;\n    },\n\n    getAudioSprite (name) {\n        const audioSprite = _assets.audio.get(name);\n\n        if (!audioSprite) {\n            throw new Error('Audio sprite does not exist: ' + name);\n        }\n\n        return audioSprite;\n    }\n};\n\nexport default AssetLoader;\n","import { Keyboard } from \"./Keyboard\";\nimport { InputSourceInterface } from \"./InputSourceInterface\";\n\nexport class KeyboardInputSource implements InputSourceInterface {\n    public readonly keyboard: Keyboard;\n\n    constructor() {\n        this.keyboard = new Keyboard();\n\n        global.addEventListener(\n            \"keyup\",\n            (event) => {\n                this.keyboard.onKeyup(event);\n            },\n            false\n        );\n\n        global.addEventListener(\n            \"keydown\",\n            (event) => {\n                this.keyboard.onKeydown(event);\n            },\n            false\n        );\n    }\n}\n","import { Engine } from \"../engine/Engine\";\nimport { StateInput } from \"../engine/state/StateInput\";\n\nexport abstract class AbstractState {\n    protected readonly name: string;\n    protected readonly engine: Engine;\n    protected audio?: any;\n    protected inputs: Set<StateInput>;\n    public readonly views: Set<any>;\n    protected _initialized = false;\n\n    protected constructor(name: string, engine: Engine) {\n        this.name = name;\n        this.engine = engine;\n        this.inputs = new Set();\n        this.views = new Set();\n        this.audio = undefined;\n    }\n\n    public addView(view: any): void {\n        this.views.add(view);\n    }\n\n    public addInput(input: any): void {\n        this.inputs.add(input);\n    }\n\n    public abstract update(delta: number);\n\n    init() {\n        if (!this._initialized) {\n            if (this.audio) {\n                this.audio.init();\n            }\n\n            for (const view of this.views.values()) {\n                view.init();\n            }\n\n            this._initialized = true;\n        }\n    }\n\n    updateInputs(delta) {\n        for (const input of this.inputs.values()) {\n            input.update(delta);\n        }\n    }\n\n    render(delta) {\n        for (const view of this.views.values()) {\n            view.update(delta);\n        }\n    }\n\n    updateAudio(delta) {\n        if (this.audio) {\n            this.audio.update(delta);\n        }\n    }\n}\n","import { Engine } from \"../engine/Engine\";\nimport AssetManager from \"../engine/AssetManager\";\nimport path from \"path\";\n\nimport MenuBuilder from \"./menu/MenuBuilder\";\nimport { KeyboardInputSource } from \"../engine/input/KeyboardInputSource\";\nimport { GamepadInputSource } from \"../engine/input/GamepadInputSource\";\nimport { DebugThreeRenderer } from \"../engine/renderer/DebugThreeRenderer\";\n\nconst ASSET_PATH = path.resolve(__dirname, \"../../assets/\");\nconst ASSET_CONFIG = {\n    paths: {\n        maps: ASSET_PATH + \"/maps\",\n        atlases: ASSET_PATH + \"/spritesheets\",\n        fonts: ASSET_PATH + \"/fonts\",\n        audio: ASSET_PATH + \"/audiosprites\",\n    },\n    textureAtlases: [\"soldier\", \"tiles\", \"world\", \"ui\"],\n    maps: [\"level1\", \"level2\"],\n    fonts: [\"keep_calm\"],\n    audio: [\"guns\", \"background\", \"menu_effects\"],\n};\n\nexport class Game {\n    /**\n     * Load assets and start the game.\n     */\n    public async start(): Promise<void> {\n        await AssetManager.init(ASSET_CONFIG);\n\n        const engine = new Engine({\n            renderer: new DebugThreeRenderer({\n                div: \"root\",\n                width: 800,\n                height: 600,\n            }),\n            input: {\n                keyboard: new KeyboardInputSource(),\n                gamepad: new GamepadInputSource(),\n            },\n        });\n\n        const menuState = MenuBuilder.create(engine);\n\n        engine.addState(\"menu\", menuState);\n\n        engine.changeState(\"menu\");\n\n        engine.run();\n    }\n}\n","import {\n    Keys,\n    LetterKeys,\n    NumberKeys,\n    SpecialKeys,\n    SpecialKeysShift,\n} from \"./Keys\";\n\nconst keys: { [key: string]: number } = {\n    ...Keys,\n    ...NumberKeys,\n    ...LetterKeys,\n    ...SpecialKeys,\n};\n\nexport class Keyboard {\n    private readonly _previousKeyboardKeys: { [key: number]: boolean } = {};\n    private _pressed: { [key: string]: boolean } = {};\n    private shiftDown: boolean = false;\n    public lastPressed?: number;\n    private readonly charKeys: string[];\n    private readonly codes: { [key: number]: string } = {};\n    private readonly charCodes: number[] = [];\n    private readonly codesShift: { [key: number]: string } = {};\n\n    constructor() {\n        this.charKeys = Object.keys(SpecialKeys)\n            .concat(Object.keys(NumberKeys))\n            .concat(Object.keys(LetterKeys));\n\n        for (const [key, code] of Object.entries(keys)) {\n            this.codes[code] = key;\n        }\n\n        for (const charKey of this.charKeys) {\n            this.charCodes.push(keys[charKey]);\n        }\n\n        for (const shiftKey of Object.keys(SpecialKeysShift)) {\n            const code = SpecialKeysShift[shiftKey];\n\n            this.codesShift[code] = shiftKey;\n        }\n    }\n\n    keyboardDownOnce(keyCode) {\n        if (!this._previousKeyboardKeys[keyCode] && this.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = true;\n\n            return true;\n        } else if (\n            this._previousKeyboardKeys[keyCode] &&\n            !this.isDown(keyCode)\n        ) {\n            this._previousKeyboardKeys[keyCode] = false;\n        }\n\n        return false;\n    }\n\n    lastPressedIsChar() {\n        const lastPressed = this.lastPressed;\n\n        if (lastPressed && this.charCodes.indexOf(lastPressed) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    lastPressedChar() {\n        const lastPressed = this.lastPressed;\n\n        if (!lastPressed) {\n            return undefined;\n        }\n\n        if (this.shiftDown) {\n            const shiftCode = this.codesShift[lastPressed];\n\n            if (\n                shiftCode &&\n                Object.keys(SpecialKeysShift).indexOf(shiftCode) !== -1\n            ) {\n                return this.codesShift[lastPressed];\n            }\n\n            return this.codes[lastPressed].toUpperCase();\n        }\n\n        return this.codes[lastPressed].toLowerCase();\n    }\n\n    public isDown(keyCode) {\n        return this._pressed[keyCode];\n    }\n\n    public onKeydown(event) {\n        this.shiftDown = event.shiftKey;\n        this.lastPressed = event.keyCode;\n        this._pressed[event.keyCode] = true;\n    }\n\n    onKeyup(event) {\n        this._pressed[event.keyCode] = false;\n    }\n\n    keyByCode(code) {\n        return this.codes[code];\n    }\n\n    get pressedCodes() {\n        return this._pressed;\n    }\n}\n","/**\n * View that shows FPS, memory usage and render time.\n *\n * @returns {object} statsjs object\n */\nconst Stats = function () {\n    const now = (global.performance && global.performance.now) ? global.performance.now.bind(performance) : Date.now;\n\n    let startTime = now();\n    let prevTime = startTime;\n    let frames = 0;\n    let modes = [0];\n\n    const createElement = function (tag, id, css) {\n        const element = document.createElement(tag);\n\n        element.id = id;\n        element.style.cssText = css;\n\n        return element;\n    };\n\n    const createPanel = function (id, fg, bg) {\n        const div = createElement('div', id, 'padding:0 0 3px 3px;text-align:left;background:' + bg);\n\n        const text = createElement('div', id + 'Text', 'font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px;color:' + fg);\n\n        text.innerHTML = id.toUpperCase();\n        div.appendChild(text);\n\n        const graph = createElement('div', id + 'Graph', 'width:74px;height:30px;background:' + fg);\n\n        div.appendChild(graph);\n\n        for (let i = 0; i < 74; i++) {\n            graph.appendChild(createElement('span', '', 'width:1px;height:30px;float:left;opacity:0.9;background:' + bg));\n        }\n\n        return div;\n    };\n\n    const setModes = function (values) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            if (values.indexOf(i) < 0) {\n                children[i].style.display = 'none';\n            } else {\n                children[i].style.display = 'block';\n            }\n        }\n\n        modes = values;\n    };\n\n    const setMode = function (value) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            children[i].style.display = i === value ? 'block' : 'none';\n        }\n\n        modes = [value];\n    };\n\n    const updateGraph = function (dom, value) {\n        const child = dom.appendChild(dom.firstChild);\n\n        child.style.height = Math.min(30, 30 - value * 30) + 'px';\n    };\n\n    const container = createElement('div', 'stats', 'width:80px;opacity:0.9;cursor:pointer');\n\n    // FPS\n    let fps = 0;\n    let fpsMin = Number.POSITIVE_INFINITY;\n    let fpsMax = 0;\n\n    const fpsDiv = createPanel('fps', '#0ff', '#002');\n    const fpsText = fpsDiv.children[0];\n    const fpsGraph = fpsDiv.children[1];\n\n    container.appendChild(fpsDiv);\n\n    // MS\n    let ms = 0;\n    let msMin = Number.POSITIVE_INFINITY;\n    let msMax = 0;\n\n    const msDiv = createPanel('ms', '#0f0', '#020');\n    const msText = msDiv.children[0];\n    const msGraph = msDiv.children[1];\n\n    container.appendChild(msDiv);\n\n    let mem = 0;\n    let memMin = Number.POSITIVE_INFINITY;\n    let memMax = 0;\n    const memDiv = createPanel('mb', '#f08', '#201');\n    const memText = memDiv.children[0];\n    const memGraph = memDiv.children[1];\n\n    // MEM\n    if (global.performance && global.performance.memory) {\n        container.appendChild(memDiv);\n    }\n\n    setModes([modes]);\n\n    return {\n        REVISION: 14,\n        domElement: container,\n        setMode: setMode,\n        setModes: setModes,\n        begin: function () {\n            startTime = now();\n        },\n        end: function () {\n            const time = now();\n\n            ms = time - startTime;\n            msMin = Math.min(msMin, ms);\n            msMax = Math.max(msMax, ms);\n\n            msText.textContent = (ms | 0) + ' MS (' + (msMin | 0) + '-' + (msMax | 0) + ')';\n            updateGraph(msGraph, ms / 200);\n\n            frames++;\n\n            if (time > prevTime + 1000) {\n                fps = Math.round((frames * 1000) / (time - prevTime));\n                fpsMin = Math.min(fpsMin, fps);\n                fpsMax = Math.max(fpsMax, fps);\n\n                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n                updateGraph(fpsGraph, fps / 100);\n\n                prevTime = time;\n                frames = 0;\n\n                if (typeof mem !== 'undefined' && performance && performance.memory) {\n                    const heapSize = performance.memory.usedJSHeapSize;\n                    const heapSizeLimit = performance.memory.jsHeapSizeLimit;\n\n                    mem = Math.round(heapSize * 0.000000954);\n                    memMin = Math.min(memMin, mem);\n                    memMax = Math.max(memMax, mem);\n\n                    memText.textContent = mem + ' MB (' + memMin + '-' + memMax + ')';\n                    updateGraph(memGraph, heapSize / heapSizeLimit);\n                }\n            }\n\n            return time;\n        },\n\n        update: function () {\n            startTime = this.end();\n        }\n    };\n};\n\nexport default Stats;\n","import Gamepad from \"../../engine/input/Gamepad\";\nimport MenuState from \"./MenuState\";\nimport { AllKeys, Keys } from \"../../engine/input/Keys\";\nimport { StateInput } from \"../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../engine/input/InputSourceInterface\";\nimport { Keyboard } from \"../../engine/input/Keyboard\";\nimport { KeyboardInputSource } from \"../../engine/input/KeyboardInputSource\";\nimport { GamepadInputSource } from \"../../engine/input/GamepadInputSource\";\n\nclass MenuInput implements StateInput {\n    private state: MenuState;\n    private gamepad?: Gamepad;\n    private keyboard: Keyboard;\n\n    constructor(\n        inputSources: Map<string, InputSourceInterface>,\n        state: MenuState\n    ) {\n        this.state = state;\n\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n    }\n\n    update() {\n        const state = this.state;\n        const selectedItem = state.currentMenu.selectedItem;\n\n        // Do not change selection while editing\n        if (!selectedItem.isEditing) {\n            if (\n                this.keyboard.keyboardDownOnce(Keys.UP) ||\n                this.gamepad?.isStickDown(\"left\", \"up\")\n            ) {\n                state.currentMenu.moveUp();\n            } else if (\n                this.keyboard.keyboardDownOnce(Keys.DOWN) ||\n                this.gamepad?.isStickDown(\"left\", \"down\")\n            ) {\n                state.currentMenu.moveDown();\n            }\n        }\n\n        if (selectedItem.editable && selectedItem.isEditing) {\n            if (this.keyboard.keyboardDownOnce(Keys.BACKSPACE)) {\n                selectedItem.value = selectedItem.value.slice(0, -1);\n            } else if (this.keyboard.lastPressedIsChar()) {\n                if (\n                    this.keyboard.keyboardDownOnce(\n                        AllKeys[\n                            this.keyboard.keyByCode(this.keyboard.lastPressed)\n                        ]\n                    )\n                ) {\n                    selectedItem.value += this.keyboard.lastPressedChar();\n                }\n            }\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(Keys.ENTER) ||\n            this.keyboard.keyboardDownOnce(Keys.SPACE) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionSouth\")\n        ) {\n            state.currentMenu.selectCurrentItem();\n        }\n    }\n}\n\nexport default MenuInput;\n","import { Camera, OrthographicCamera, PerspectiveCamera, Scene } from \"three\";\nimport { RenderViewInterface } from \"./RenderViewInterface\";\nimport { Dimension } from \"../../math/Dimension\";\n\nexport abstract class ThreeRenderView implements RenderViewInterface {\n    public width: number;\n    public height: number;\n    protected _initialized: boolean;\n    public clearColor: number;\n    public viewContainers: Map<any, any>;\n    public currentViewContainerName?: string;\n    public _currentViewContainer?: any;\n    private _scene?: Scene;\n\n    protected constructor() {\n        this.width = 0;\n        this.height = 0;\n\n        this._initialized = false;\n        this.clearColor = 0x000000;\n        this.viewContainers = new Map();\n        this.currentViewContainer = null;\n    }\n\n    public abstract getCamera():\n        | Camera\n        | OrthographicCamera\n        | PerspectiveCamera;\n\n    init() {\n        this._scene = new Scene();\n\n        for (let [name, viewContainer] of this.viewContainers.entries()) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this._scene.add(viewContainer.mesh);\n\n            if (name === this.currentViewContainerName) {\n                viewContainer.visible = true;\n                this._currentViewContainer = viewContainer;\n            } else {\n                viewContainer.visible = false;\n            }\n        }\n    }\n\n    get scene(): Scene {\n        const scene = this._scene;\n\n        if (!scene) {\n            throw new Error(\"Scene is undefined\");\n        }\n\n        return scene;\n    }\n\n    update(delta) {\n        if (this._currentViewContainer) {\n            this._currentViewContainer.update(delta);\n        } else {\n            console.warn(\"no current ViewContainer\");\n        }\n    }\n\n    changeSize(size: Dimension): void {\n        this.width = size.width;\n        this.height = size.height;\n\n        this.init();\n    }\n\n    set currentViewContainer(name) {\n        const newViewContainer = this.viewContainers.get(name);\n\n        if (this._initialized) {\n            if (this._currentViewContainer) {\n                this._currentViewContainer.visible = false;\n            }\n\n            newViewContainer.visible = true;\n        }\n\n        this.currentViewContainerName = name;\n        this._currentViewContainer = newViewContainer;\n    }\n\n    get currentViewContainer() {\n        return this._currentViewContainer;\n    }\n\n    addViewContainer(name, viewContainer) {\n        if (this._initialized) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n        }\n        this.viewContainers.set(name, viewContainer);\n    }\n}\n","import { Camera, OrthographicCamera, PerspectiveCamera } from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\nimport MenuState from \"../MenuState\";\n\nexport class MenuRenderView extends ThreeRenderView {\n    public camera?: OrthographicCamera = undefined;\n    private state: MenuState;\n    private menu: any;\n\n    constructor(state: MenuState) {\n        super();\n\n        this.state = state;\n        this.menu = state.menus;\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new OrthographicCamera(\n            0,\n            this.width,\n            this.height,\n            0,\n            0,\n            1\n        );\n\n        this._initialized = true;\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.currentViewContainerName !== this.state.currentMenuName) {\n            this.currentViewContainer = this.state.currentMenuName;\n        }\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as OrthographicCamera;\n    }\n}\n","import AssetManager from \"../engine/AssetManager\";\n\nexport class StateAudio {\n    protected effectsSpriteName?: string;\n    protected backgroundSpriteName?: string;\n    protected effects?: any;\n    protected backgrounds?: any;\n    protected _initialized: boolean;\n\n    constructor(effectsSpriteName?: string, backgroundSpriteName?: string) {\n        this.effectsSpriteName = effectsSpriteName;\n        this.backgroundSpriteName = backgroundSpriteName;\n\n        this.effects = null;\n        this.backgrounds = null;\n\n        this._initialized = false;\n    }\n\n    init() {\n        if (this.effectsSpriteName) {\n            this.effects = AssetManager.getAudioSprite(\n                this.effectsSpriteName\n            ).sound;\n        }\n\n        if (this.backgroundSpriteName) {\n            this.backgrounds = AssetManager.getAudioSprite(\n                this.backgroundSpriteName\n            ).sound;\n        }\n\n        this._initialized = true;\n    }\n\n    stopEffects() {\n        if (this.effects) {\n            this.effects.stop();\n        }\n    }\n\n    stopBackground() {\n        if (this.backgrounds) {\n            this.backgrounds.stop();\n        }\n    }\n}\n","import { StateAudio } from \"../StateAudio\";\nimport MenuState from \"./MenuState\";\n\nclass MenuAudio extends StateAudio {\n    private selectedItem: any;\n    private state: MenuState;\n\n    constructor(\n        state: MenuState,\n        effectsSpriteName: string,\n        backgroundSpriteName: string\n    ) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.state = state;\n        this.selectedItem = state.currentMenu.selectedItem;\n    }\n\n    update(delta) {\n        // Selected item changed\n        if (this.selectedItem !== this.state.currentMenu.selectedItem) {\n            this.selectedItem = this.state.currentMenu.selectedItem;\n            this.effects.play(\"select\");\n        }\n    }\n}\n\nexport default MenuAudio;\n","class Menu {\n    constructor () {\n        this.menuItems = new Map();\n        this.menuItemKeys = [];\n        this.selectedItemIndex = 0;\n        this.freeze = false;\n    }\n\n    addMenuItem (menuItem) {\n        this.menuItemKeys.push(menuItem.name);\n        this.menuItems.set(menuItem.name, menuItem);\n    }\n\n    get selectedItem () {\n        return this.menuItems.get(this.menuItemKeys[this.selectedItemIndex]);\n    }\n\n    moveUp () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex > 0) {\n                this.selectedItemIndex -= 1;\n            } else {\n                this.selectedItemIndex = 0;\n            }\n        }\n    }\n\n    moveDown () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex < this.menuItemKeys.length - 1) {\n                this.selectedItemIndex += 1;\n            } else {\n                this.selectedItemIndex = this.menuItemKeys.length - 1;\n            }\n        }\n    }\n\n    selectCurrentItem () {\n        this.selectedItem.action();\n    }\n}\n\nexport default Menu;\n","class MenuItem {\n    constructor (name, text, onAction = null) {\n        this.name = name;\n        this.text = text;\n        this.onAction = onAction;\n        this.editable = false;\n    }\n\n    action () {\n        if (this.onAction) {\n            this.onAction(this);\n        }\n    }\n}\n\nexport default MenuItem;\n","import MenuItem from './MenuItem';\n\nclass MenuInputItem extends MenuItem {\n    constructor (name, label, defaultValue, onAction) {\n        super(name, label + ': ' + defaultValue, onAction);\n\n        this.label = label;\n        this.defaultValue = defaultValue;\n        this.isEditing = false;\n        this._value = defaultValue;\n        this.editable = true;\n    }\n\n    action () {\n        this.isEditing = !this.isEditing;\n\n        if (!this.isEditing && this.onAction) {\n            this.onAction(this._value);\n        }\n    }\n\n    set value (value) {\n        this._value = value;\n        this.text = this.label + ': ' + value;\n    }\n\n    get value () {\n        return this._value;\n    }\n}\n\nexport default MenuInputItem;\n","import { RepeatWrapping, Vector2 } from 'three';\nimport AssetManager from '../AssetManager';\n\nclass TextureAtlas {\n    constructor (name, clone, filter = {}) {\n        this.mapping = AssetManager.getAtlasMapping(name);\n\n        if (!this.mapping) {\n            throw new Error('TextureAtlas does not exists', name);\n        }\n\n        if (clone) {\n            this.texture = AssetManager.cloneTexture(name);\n        } else {\n            this.texture = AssetManager.getTexture(name);\n        }\n\n        this.texture.wrapS = RepeatWrapping;\n        this.texture.wrapT = RepeatWrapping;\n\n        this.width = this.mapping.meta.size.w;\n        this.height = this.mapping.meta.size.h;\n\n        this.frames = new Map();\n\n        for (const frame of this.mapping.frames) {\n            const d = frame.frame;\n\n            // Origin image is y-inverted compared to what THREE wants\n            const bounds = [\n                new Vector2(d.x / this.width, (this.height - (d.y)) / this.height), // lower left\n                new Vector2(d.x / this.width, (this.height - (d.y + d.h)) / this.height), // upper left\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y + d.h)) / this.height), // upper right\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y)) / this.height) // lower right\n            ];\n\n            this.frames.set(frame.filename, {\n                bounds: bounds,\n                frame: frame,\n                framePosition: {\n                    x: d.x,\n                    y: d.y\n                },\n                frameSize: {\n                    width: d.w,\n                    height: d.h\n                }\n            });\n        }\n    }\n\n    getFrameOffset (name) {\n        const d = this.frames.get(name + '.png').framePosition;\n\n        return new Vector2(d.x / this.width, (this.height - d.y) / this.height);\n    }\n\n    getFrameSize (name) {\n        return this.frames.get(name + '.png').frameSize;\n    }\n\n    getBounds (name) {\n        return this.frames.get(name + '.png').bounds;\n    }\n}\n\nexport default TextureAtlas;\n","import TextureAtlas from './TextureAtlas';\nconst _atlases = new Map();\n\nexport class TextureManager {\n    static getAtlas (name, clone) {\n        if (clone) {\n            return new TextureAtlas(name, clone);\n        }\n\n        let atlas = _atlases.get(name);\n\n        if (!atlas) {\n            atlas = new TextureAtlas(name);\n\n            _atlases.set(name, atlas);\n        }\n\n        return atlas;\n    }\n}\n","import { Vector2 } from 'three';\n\nexport class TextureFrame {\n    constructor (textureAtlas, geometry, initialFrame, fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n        this.fixed = fixed;\n\n        if (initialFrame) {\n            this.frame = initialFrame;\n\n            if (fixed) {\n                const size = this.textureAtlas.getFrameSize(initialFrame);\n\n                this._changeSize(size.width, size.height);\n            }\n        }\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _changeSize (width, height) {\n        this.width = width;\n        this.height = height;\n        const aw = this.textureAtlas.width;\n        const ah = this.textureAtlas.height;\n\n        if (this.geometry) {\n            // TODO make this more efficient (no new instances necessary)\n            const bounds = [\n                new Vector2(0, ah / ah), // lower left\n                new Vector2(0, (ah - height) / ah), // upper left\n                new Vector2(width / aw, (ah - height) / ah), // upper right\n                new Vector2(width / aw, ah / ah) // lower right\n            ];\n\n            // If a geometry is merged, for example multiple planes\n            for (let i = 1; i < this.geometry.faceVertexUvs[0].length; i += 2) {\n                this.geometry.faceVertexUvs[0][i - 1] = [bounds[0], bounds[1], bounds[3]];\n                this.geometry.faceVertexUvs[0][i] = [bounds[1], bounds[2], bounds[3]];\n            }\n\n            this.geometry.uvsNeedUpdate = true;\n        }\n    }\n\n    set frame (frameName) {\n        const offset = this.textureAtlas.getFrameOffset(frameName);\n        const size = this.textureAtlas.getFrameSize(frameName);\n\n        // Size changed\n        if (!this.fixed) {\n            if (size.width !== this.width || size.height !== this.height) {\n                this._changeSize(size.width, size.height);\n            }\n        }\n\n        this.texture.offset = offset;\n    }\n}\n","export class View {\n    constructor () {\n        this.mesh = null;\n        this.initialPosition = null;\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.initialPosition) {\n            if (!this.mesh) {\n                throw new Error('No mesh initialized!');\n            }\n\n            this.mesh.position.x = this.initialPosition.x;\n            this.mesh.position.y = this.initialPosition.y;\n            this.mesh.position.z = this.initialPosition.z;\n        }\n\n        this._initialized = true;\n    }\n\n    get position () {\n        return this.mesh.position;\n    }\n\n    set position ({ x, y, z }) {\n        if (this.mesh && this.initialized) {\n            if (x) {\n                this.mesh.position.x = x;\n            }\n\n            if (y) {\n                this.mesh.position.y = y;\n            }\n\n            if (z) {\n                this.mesh.position.z = z;\n            }\n        } else {\n            this.initialPosition = {\n                x: x,\n                y: y,\n                z: z\n            };\n        }\n    }\n}\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from './TextureManager';\nimport {TextureFrame} from './TextureFrame';\nimport {View} from './View';\n\nclass BackgroundView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n        this._width = null;\n        this._height = null;\n        this._lightness = 1;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const size = textureAtlas.getFrameSize(this.textureName);\n\n        this._width = size.width;\n        this._height = size.height;\n\n        this.geometry = new PlaneGeometry(size.width, size.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n\n        this.material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        const hsl = this.material.color.getHSL();\n\n        this.material.color.setHSL(hsl.h, hsl.s, this._lightness);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set lightness (lightness) {\n        if (this._initalized) {\n            const hsl = this.material.color.getHSL();\n\n            this.material.color.setHSL(hsl.h, hsl.s, lightness);\n        }\n\n        this._lightness = lightness;\n    }\n\n    get lightness () {\n        return this._lightness;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this.mesh.scale.x = scale;\n        this.mesh.position.x = width / 2;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this.mesh.scale.y = scale;\n        this.mesh.position.y = height / 2;\n    }\n}\n\nexport default BackgroundView;\n","import { Object3D } from 'three';\n\nclass ViewContainer {\n    constructor () {\n        this.staticViews = new Set();\n        this.dynamicViews = new Set();\n        this._backgroundView = null;\n        this._width = 800;\n        this._height = 600;\n\n        this._initialized = false;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        if (this._backgroundView) {\n            this._backgroundView.init();\n            this._backgroundView.width = this._width;\n            this._backgroundView.height = this._height;\n            this._backgroundView.mesh.renderOrder = -1;\n            this.mesh.add(this._backgroundView.mesh);\n        }\n\n        for (const staticView of this.staticViews) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        for (const view of this.dynamicViews) {\n            view.init();\n            this.mesh.add(view.mesh);\n        }\n\n        this._initialized = true;\n    }\n\n    set backgroundView (backgroundView) {\n        if (backgroundView !== this._backgroundView) {\n            if (this._initialized) {\n                this._backgroundView.init();\n                this._backgroundView.width = this._width;\n                this._backgroundView.height = this._height;\n                this._backgroundView.mesh.renderOrder = -1;\n                this.mesh.remove(this._backgroundView);\n            }\n\n            this._backgroundView = backgroundView;\n        } else {\n            console.warn('backgroundView is the same');\n        }\n    }\n\n    update (delta) {\n        if (!this._initialized) {\n            throw new Error('View not initialized.');\n        }\n\n        for (const view of this.dynamicViews) {\n            view.update(delta);\n        }\n    }\n\n    addStaticView (staticView, position) {\n        if (this._initialized) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        if (position) {\n            staticView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.staticViews.add(staticView);\n    }\n\n    addDynamicView (dynamicView, position) {\n        if (this._initialized) {\n            dynamicView.init();\n            this.mesh.add(dynamicView.mesh);\n        }\n\n        if (position) {\n            dynamicView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.dynamicViews.add(dynamicView);\n    }\n\n    set visible (visible) {\n        this.mesh.visible = visible;\n    }\n\n    get visible () {\n        return this.mesh.visible;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this._width = width;\n\n        if (this._backgroundView) {\n            this._backgroundView.width = this._width;\n        }\n\n        this.mesh.scale.x = scale;\n        this.mesh.updateMatrix();\n        this.mesh.updateMatrixWorld(true)\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this._height = height;\n\n        if (this._backgroundView) {\n            this._backgroundView.height = this._height;\n        }\n\n        this.mesh.scale.y = scale;\n        this.mesh.updateMatrix();\n        this.mesh.updateMatrixWorld(true)\n    }\n}\n\nexport default ViewContainer;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {View} from \"../../../engine/graphics/View\";\n\nclass LogoView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const logoSize = textureAtlas.getFrameSize(this.textureName);\n\n        this.geometry = new PlaneGeometry(logoSize.width, logoSize.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n        const material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n}\n\nexport default LogoView;\n","const itemSize = 2;\nconst box = {min: [0, 0], max: [0, 0]};\n\nfunction bounds (positions) {\n  const count = positions.length / itemSize;\n\n  box.min[0] = positions[0]\n  box.min[1] = positions[1]\n  box.max[0] = positions[0]\n  box.max[1] = positions[1]\n\n  for (let i = 0; i < count; i++) {\n    const x = positions[i * itemSize];\n    const y = positions[i * itemSize + 1];\n\n    box.min[0] = Math.min(x, box.min[0])\n    box.min[1] = Math.min(y, box.min[1])\n    box.max[0] = Math.max(x, box.max[0])\n    box.max[1] = Math.max(y, box.max[1])\n  }\n}\n\nexport function computeBox (positions, output) {\n  bounds(positions)\n  output.min.set(box.min[0], box.min[1], 0)\n  output.max.set(box.max[0], box.max[1], 0)\n}\n\nexport function computeSphere (positions, output) {\n  bounds(positions)\n\n  const minX = box.min[0];\n  const minY = box.min[1];\n  const maxX = box.max[0];\n  const maxY = box.max[1];\n  const width = maxX - minX;\n  const height = maxY - minY;\n  const length = Math.sqrt(width * width + height * height);\n\n  output.center.set(minX + width / 2, minY + height / 2, 0)\n  output.radius = length / 2\n}\n","import * as wordWrap from 'word-wrapper';\nimport * as xtend from 'xtend';\nimport * as number from 'as-number';\n\nconst X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z'];\nconst M_WIDTHS = ['m', 'w'];\nconst CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n\nconst TAB_ID = '\\t'.charCodeAt(0);\nconst SPACE_ID = ' '.charCodeAt(0);\nconst ALIGN_LEFT = 0,\n    ALIGN_CENTER = 1,\n    ALIGN_RIGHT = 2;\n\nexport function createLayout(opt) {\n    return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n    this.glyphs = []\n    this._measure = this.computeMetrics.bind(this)\n    this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n    opt = xtend({\n        measure: this._measure\n    }, opt)\n    this._opt = opt\n    this._opt.tabSize = number(this._opt.tabSize, 4)\n\n    if (!opt.font)\n        throw new Error('must provide a valid bitmap font')\n\n    const glyphs = this.glyphs;\n    const text = opt.text || '';\n    const font = opt.font;\n    this._setupSpaceGlyphs(font)\n\n    const lines = wordWrap.lines(text, opt);\n    const minWidth = opt.width || 0;\n\n    //clear glyphs\n    glyphs.length = 0\n\n    //get max line width\n    const maxLineWidth = lines.reduce(function (prev, line) {\n        return Math.max(prev, line.width, minWidth)\n    }, 0);\n\n    //the pen position\n    let x = 0;\n    let y = 0;\n    const lineHeight = number(opt.lineHeight, font.common.lineHeight);\n    const baseline = font.common.base;\n    const descender = lineHeight - baseline;\n    const letterSpacing = opt.letterSpacing || 0;\n    const height = lineHeight * lines.length - descender;\n    const align = getAlignType(this._opt.align);\n\n    //draw text along baseline\n    y -= height\n\n    //the metrics for this text layout\n    this._width = maxLineWidth\n    this._height = height\n    this._descender = lineHeight - baseline\n    this._baseline = baseline\n    this._xHeight = getXHeight(font)\n    this._capHeight = getCapHeight(font)\n    this._lineHeight = lineHeight\n    this._ascender = lineHeight - descender - this._xHeight\n\n    //layout each glyph\n    const self = this;\n    lines.forEach(function(line, lineIndex) {\n        const start = line.start;\n        const end = line.end;\n        const lineWidth = line.width;\n        let lastGlyph;\n\n        //for each glyph in that line...\n        for (let i=start; i<end; i++) {\n            const id = text.charCodeAt(i);\n            const glyph = self.getGlyph(font, id);\n            if (glyph) {\n                if (lastGlyph)\n                    x += getKerning(font, lastGlyph.id, glyph.id)\n\n                let tx = x;\n                if (align === ALIGN_CENTER)\n                    tx += (maxLineWidth-lineWidth)/2\n                else if (align === ALIGN_RIGHT)\n                    tx += (maxLineWidth-lineWidth)\n\n                glyphs.push({\n                    position: [tx, y],\n                    data: glyph,\n                    index: i,\n                    line: lineIndex\n                })\n\n                //move pen forward\n                x += glyph.xadvance + letterSpacing\n                lastGlyph = glyph\n            }\n        }\n\n        //next line down\n        y += lineHeight\n        x = 0\n    })\n    this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n    //These are fallbacks, when the font doesn't include\n    //' ' or '\\t' glyphs\n    this._fallbackSpaceGlyph = null\n    this._fallbackTabGlyph = null\n\n    if (!font.chars || font.chars.length === 0)\n        return\n\n    //try to get space glyph\n    //then fall back to the 'm' or 'w' glyphs\n    //then fall back to the first glyph available\n    const space = getGlyphById(font, SPACE_ID)\n        || getMGlyph(font)\n        || font.chars[0];\n\n    //and create a fallback for tab\n    const tabWidth = this._opt.tabSize * space.xadvance;\n    this._fallbackSpaceGlyph = space\n    this._fallbackTabGlyph = xtend(space, {\n        x: 0, y: 0, xadvance: tabWidth, id: TAB_ID,\n        xoffset: 0, yoffset: 0, width: 0, height: 0\n    })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n    const glyph = getGlyphById(font, id);\n    if (glyph)\n        return glyph\n    else if (id === TAB_ID)\n        return this._fallbackTabGlyph\n    else if (id === SPACE_ID)\n        return this._fallbackSpaceGlyph\n    return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n    const letterSpacing = this._opt.letterSpacing || 0;\n    const font = this._opt.font;\n    let curPen = 0;\n    let curWidth = 0;\n    let count = 0;\n    var glyph\n    let lastGlyph;\n\n    if (!font.chars || font.chars.length === 0) {\n        return {\n            start: start,\n            end: start,\n            width: 0\n        }\n    }\n\n    end = Math.min(text.length, end)\n    for (let i=start; i < end; i++) {\n        const id = text.charCodeAt(i);\n        var glyph = this.getGlyph(font, id)\n\n        if (glyph) {\n            //move pen forward\n            const xoff = glyph.xoffset;\n            const kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0;\n            curPen += kern\n\n            const nextPen = curPen + glyph.xadvance + letterSpacing;\n            const nextWidth = curPen + glyph.width;\n\n            //we've hit our limit; we can't move onto the next glyph\n            if (nextWidth >= width || nextPen >= width)\n                break\n\n            //otherwise continue along our line\n            curPen = nextPen\n            curWidth = nextWidth\n            lastGlyph = glyph\n        }\n        count++\n    }\n\n    //make sure rightmost edge lines up with rendered glyphs\n    if (lastGlyph)\n        curWidth += lastGlyph.xoffset\n\n    return {\n        start: start,\n        end: start + count,\n        width: curWidth\n    }\n}\n\n//getters for the private vars\n;['width', 'height',\n    'descender', 'ascender',\n    'xHeight', 'baseline',\n    'capHeight',\n    'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n    Object.defineProperty(TextLayout.prototype, name, {\n        get: wrapper(name),\n        configurable: true\n    })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n    return (new Function([\n        'return function '+name+'() {',\n        '  return this._'+name,\n        '}'\n    ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n    if (!font.chars || font.chars.length === 0)\n        return null\n\n    const glyphIdx = findChar(font.chars, id);\n    if (glyphIdx >= 0)\n        return font.chars[glyphIdx]\n    return null\n}\n\nfunction getXHeight(font) {\n    for (let i=0; i<X_HEIGHTS.length; i++) {\n        const id = X_HEIGHTS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getMGlyph(font) {\n    for (let i=0; i<M_WIDTHS.length; i++) {\n        const id = M_WIDTHS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx]\n    }\n    return 0\n}\n\nfunction getCapHeight(font) {\n    for (let i=0; i<CAP_HEIGHTS.length; i++) {\n        const id = CAP_HEIGHTS[i].charCodeAt(0);\n        const idx = findChar(font.chars, id);\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getKerning(font, left, right) {\n    if (!font.kernings || font.kernings.length === 0)\n        return 0\n\n    const table = font.kernings;\n    for (let i=0; i<table.length; i++) {\n        const kern = table[i];\n        if (kern.first === left && kern.second === right)\n            return kern.amount\n    }\n    return 0\n}\n\nfunction getAlignType(align) {\n    if (align === 'center')\n        return ALIGN_CENTER\n    else if (align === 'right')\n        return ALIGN_RIGHT\n    return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n    start = start || 0\n    for (let i = start; i < array.length; i++) {\n        if (array[i].id === value) {\n            return i\n        }\n    }\n    return -1\n}\n","import { BufferGeometry, Box3, BufferAttribute, Sphere } from 'three';\nimport * as createIndices from 'quad-indices';\nimport * as vertices from './lib/vertices'\nimport * as utils from './lib/utils'\n\nimport {createLayout} from \"./lib/layout-bmfont-text\";\n\nexport class TextGeometry extends BufferGeometry {\n  constructor(opt) {\n    super();\n\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use these as default values for any subsequent\n    // calls to update()\n    this._opt = Object.assign({}, opt)\n\n    // also do an initial setup...\n    if (opt) this.update(opt)\n  }\n\n  update(opt) {\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use constructor defaults\n    opt = Object.assign({}, this._opt, opt)\n\n    if (!opt.font) {\n      throw new TypeError('must specify a { font } in options')\n    }\n\n    this.layout = createLayout(opt)\n\n    // get vec2 texcoords\n    const flipY = opt.flipY !== false;\n\n    // the desired BMFont data\n    const font = opt.font;\n\n    // determine texture size from font file\n    const texWidth = font.common.scaleW;\n    const texHeight = font.common.scaleH;\n\n    // get visible glyphs\n    const glyphs = this.layout.glyphs.filter(function (glyph) {\n      const bitmap = glyph.data;\n      return bitmap.width * bitmap.height > 0\n    });\n\n    // provide visible glyphs for convenience\n    this.visibleGlyphs = glyphs\n\n    // get common vertex data\n    const positions = vertices.positions(glyphs);\n    const uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY);\n    const indices = createIndices([], {\n      clockwise: true,\n      type: 'uint16',\n      count: glyphs.length\n    });\n\n    // update vertex data\n    this.setIndex(indices)\n    this.addAttribute('position', new BufferAttribute(positions, 2))\n    this.addAttribute('uv', new BufferAttribute(uvs, 2))\n\n    // update multipage data\n    if (!opt.multipage && 'page' in this.attributes) {\n      // disable multipage rendering\n      this.removeAttribute('page')\n    } else if (opt.multipage) {\n      // enable multipage rendering\n      const pages = vertices.pages(glyphs);\n      this.addAttribute('page', new BufferAttribute(pages, 1))\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere()\n    }\n\n    const positions = this.attributes.position.array;\n    const itemSize = this.attributes.position.itemSize;\n    if (!positions || !itemSize || positions.length < 2) {\n      this.boundingSphere.radius = 0\n      this.boundingSphere.center.set(0, 0, 0)\n      return\n    }\n    utils.computeSphere(positions, this.boundingSphere)\n    if (isNaN(this.boundingSphere.radius)) {\n      console.error('BufferGeometry.computeBoundingSphere(): ' +\n          'Computed radius is NaN. The ' +\n          '\"position\" attribute is likely to have NaN values.')\n    }\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3()\n    }\n\n    const bbox = this.boundingBox;\n    const positions = this.attributes.position.array;\n    const itemSize = this.attributes.position.itemSize;\n    if (!positions || !itemSize || positions.length < 2) {\n      bbox.makeEmpty()\n      return\n    }\n    utils.computeBox(positions, bbox)\n  }\n}\n","export function pages (glyphs) {\n  const pages = new Float32Array(glyphs.length * 4);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const id = glyph.data.page || 0;\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n  })\n  return pages\n}\n\nexport function uvs (glyphs, texWidth, texHeight, flipY) {\n  const uvs = new Float32Array(glyphs.length * 4 * 2);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const bitmap = glyph.data;\n    const bw = (bitmap.x + bitmap.width);\n    const bh = (bitmap.y + bitmap.height);\n\n    // top left position\n    const u0 = bitmap.x / texWidth;\n    let v1 = bitmap.y / texHeight;\n    const u1 = bw / texWidth;\n    let v0 = bh / texHeight;\n\n    if (flipY) {\n      v1 = (texHeight - bitmap.y) / texHeight\n      v0 = (texHeight - bh) / texHeight\n    }\n\n    // BL\n    uvs[i++] = u0\n    uvs[i++] = v1\n    // TL\n    uvs[i++] = u0\n    uvs[i++] = v0\n    // TR\n    uvs[i++] = u1\n    uvs[i++] = v0\n    // BR\n    uvs[i++] = u1\n    uvs[i++] = v1\n  })\n  return uvs\n}\n\nexport function positions (glyphs) {\n  const positions = new Float32Array(glyphs.length * 4 * 2);\n  let i = 0;\n  glyphs.forEach(function (glyph) {\n    const bitmap = glyph.data;\n\n    // bottom left position\n    const x = glyph.position[0] + bitmap.xoffset;\n    const y = glyph.position[1] + bitmap.yoffset;\n\n    // quad size\n    const w = bitmap.width;\n    const h = bitmap.height;\n\n    // BL\n    positions[i++] = x\n    positions[i++] = y\n    // TL\n    positions[i++] = x\n    positions[i++] = y + h\n    // TR\n    positions[i++] = x + w\n    positions[i++] = y + h\n    // BR\n    positions[i++] = x + w\n    positions[i++] = y\n  })\n  return positions\n}\n","import AssetManager from '../AssetManager';\nimport { Mesh, MeshBasicMaterial } from 'three';\nimport { TextGeometry } from '../three-bmfont-text/index';\nimport {View} from \"./View\";\n\nexport class TextView extends View {\n    constructor (text, options = {}) {\n        super();\n\n        const fontName = options.font || 'keep_calm';\n\n        this._text = text;\n        this.font = AssetManager.getFont(fontName);\n        this.width = options.width || 100;\n        this.align = options.aligh || 'left';\n        this._color = options.color || 0xff0000;\n    }\n\n    init () {\n        this.geometry = new TextGeometry({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping,\n            multipage: true\n        });\n\n        this.material = new MeshBasicMaterial({\n            map: this.font.textures[0],\n            transparent: true,\n            color: this._color\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.rotation.y = 180 * (Math.PI / 180);\n        this.mesh.rotation.z = 180 * (Math.PI / 180);\n\n        super.init();\n    }\n\n    get color () {\n        return this._color;\n    }\n\n    set color (color) {\n        this.material.color.setHex(color);\n    }\n\n    get text () {\n        return this._text;\n    }\n\n    get height () {\n        return this.geometry.layout.height;\n    }\n\n    _updateGeometry () {\n        this.geometry.update({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping\n        });\n\n        this.geometry.uvsNeedUpdate = true;\n    }\n\n    set text (text) {\n        text = text.toString();\n\n        // Check if text is not the same\n        if (text !== this._text) {\n            this._text = text;\n            this._updateGeometry();\n        }\n    }\n}\n","import { Object3D } from 'three';\nimport LogoView from './LogoView';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass MenuItemsView extends View {\n    constructor (menu, options = {\n        selectedTextColor: 0x00ff00,\n        textColor: 0xffdddd\n    }) {\n        super();\n\n        this.menu = menu;\n        this.options = options;\n        this.viewMenuItemPairs = new Map();\n        this.selectedItem = null;\n        this.selectedView = null;\n        this.logoView = new LogoView('logo', 'ui');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const distance = 100;\n        const startY = 200;\n        let itemCount = 0;\n\n        this.selectedItem = this.menu.selectedItem;\n\n        for (const menuItem of this.menu.menuItems.values()) {\n            const textView = new TextView(menuItem.text, {\n                width: 300\n            });\n\n            textView.init();\n            textView.mesh.position.y = startY - (distance * itemCount);\n            textView.mesh.position.x += 100;\n\n            if (this.selectedItem === menuItem) {\n                textView.color = this.options.selectedTextColor;\n            } else {\n                textView.color = this.options.textColor;\n            }\n\n            this.viewMenuItemPairs.set(menuItem, textView);\n\n            this.mesh.add(textView.mesh);\n            itemCount += 1;\n        }\n\n        super.init();\n    }\n\n    update () {\n        // Selected item changed\n        if (this.selectedItem !== this.menu.selectedItem) {\n            const previousItem = this.selectedItem;\n\n            this.selectedItem = this.menu.selectedItem;\n\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n            const previousView = this.viewMenuItemPairs.get(previousItem);\n\n            currentView.text = this.selectedItem.text;\n\n            previousView.color = this.options.textColor;\n            currentView.color = this.options.selectedTextColor;\n        }\n\n        if (this.menu.selectedItem.editable && this.menu.selectedItem.isEditing) {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text + '-';\n        } else {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text;\n        }\n    }\n}\n\nexport default MenuItemsView;\n\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport MenuInputItem from '../../../engine/menu-system/MenuInputItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst OptionsMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuInputItem('name', 'Name', 'Unknown Soldier', function (value) {\n            menuState.changeOption('name', value);\n        }));\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default OptionsMenu;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst HelpMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default HelpMenu;\n","import { AbstractState } from \"../AbstractState\";\nimport { Soldier } from \"../../core/entities/Soldier\";\nimport CollisionSystem from \"../../core/CollisionSystem\";\nimport { BulletSystem } from \"../../core/BulletSystem\";\nimport { Player } from \"../../core/entities/Player\";\n\n/**\n * State of playing the game.\n */\nexport class PlayState extends AbstractState {\n    private collisionSystem?: CollisionSystem;\n    private bulletSystem?: BulletSystem;\n    public player?: Player;\n    public map: any;\n    public match: any;\n    public showScores: boolean = false;\n    public paused: boolean = false;\n    private onPause?: () => any;\n\n    constructor(engine, match, map) {\n        super(\"play\", engine);\n\n        this.map = map;\n        this.match = match;\n    }\n\n    init() {\n        super.init();\n    }\n\n    get soldiers(): Set<Soldier> {\n        return this.match.soldiers;\n    }\n\n    pause() {\n        if (this.onPause) {\n            this.onPause();\n        }\n\n        this.paused = true;\n    }\n\n    resume() {\n        this.paused = false;\n    }\n\n    /**\n     * Update the state. Logic and views are updated.\n     *\n     * @param {float} delta - delta time.\n     *\n     * @returns {void}\n     */\n    update(delta) {\n        super.updateInputs(delta);\n\n        if (this.paused) {\n            return;\n        }\n\n        super.updateAudio(delta);\n\n        // Relies on previous turn\n        if (this.bulletSystem) {\n            this.bulletSystem.update(delta);\n        }\n\n        for (const soldier of this.soldiers) {\n            soldier.update(delta);\n\n            if (soldier.dead) {\n                const position = this.map.randomRespawnPosition();\n\n                soldier.respawn(position);\n            }\n        }\n\n        this.match.update(delta);\n\n        if (this.collisionSystem) {\n            this.collisionSystem.update(delta);\n        }\n    }\n}\n","import { Camera, OrthographicCamera, PerspectiveCamera } from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { PlayState } from \"../PlayState\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\n\nexport class StatsRenderView extends ThreeRenderView {\n    private camera?: OrthographicCamera = undefined;\n    private state: PlayState;\n\n    constructor(state: PlayState) {\n        super();\n\n        this.state = state;\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new OrthographicCamera(\n            0,\n            this.width,\n            this.height,\n            0,\n            0,\n            1\n        );\n\n        this._initialized = true;\n    }\n\n    update(delta) {\n        super.update(delta);\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as OrthographicCamera;\n    }\n}\n","import { Mesh, MeshBasicMaterial, Object3D, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass AmmoView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('ui', false);\n\n        const material = new MeshBasicMaterial({\n            map: textureAtlas.texture,\n            transparent: true\n        });\n\n        const ammoSize = textureAtlas.getFrameSize('ammo');\n\n        this.geometry = new PlaneGeometry(ammoSize.width, ammoSize.height);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'ammo');\n\n        const ammoMesh = new Mesh(this.geometry, material);\n\n        ammoMesh.scale.set(0.5, 0.5, 1);\n\n        this.magazineText = new TextView('0', {\n            color: 0xffffcc\n        });\n\n        this.magazineText.init();\n\n        this.magazineText.mesh.scale.set(2, 2, 1);\n\n        this.magazineText.position = {\n            x: ammoSize.width + 10,\n            y: -this.magazineText.height\n        };\n\n        this.mesh.add(this.magazineText.mesh);\n\n        this.ammoText = new TextView('0', {\n            color: 0xffff99\n        });\n\n        this.ammoText.init();\n\n        this.ammoText.mesh.scale.set(1, 1, 1);\n\n        this.ammoText.position = {\n            x: ammoSize.width + 64,\n            y: -this.ammoText.height\n        };\n\n        ammoMesh.position.x = 20;\n        this.magazineText.position.x = 40;\n        this.ammoText.position.x = 120;\n\n        this.mesh.add(this.ammoText.mesh);\n        this.mesh.add(ammoMesh);\n\n        super.init();\n    }\n\n    set ammo (ammo) {\n        if (ammo === null) {\n            this.ammoText.text = '-';\n        }\n        this.ammoText.text = ammo;\n    }\n\n    set magazine (magazine) {\n        if (magazine === null) {\n            this.magazineText.text = '-';\n        }\n        this.magazineText.text = magazine;\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.ammo = weapon.ammo;\n            this.magazine = weapon.magazine;\n        } else {\n            this.ammo = null;\n            this.magazine = null;\n        }\n    }\n}\n\nexport default AmmoView;\n","import { Matrix4, Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from '../../../engine/graphics/View';\n\nclass HealthView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._healthScale = 1;\n    }\n\n    init () {\n        const material = new MeshBasicMaterial({\n            color: 0xcc0000\n        });\n\n        this.geometry = new PlaneGeometry(200, 20);\n\n        // Change originX to left side\n        this.geometry.applyMatrix(new Matrix4().makeTranslation(100, 0, 0));\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n\n    set healthScale (value) {\n        if (value !== this._healthScale) {\n            this._healthScale = value;\n\n            if (value <= 0) {\n                this.mesh.visible = false;\n            } else {\n                if (!this.mesh.visible) {\n                    this.mesh.visible = true;\n                }\n\n                const oldX = this.mesh.position.x;\n\n                this.mesh.scale.set(value, 1, 1);\n                this.mesh.position.x = oldX;\n            }\n        }\n    }\n\n    update () {\n        this.healthScale = this.player.health / this.player.maxHealth;\n    }\n}\n\nexport default HealthView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass WeaponView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._weapon = null;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas('ui', true);\n\n        this.geometry = new PlaneGeometry(196, 64);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry);\n\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set weapon (weapon) {\n        if (this._weapon !== weapon) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            this._weapon = weapon;\n            this.textureFrame.frame = weapon;\n        } else if (weapon === null) {\n            if (this.mesh.visible) {\n                this.mesh.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.weapon = weapon.name;\n        } else {\n            this.weapon = null;\n        }\n    }\n}\n\nexport default WeaponView;\n","import {Mesh, MeshLambertMaterial, Object3D, PlaneGeometry} from 'three';\nimport {TextView} from \"../../../engine/graphics/TextView\";\nimport {View} from \"../../../engine/graphics/View\";\n\nfunction converToText (teams) {\n    let resultText = '';\n\n    for (const [teamName, teamData] of teams.entries()) {\n        resultText += `${teamName} - k: ${teamData.kills} - d: ${teamData.deaths} \\n`;\n\n        const soldierText = [];\n\n        for (const soldier of teamData.soldiers) {\n            const text = `${soldier.name} - k: ${soldier.totalKills} - d: ${soldier.totalDeaths}`;\n\n            soldierText.push(text);\n        }\n\n        resultText += soldierText.join('\\n');\n        resultText += '\\n----------------------\\n';\n    }\n\n    return resultText;\n}\n\nclass ScoreView extends View {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.match = state.match;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const backgroundMaterial = new MeshLambertMaterial({\n            color: 0x00000,\n            transparent: true,\n            opacity: 0.5\n        });\n\n        const backgroundGeometry = new PlaneGeometry(600, 800);\n\n        this.mesh.add(new Mesh(backgroundGeometry, backgroundMaterial));\n\n        this.scoreTextView = new TextView(this._scoreText, {\n            color: 0xfeff80,\n            width: 600,\n            align: 'left'\n        });\n\n        this.scoreTextView.init();\n\n        this.mesh.visible = false;\n        this.mesh.add(this.scoreTextView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        if (this.state.showScores) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            // Scores have changed\n            this.scoreTextView.text = converToText(this.match.sortedScores());\n        } else if (this.mesh.visible) {\n            this.mesh.visible = false;\n        }\n    }\n}\n\nexport default ScoreView;\n","export class ObjectPool<T> {\n    private readonly factoryFunction: () => T;\n    private totalInstances: number = 0;\n    private readonly allocationLimit: number;\n    private readonly allocationNumber: number;\n    private availableInstances: T[];\n\n    /**\n     * @param factoryFunction Function that creates the object to pool.\n     * @param firstAllocationNumber Initial amount of objects to allocate.\n     * @param allocationNumber Number to increase the pool by when it is full.\n     * @param allocationLimit Size limit of the pool.\n     */\n    constructor(\n        factoryFunction: () => T,\n        firstAllocationNumber: number,\n        allocationNumber: number,\n        allocationLimit: number\n    ) {\n        this.factoryFunction = factoryFunction;\n        this.allocationLimit = allocationLimit;\n        this.allocationNumber = allocationNumber;\n        this.availableInstances = [];\n        this.allocate(firstAllocationNumber);\n    }\n\n    get size() {\n        return this.totalInstances;\n    }\n\n    /**\n     * Instantiate a given number of elements and add them to the collection of available instances\n     * @param {number} number Number of elements to allocate\n     */\n    public allocate(number: number): ObjectPool<T> {\n        if (this.totalInstances + number < this.allocationLimit) {\n            this.totalInstances += number;\n\n            for (let i = 0; i < number; i++) {\n                this.availableInstances.push(this.factoryFunction());\n            }\n        } else {\n            throw new Error(\"ObjectPool allocation limit reached\");\n        }\n\n        return this;\n    }\n\n    /**\n     * Retrieve an element for the collection of available instances, (re)initialize and return it.\n     */\n    get(): T {\n        // check if we still have enough available instances, instantiate new ones\n        if (this.availableInstances.length < 1) {\n            this.allocate(this.allocationNumber);\n        }\n\n        return this.availableInstances.pop() as T;\n    }\n\n    /**\n     * Add a given element to the pool.\n     * @param {Object} object Element to add to the pool\n     */\n    public free(object: T): ObjectPool<T> {\n        if (this.availableInstances.indexOf(object) === -1) {\n            this.availableInstances.push(object);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clear all references.\n     */\n    public clear(): ObjectPool<T> {\n        while (this.availableInstances.length) {\n            this.availableInstances.pop();\n        }\n\n        this.totalInstances = 0;\n\n        return this;\n    }\n}\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass BulletView extends View {\n    constructor (bullet) {\n        super();\n\n        this.bullet = bullet;\n    }\n\n    init () {\n        const bullet = this.bullet;\n\n        const textureAtlas = TextureManager.getAtlas('world', false);\n\n        this.geometry = new PlaneGeometry(2, 8);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'bullet1');\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n        this.mesh = new Mesh(this.geometry, this.material);\n        this.mesh.position.set(bullet.position.x, bullet.position.y, bullet.position.z);\n        this.mesh.rotation.z = bullet.angle + (90 * (Math.PI / 180));\n\n        super.init();\n    }\n\n    update (interpolationPercentage) {\n        const previous = this.bullet.previousPosition;\n        const current = this.bullet.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n        this.mesh.rotation.z = this.bullet.angle + (90 * (Math.PI / 180));\n\n        if (this.bullet.dead) {\n            this.mesh.visible = false;\n        } else {\n            this.mesh.visible = true;\n        }\n    }\n}\n\nexport default BulletView;\n","import { Object3D } from \"three\";\nimport { ObjectPool } from \"../../../engine/utils/ObjectPool\";\nimport { View } from \"../../../engine/graphics/View\";\nimport BulletView from \"./BulletView\";\nimport { BulletSystem } from \"../../../core/BulletSystem\";\nimport { Bullet } from \"../../../core/entities/Bullet\";\n\nexport class BulletSystemView extends View {\n    private bulletSystem: BulletSystem;\n    private bulletViewPool: ObjectPool<BulletView>;\n    private bulletViewPairs: WeakMap<Bullet, BulletView> = new WeakMap<\n        Bullet,\n        BulletView\n    >();\n\n    constructor(bulletSystem, poolLimit?: number) {\n        super();\n\n        this.bulletSystem = bulletSystem;\n        this.bulletViewPool = new ObjectPool<BulletView>(\n            (): BulletView => {\n                return new BulletView(null);\n            },\n            this.bulletSystem.poolSize,\n            10,\n            poolLimit || 200\n        );\n    }\n\n    init() {\n        this.mesh = new Object3D();\n\n        super.init();\n    }\n\n    update(delta) {\n        // Keep viewPool in sync with bullet pool\n        if (this.bulletSystem.poolSize > this.bulletViewPool.size) {\n            this.bulletViewPool.allocate(\n                this.bulletSystem.poolSize - this.bulletViewPool.size\n            );\n        }\n\n        // Clear previously killed bullets\n        for (const deadBullet of this.bulletSystem.deadBullets) {\n            const bulletView = this.bulletViewPairs.get(deadBullet);\n\n            if (bulletView) {\n                bulletView.update(delta);\n            }\n\n            this.bulletSystem.deadBullets.delete(deadBullet);\n        }\n\n        for (const bullet of this.bulletSystem.activeBullets) {\n            let bulletView = this.bulletViewPairs.get(bullet);\n\n            if (!bulletView) {\n                bulletView = this.bulletViewPool.get();\n\n                bulletView.bullet = bullet;\n                bulletView.init();\n\n                this.mesh.add(bulletView.mesh);\n\n                this.bulletViewPairs.set(bullet, bulletView);\n            }\n\n            bulletView.update(delta);\n        }\n    }\n}\n\nexport default BulletSystemView;\n","import {TextureFrame} from './TextureFrame';\n\nexport class Animation {\n    constructor (textureAtlas, geometry, interval = 10, repeat = true, frames = [],\n            framePrefix = '', fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n\n        // Use the first frame as a size reference\n        this.textureFrame = new TextureFrame(this.textureAtlas, geometry, framePrefix + frames[0], fixed);\n\n        this.interval = interval;\n        this.frames = frames;\n        this.framePrefix = framePrefix;\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n\n        this._updateTexture();\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _updateTexture () {\n        this.textureFrame.frame = this.framePrefix + this.frames[this.currentFrameIndex];\n    }\n\n    reset () {\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n    }\n\n    update (delta) {\n        this.currentDisplayTime += 1;\n\n        if (this.currentDisplayTime > this.interval) {\n            this.currentDisplayTime = 0;\n\n            this.currentFrameIndex++;\n\n            if (this.currentFrameIndex >= this.frames.length) {\n                this.currentFrameIndex = 0;\n            }\n\n            this._updateTexture();\n        }\n    }\n\n    get currentFrame () {\n        return this.frames[this.currentFrameIndex];\n    }\n}\n","import { Matrix4, Geometry, Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {Animation} from \"../../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nconst WATER_FRAMES = [\n    'animation_water_0001',\n    'animation_water_0002',\n    'animation_water_0003',\n    'animation_water_0004',\n    'animation_water_0005',\n    'animation_water_0006',\n    'animation_water_0007',\n    'animation_water_0008',\n    'animation_water_0009'\n];\n\nfunction waterGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = waterGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass WaterBlocksView extends View {\n    constructor (map, textureAtlasName, waterFrames = WATER_FRAMES) {\n        super();\n\n        this.map = map;\n        this._textureAtlasName = textureAtlasName;\n        this._waterFrames = waterFrames;\n        this.blocks = map.blocks(['water']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        // Do not clone, since all water animates in sync\n        this.textureAtlas = TextureManager.getAtlas(this._textureAtlasName, true);\n\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.animation = new Animation(this.textureAtlas, this.geometry, 9, true, this._waterFrames, '', true);\n        this.animation.textureFrame.width = 100;\n        this.animation.textureFrame.height = 100;\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: false\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n\n    update () {\n        this.animation.update();\n    }\n}\n\nexport default WaterBlocksView;\n","import { DoubleSide, Matrix4, Mesh, MeshLambertMaterial, Geometry, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nfunction wallBlockGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.south) {\n        const south = textureAtlas.getBounds(block.walls.south);\n\n        const southGeometry = new PlaneGeometry(block.width, block.height);\n\n        southGeometry.faceVertexUvs[0][0] = [south[0], south[1], south[3]];\n        southGeometry.faceVertexUvs[0][1] = [south[1], south[2], south[3]];\n        southGeometry.rotateY(Math.PI / 2);\n        southGeometry.translate(block.width / 2, 0, 0);\n\n        geometries.push(southGeometry);\n    }\n\n    if (block.walls.north) {\n        const north = textureAtlas.getBounds(block.walls.north);\n\n        const northGeometry = new PlaneGeometry(block.width, block.height);\n\n        northGeometry.faceVertexUvs[0][0] = [north[0], north[1], north[3]];\n        northGeometry.faceVertexUvs[0][1] = [north[1], north[2], north[3]];\n        northGeometry.rotateY(-(Math.PI / 2));\n        northGeometry.translate(-(block.width / 2), 0, 0);\n\n        geometries.push(northGeometry);\n    }\n\n    if (block.walls.west) {\n        const west = textureAtlas.getBounds(block.walls.west);\n\n        const westGeometry = new PlaneGeometry(block.width, block.height);\n\n        westGeometry.faceVertexUvs[0][0] = [west[0], west[1], west[3]];\n        westGeometry.faceVertexUvs[0][1] = [west[1], west[2], west[3]];\n        westGeometry.rotateX((Math.PI / 2));\n        westGeometry.translate(0, -(block.height / 2), 0);\n\n        geometries.push(westGeometry);\n    }\n\n    if (block.walls.east) {\n        const east = textureAtlas.getBounds(block.walls.east);\n\n        const eastGeometry = new PlaneGeometry(block.width, block.height);\n\n        eastGeometry.faceVertexUvs[0][0] = [east[0], east[1], east[3]];\n        eastGeometry.faceVertexUvs[0][1] = [east[1], east[2], east[3]];\n        eastGeometry.rotateX(-(Math.PI / 2));\n        eastGeometry.rotateY((Math.PI / 2));\n        eastGeometry.translate(0, (block.height / 2), 0);\n\n        geometries.push(eastGeometry);\n    }\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = wallBlockGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass StaticBlocksView extends View {\n    constructor (map, textureAtlasName) {\n        super();\n\n        this.map = map;\n        this.textureAtlasName = textureAtlasName;\n        this.blocks = map.blocks(['wall']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        this.textureAtlas = TextureManager.getAtlas(this.textureAtlasName, false);\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: true,\n            side: DoubleSide\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n}\n\nexport default StaticBlocksView;\n","import { Mesh, MeshLambertMaterial, Object3D, PlaneGeometry, SpotLight } from 'three';\nimport { TextureFrame } from '../../../../engine/graphics/TextureFrame';\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\nimport {View} from \"../../../../engine/graphics/View\";\n\nclass LightView extends View {\n    constructor (light) {\n        super();\n        this.light = light;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('world', true);\n        const lightGeometry = new PlaneGeometry(32, 32);\n\n        this.textureFrame = new TextureFrame(textureAtlas, lightGeometry, 'light1');\n\n        const lightMaterial = new MeshLambertMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        const lightMesh = new Mesh(lightGeometry, lightMaterial);\n\n        lightMesh.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        lightMesh.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(lightMesh);\n\n        const spotLight = new SpotLight(0xff00000, 1);\n\n        const target = new Object3D();\n\n        target.position.set(this.light.x, this.light.y, -this.light.z);\n        target.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(target);\n\n        spotLight.target = target;\n        spotLight.angle = 45 * (Math.PI / 180);\n        spotLight.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        spotLight.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(spotLight);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.translateX(100 / 2);\n        this.mesh.translateY(100 / 2);\n        this.mesh.translateZ(100);\n\n        super.init();\n    }\n}\n\nexport default LightView;\n","import { Object3D } from 'three';\nimport WaterBlocksView from './world/WaterBlocksView';\nimport StaticBlocksView from './world/StaticBlocksView';\nimport LightView from './lights/LightView';\nimport {View} from '../../../engine/graphics/View';\n\nclass WorldMapView extends View {\n    constructor (map) {\n        super();\n\n        this.map = map;\n        this.wallsView = new StaticBlocksView(map, 'tiles');\n        this.waterView = new WaterBlocksView(map, 'tiles');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        for (const light of this.map.lights) {\n            const lightView = new LightView(light);\n\n            lightView.init();\n\n            this.mesh.add(lightView.mesh);\n        }\n\n        this.wallsView.init();\n        this.waterView.init();\n\n        this.mesh.add(this.wallsView.mesh);\n        this.mesh.add(this.waterView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        this.waterView.update();\n    }\n}\n\nexport default WorldMapView;\n","import { Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {Animation} from \"../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\n\nconst WALK_FRAMES = [\n    'walk_0001',\n    'walk_0002',\n    'walk_0003',\n    'walk_0004',\n    'walk_0005',\n    'walk_0006',\n    'walk_0007',\n    'walk_0008'\n];\n\nconst RUN_FRAMES = [\n    'run_0001',\n    'run_0002',\n    'run_0003',\n    'run_0004',\n    'run_0005',\n    'run_0006',\n    'run_0007',\n    'run_0008'\n];\n\nconst IDLE_FRAMES = ['idle_0001'];\n\nconst TEAM_COLORS = {\n    american: 0x006D02,\n    german: 0xcccc00\n};\n\nclass SoldierView extends View {\n    constructor (soldier) {\n        super();\n\n        this.soldier = soldier;\n        this._team = soldier ? soldier.team : 'american';\n    }\n\n    set team (team) {\n        if (team !== this._team) {\n            this._team = team;\n            this.material.color.setHex(TEAM_COLORS[team]);\n        }\n    }\n\n    init () {\n        const soldier = this.soldier;\n\n        this.geometry = new PlaneGeometry(soldier.height * 2, soldier.width * 2);\n\n        this.geometry.rotateZ(Math.PI);\n\n        const textureAtlas = TextureManager.getAtlas('soldier', true);\n\n        this.animations = {\n            walk: new Animation(textureAtlas, this.geometry, 9, true, WALK_FRAMES, 'soldier_weapon_'),\n            run: new Animation(textureAtlas, this.geometry, 5, true, RUN_FRAMES, 'soldier_weapon_'),\n            idle: new Animation(textureAtlas, this.geometry, 8, true, IDLE_FRAMES, 'soldier_weapon_')\n        };\n\n        this.currentAnimation = this.animations.idle;\n\n        this.material = new MeshLambertMaterial({\n            map: textureAtlas.texture,\n            transparent: true,\n            color: TEAM_COLORS[this._team]\n        });\n\n        this.material.color.offsetHSL(0.1, 0.8, 0.4);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.position.set(soldier.position.x, soldier.position.y, soldier.position.z);\n        this.mesh.rotation.z = soldier.angle;\n\n        super.init();\n    }\n\n    _updateAnimation () {\n        let animation = this.currentAnimation;\n\n        if (this.soldier.isMoving) {\n            if (this.soldier.isRunning) {\n                animation = this.animations.run;\n            } else {\n                animation = this.animations.walk;\n            }\n        } else {\n            animation = this.animations.idle;\n        }\n\n        // Animation changed\n        if (animation !== this.currentAnimation) {\n            this.currentAnimation = animation;\n            this.currentAnimation.reset();\n        }\n\n        this.currentAnimation.update();\n    }\n\n    update (interpolationPercentage) {\n        let zOffset = this.soldier.depth;\n\n        if (this.soldier.dead) {\n            this.mesh.visible = false;\n            zOffset = 0;\n        } else if (!this.mesh.visible) {\n            this.mesh.visible = true;\n        }\n\n        const previous = this.soldier.previousPosition;\n        const current = this.soldier.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n\n        this.mesh.position.z += zOffset;\n\n        this.mesh.rotation.z = this.soldier.angle + (90 * (Math.PI / 180));\n\n        this._updateAnimation();\n    }\n}\n\nexport default SoldierView;\n","import { Object3D } from \"three\";\nimport { ObjectPool } from \"../../../engine/utils/ObjectPool\";\nimport { View } from \"../../../engine/graphics/View\";\nimport SoldierView from \"./SoldierView\";\nimport { Soldier } from \"../../../core/entities/Soldier\";\n\nexport class SoldierViewPool extends View {\n    private readonly soldiers: Set<Soldier>;\n    private viewPool: ObjectPool<SoldierView>;\n    private viewPairs: WeakMap<Soldier, SoldierView>;\n\n    constructor(soldiers: Set<Soldier>, poolLimit?: number) {\n        super();\n\n        this.soldiers = soldiers;\n\n        this.viewPool = new ObjectPool<SoldierView>(\n            (): SoldierView => {\n                return new SoldierView(null);\n            },\n            this.soldiers.size,\n            10,\n            poolLimit || 200\n        );\n\n        this.viewPairs = new WeakMap();\n    }\n\n    init() {\n        this.mesh = new Object3D();\n        this._initialized = true;\n    }\n\n    update(interpolationPercentage) {\n        // Keep viewPool in sync with soldier pool\n        if (this.viewPool.size > this.soldiers.size) {\n            this.viewPool.allocate(this.soldiers.size - this.viewPool.size);\n        }\n\n        for (const soldier of this.soldiers) {\n            let view = this.viewPairs.get(soldier);\n\n            if (!view && !soldier.dead) {\n                view = this.viewPool.get();\n\n                view.soldier = soldier;\n                view.init();\n\n                // Team is set after, because it affects the material\n                view.team = soldier.team;\n\n                this.mesh.add(view.mesh);\n\n                this.viewPairs.set(soldier, view);\n            } else if (view) {\n                view.update(interpolationPercentage);\n\n                if (soldier.dead && this.viewPairs.has(soldier)) {\n                    this.viewPool.free(view);\n                    this.viewPairs.delete(soldier);\n                }\n            }\n        }\n    }\n}\n","import {\n    AmbientLight,\n    Camera,\n    OrthographicCamera,\n    PerspectiveCamera,\n    SpotLight,\n} from \"three\";\nimport { ThreeRenderView } from \"../../../engine/renderer/render-view/ThreeRenderView\";\nimport { PlayState } from \"../PlayState\";\nimport { Dimension } from \"../../../engine/math/Dimension\";\n\nexport class PlayRenderView extends ThreeRenderView {\n    public camera?: PerspectiveCamera = undefined;\n    private state: PlayState;\n    private map: any;\n    private _cameraFollowView?: any;\n    private _cameraFollowLight?: SpotLight;\n\n    constructor(state: PlayState) {\n        super();\n\n        this.state = state;\n        this.map = this.state.map;\n    }\n\n    get cameraFollowView(): any {\n        return this._cameraFollowView as any;\n    }\n\n    get cameraFollowLight(): SpotLight {\n        return this._cameraFollowLight as SpotLight;\n    }\n\n    changeSize(size: Dimension) {\n        super.changeSize(size);\n\n        this.init();\n    }\n\n    init() {\n        super.init();\n\n        this.camera = new PerspectiveCamera(\n            75,\n            this.map.width / this.map.height,\n            100,\n            1000\n        );\n\n        this.getCamera().position.x =\n            (this.map.width / 2) * this.map.blockWidth;\n        this.getCamera().position.y =\n            (this.map.height / 2) * this.map.blockHeight;\n        this.getCamera().position.z = this.map.blockDepth * 6;\n\n        const ambientLight = new AmbientLight(0x030303);\n\n        this.scene.add(ambientLight);\n\n        this._cameraFollowLight = new SpotLight(0xfffffff, 2, 800);\n        this._cameraFollowLight.angle = 135 * (Math.PI / 180);\n        this._cameraFollowLight.exponent = 10;\n        this._cameraFollowLight.target = this._cameraFollowView.mesh;\n\n        this.scene.add(this._cameraFollowLight);\n\n        this._initialized = true;\n    }\n\n    update(delta: number) {\n        if (this.state.paused) {\n            return;\n        }\n\n        super.update(delta);\n\n        if (this.cameraFollowView) {\n            this.getCamera().position.setX(this.cameraFollowView.position.x);\n            this.getCamera().position.setY(this.cameraFollowView.position.y);\n\n            this.cameraFollowLight.position.setX(\n                this.cameraFollowView.position.x\n            );\n            this.cameraFollowLight.position.setY(\n                this.cameraFollowView.position.y\n            );\n            this.cameraFollowLight.position.setZ(\n                this.cameraFollowView.position.z + 400\n            );\n        }\n    }\n\n    getCamera(): Camera | OrthographicCamera | PerspectiveCamera {\n        return this.camera as PerspectiveCamera;\n    }\n}\n","import ViewContainer from '../../engine/graphics/ViewContainer';\n\nimport {StatsRenderView} from './ui/StatsRenderView';\nimport AmmoView from './ui/AmmoView';\nimport HealthView from './ui/HealthView';\nimport WeaponView from './ui/WeaponView';\nimport ScoreView from './ui/ScoreView';\n\nimport BulletSystemView from './views/BulletSystemView';\nimport WorldMapView from './views/WorldMapView';\nimport SoldierView from './views/SoldierView';\nimport {SoldierViewPool} from './views/SoldierViewPool';\nimport {PlayRenderView} from './views/PlayRenderView';\n\nexport const ViewBuilder = {\n    uiView (playState) {\n        const uiView = new StatsRenderView(playState);\n        const uiViewContainer = new ViewContainer();\n\n        const scoreView = new ScoreView(playState);\n        const weaponView = new WeaponView(playState);\n        const ammoView = new AmmoView(playState);\n        const healthView = new HealthView(playState);\n\n        uiViewContainer.addDynamicView(scoreView, { x: 100, y: 100, z: 0 });\n        uiViewContainer.addDynamicView(weaponView, { x: 280, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(ammoView, { x: 10, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(healthView, { x: 600, y: 540, z: 0 });\n        uiView.addViewContainer('main', uiViewContainer);\n        uiView.currentViewContainer = 'main';\n\n        return uiView;\n    },\n\n    playView (playState) {\n        const playView = new PlayRenderView(playState);\n\n        const playerView = new SoldierView(playState.player);\n        const soldierView = new SoldierViewPool(playState.soldiers);\n        const bulletSystemView = new BulletSystemView(playState.bulletSystem);\n        const worldMapView = new WorldMapView(playState.map);\n\n        const viewContainer = new ViewContainer();\n\n        viewContainer.addDynamicView(playerView);\n        viewContainer.addDynamicView(soldierView);\n        viewContainer.addDynamicView(bulletSystemView);\n        viewContainer.addDynamicView(worldMapView);\n\n        playView.addViewContainer('main', viewContainer);\n        playView.currentViewContainer = 'main';\n\n        // Camera follow\n        playView._cameraFollowView = playerView;\n\n        return playView;\n    }\n};\n","/**\n * Get a given statistic of a all soldiers per team.\n *\n * @param {string} stat Stat to get.\n *\n * @return {Map} Stats per team\n */\nfunction soldierStatsByTeam (stat) {\n    const resultsByTeam = new Map();\n\n    for (let [teamName, soldiers] of this.teams.entries()) {\n        for (const soldier of soldiers) {\n            const teamResult = resultsByTeam.get(teamName);\n\n            if (teamResult) {\n                resultsByTeam.set(teamName, teamResult + soldier[stat]);\n            } else {\n                resultsByTeam.set(teamName, soldier[stat]);\n            }\n        }\n    }\n}\n\nclass Match {\n    constructor (teams) {\n        this.matchTime = 0;\n        this.matchDuration = 300000;\n        this.soldiers = new Set();\n        this.teamNames = [];\n        this.teams = new Map();\n\n        for (const teamName of teams) {\n            this.teamNames.push(teamName);\n            this.teams.set(teamName, new Set());\n        }\n    }\n\n    teamWithLeastPlayers () {\n        let leastTeamName = null;\n        let minCount = Number.MAX_VALUE;\n\n        for (const teamName of this.teamNames) {\n            const count = this.teams.get(teamName).size;\n\n            if (count < minCount) {\n                leastTeamName = teamName;\n                minCount = count;\n            }\n        }\n\n        return leastTeamName;\n    }\n\n    addSoldier (soldier, teamName) {\n        if (!teamName) {\n            teamName = this.teamWithLeastPlayers();\n        }\n\n        // FIXME get this out of here?\n        soldier.team = teamName;\n\n        const team = this.teams.get(teamName);\n\n        if (team) {\n            team.add(soldier);\n            this.soldiers.add(soldier);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    sortedScores () {\n        const teams = new Map();\n\n        for (const soldier of new Set([...this.soldiers])) {\n            const team = teams.get(soldier.team);\n\n            if (team) {\n                team.kills += soldier.totalKills;\n                team.deaths += soldier.totalDeaths;\n                team.soldiers.push(soldier);\n            } else {\n                teams.set(soldier.team, {\n                    kills: soldier.totalKills,\n                    deaths: soldier.totalDeaths,\n                    soldiers: [soldier]\n                });\n            }\n        }\n\n        for (const team of teams.values()) {\n            team.soldiers.sort((a, b) => b.kills - a.kills);\n        }\n\n        return new Map([...teams.entries()].sort((teamA, teamB) => {\n            return teamB[1].kills - teamA[1].kills;\n        }));\n    }\n\n    removeSoldier (soldier) {\n        for (const team of this.teams.values()) {\n            if (team.has(soldier)) {\n                team.delete(soldier);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    killsByTeam () {\n        return soldierStatsByTeam('kills');\n    }\n\n    deathsByTeam () {\n        return soldierStatsByTeam('deaths');\n    }\n\n    start () {\n\n    }\n\n    end () {\n\n    }\n\n    update (delta) {\n        this.matchTime += delta;\n\n        if (this.matchTime >= this.matchDuration) {\n            this.end();\n        }\n    }\n}\n\nexport default Match;\n","import Gamepad from \"../../../engine/input/Gamepad\";\nimport { Player } from \"../../../core/entities/Player\";\nimport { Keys, LetterKeys } from \"../../../engine/input/Keys\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../../engine/input/InputSourceInterface\";\nimport { KeyboardInputSource } from \"../../../engine/input/KeyboardInputSource\";\nimport { Keyboard } from \"../../../engine/input/Keyboard\";\nimport { GamepadInputSource } from \"../../../engine/input/GamepadInputSource\";\n\nexport class PlayerInput implements StateInput {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private player: Player;\n\n    constructor(inputSources: Map<string, InputSourceInterface>, player) {\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n        this.player = player;\n    }\n\n    update(delta) {\n        if (\n            this.keyboard.isDown(Keys.UP) ||\n            this.gamepad?.isStickDown(\"left\", \"up\")\n        ) {\n            this.player.moveUp();\n        } else if (\n            this.keyboard.isDown(Keys.DOWN) ||\n            this.gamepad?.isStickDown(\"left\", \"down\")\n        ) {\n            this.player.moveDown();\n        } else {\n            this.player.stopMoving();\n        }\n\n        if (\n            this.keyboard.isDown(Keys.RIGHT) ||\n            this.gamepad?.isStickDown(\"right\", \"right\")\n        ) {\n            this.player.turnRight();\n        } else if (\n            this.keyboard.isDown(Keys.LEFT) ||\n            this.gamepad?.isStickDown(\"right\", \"left\")\n        ) {\n            this.player.turnLeft();\n        } else {\n            this.player.stopTurning();\n        }\n\n        if (\n            !this.player.isRunning &&\n            (this.keyboard.isDown(Keys.CTRL) ||\n                this.gamepad?.isDown(\"rightTrigger\"))\n        ) {\n            this.player.fireBullet();\n        }\n\n        if (\n            this.keyboard.isDown(Keys.SHIFT) ||\n            this.gamepad?.isDown(\"actionSouth\")\n        ) {\n            this.player.isRunning = true;\n        } else {\n            this.player.isRunning = false;\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.R) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionWest\")\n        ) {\n            this.player.reload();\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.X) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionNorth\")\n        ) {\n            this.player.scrollWeapons(\"down\");\n        }\n\n        if (\n            this.keyboard.keyboardDownOnce(LetterKeys.Z) ||\n            this.gamepad?.gamepadButtonDownOnce(\"actionEast\")\n        ) {\n            this.player.scrollWeapons(\"up\");\n        }\n    }\n}\n","import { PlayState } from \"../PlayState\";\nimport { Keys, LetterKeys } from \"../../../engine/input/Keys\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\nimport { InputSourceInterface } from \"../../../engine/input/InputSourceInterface\";\nimport { KeyboardInputSource } from \"../../../engine/input/KeyboardInputSource\";\nimport { Keyboard } from \"../../../engine/input/Keyboard\";\nimport { GamepadInputSource } from \"../../../engine/input/GamepadInputSource\";\nimport Gamepad from \"../../../engine/input/Gamepad\";\n\nexport class UiInput implements StateInput {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private state: PlayState;\n\n    constructor(inputSources: Map<string, InputSourceInterface>, state) {\n        const keyboardInputSource = inputSources.get(\"keyboard\");\n        const gamepadInputSource = inputSources.get(\"gamepad\") as\n            | GamepadInputSource\n            | undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error(\"No keyboard input\");\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n\n        this.state = state;\n    }\n\n    update(delta) {\n        if (\n            this.keyboard.isDown(LetterKeys.E) ||\n            this.gamepad?.gamepadButtonDownOnce(\"leftBumper\")\n        ) {\n            this.state.showScores = true;\n        } else {\n            this.state.showScores = false;\n        }\n\n        if (this.keyboard.keyboardDownOnce(Keys.ESC)) {\n            if (this.state.paused) {\n                this.state.resume();\n            } else {\n                this.state.pause();\n            }\n        }\n    }\n}\n","import { Vector2 } from \"three\";\n\nexport class Vector2Helper {\n    private constructor() {}\n\n    public static perp(v: Vector2): Vector2 {\n        const x = v.x;\n\n        v.x = v.y;\n        v.y = -x;\n\n        return v;\n    }\n}\n","import { Vector2 } from \"three\";\nimport { Vector2Helper } from \"./Vector2Helper\";\n\n/**\n * Represents a *convex* polygon with any number of vertices (specified in counter-clockwise order)\n *\n * Note: Do _not_ manually change the `vertices`, `angle`, or `offset` properties. Use the\n * provided setters. Otherwise the calculated properties will not be updated correctly.\n *\n * `pos` can be changed directly.\n\n * Create a new polygon, passing in a position vector, and an array of vertices (represented\n * by vectors relative to the position vector). If no position is passed in, the position\n * of the polygon will be `(0,0)`.\n */\nexport class Polygon {\n    public position: Vector2;\n    public angle: number = 0;\n    public offset: Vector2 = new Vector2();\n    public computedVertices: Vector2[] = [];\n    public vertices: Vector2[] = [];\n    public edges: Vector2[] = [];\n    public normals: Vector2[] = [];\n\n    /**\n     * @param position A vector representing the origin of the polygon. (all other vertices are relative to this one)\n     * @param vertices An array of vectors representing the vertices in the polygon, in counter-clockwise order.\n     */\n    constructor(position = new Vector2(), vertices: Vector2[] = []) {\n        this.position = position;\n\n        this.setVertices(vertices);\n    }\n\n    public static fromBox(\n        position: Vector2,\n        width: number,\n        height: number\n    ): Polygon {\n        return new Polygon(new Vector2(position.x, position.y), [\n            new Vector2(),\n            new Vector2(width, 0),\n            new Vector2(width, height),\n            new Vector2(0, height),\n        ]);\n    }\n\n    /**\n     * Set the vertices of the polygon.\n     * Note: The vertices are counter-clockwise *with respect to the coordinate system*.\n     * If you directly draw the vertices on a screen that has the origin at the top-left corner\n     * it will _appear_ visually that the vertices are being specified clockwise. This is just\n     * because of the inversion of the Y-axis when being displayed.\n     *\n     * @param vertices An array of vectors representing the vertices in the polygon, in counter-clockwise order.\n     */\n    setVertices(vertices: Vector2[]): Polygon {\n        // Only re-allocate if this is a new polygon or the number of vertices has changed.\n        const lengthChanged =\n            !this.vertices || this.vertices.length !== vertices.length;\n\n        if (lengthChanged) {\n            this.computedVertices = [];\n            this.edges = [];\n            this.normals = [];\n\n            // Allocate the vector arrays for the calculated properties\n            for (let i = 0; i < vertices.length; i++) {\n                this.computedVertices.push(new Vector2());\n                this.edges.push(new Vector2());\n                this.normals.push(new Vector2());\n            }\n        }\n        this.vertices = vertices;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * @param angle The current rotation angle (in radians).\n     */\n    setAngle(angle: number): Polygon {\n        this.angle = angle;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current offset to apply to the `vertices` before applying the `angle` rotation.\n     *\n     * @param offset The new offset vector.\n     */\n    setOffset(offset: Vector2): Polygon {\n        this.offset = offset;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n     * Note: This changes the **original** vertices (so any `angle` will be applied on top of this rotation).\n     *\n     * @param angle The angle to rotate (in radians)\n     */\n    rotate(angle): Polygon {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].rotateAround(new Vector2(), angle);\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Translates the vertices of this polygon by a specified amount relative to the origin of *its own coordinate\n     * system* (i.e. `pos`).\n     *\n     * This is most useful to change the \"center vertex\" of a polygon. If you just want to move the whole polygon, change\n     * the coordinates of `pos`.\n     *\n     * Note: This changes the **original** vertices (so any `offset` will be applied on top of this translation)\n     *\n     * @param x The horizontal amount to translate.\n     * @param y The vertical amount to translate.\n     */\n    translate(x: number, y: number): Polygon {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].x += x;\n            vertices[i].y += y;\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Computes the calculated collision polygon. Applies the `angle` and `offset` to the original vertices then recalculates the\n     * edges and normals of the collision polygon.\n     */\n    private _compute(): void {\n        // Calculated vertices - this is what is used for underlying collisions and takes into account\n        // the angle/offset set on the polygon.\n        const computedVertices = this.computedVertices;\n\n        // The edges here are the direction of the `n`th edge of the polygon, relative to\n        // the `n`th vertex. If you want to draw a given edge from the edge value, you must\n        // first translate to the position of the starting vertex.\n        const edges = this.edges;\n\n        // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n        // to the position of the `n`th vertex. If you want to draw an edge normal, you must first\n        // translate to the position of the starting vertex.\n        const normals = this.normals;\n\n        // Copy the original vertices array and apply the offset/angle\n        const vertices = this.vertices;\n        const offset = this.offset;\n        const angle = this.angle;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            const computedVertex = computedVertices[i].copy(vertices[i]);\n\n            computedVertex.x += offset.x;\n            computedVertex.y += offset.y;\n\n            if (angle !== 0) {\n                computedVertex.rotateAround(new Vector2(), angle);\n            }\n        }\n\n        // Calculate the edges/normals\n        for (let i = 0; i < len; i++) {\n            const p1 = computedVertices[i];\n            const p2 =\n                i < len - 1 ? computedVertices[i + 1] : computedVertices[0];\n            const e = edges[i].copy(p2).sub(p1);\n\n            Vector2Helper.perp(normals[i].copy(e)).normalize();\n        }\n    }\n\n    /**\n     * Compute the axis-aligned bounding box. Any current state\n     * (translations/rotations) will be applied before constructing the AABB.\n     *\n     *  Note: Returns a _new_ `Polygon` each time you call this.\n     */\n    getAABB(): Polygon {\n        const vertices = this.computedVertices;\n        const len = vertices.length;\n        let xMin = vertices[0].x;\n        let yMin = vertices[0].y;\n        let xMax = vertices[0].x;\n        let yMax = vertices[0].y;\n\n        for (let i = 1; i < len; i++) {\n            const vertex = vertices[i];\n\n            if (vertex.x < xMin) {\n                xMin = vertex.x;\n            } else if (vertex.x > xMax) {\n                xMax = vertex.x;\n            }\n\n            if (vertex.y < yMin) {\n                yMin = vertex.y;\n            } else if (vertex.y > yMax) {\n                yMax = vertex.y;\n            }\n        }\n\n        return Polygon.fromBox(\n            this.position.clone().add(new Vector2(xMin, yMin)),\n            xMax - xMin,\n            yMax - yMin\n        );\n    }\n}\n","import { Polygon } from \"../../engine/math/Polygon\";\nimport { Vector2 } from \"three\";\n\nconst DEFAULT_SPEED = 0.2;\nconst DEFAULT_ROTATION_SPEED = 0.3;\n\nexport class Entity {\n    public position: { x: number; y: number; z: number };\n    public previousPosition: { x: number; y: number; z: number };\n    public width: number;\n    public height: number;\n    public depth: number;\n    public speed: number;\n    public rotationSpeed: number;\n    private readonly _body: Polygon;\n    public options: {\n        isPlayer: boolean;\n        physics: boolean;\n        isBullet: boolean;\n        isCharacter: boolean;\n        audio: boolean;\n        bullets: boolean;\n        isSoldier: boolean;\n    };\n    public angle: number = Math.PI * 2;\n    public dead: boolean = false;\n    public velocity: { x: number; y: number; z: number } = {\n        x: 0,\n        y: 0,\n        z: 0,\n    };\n    public isMoving: boolean = false;\n    public reverse: boolean = false;\n    public angularVelocity: number = 0;\n    public collidable: boolean = true;\n    public shouldUpdate: boolean = true;\n    public actions: {\n        firedBullet: boolean;\n    } = {\n        firedBullet: false,\n    };\n\n    constructor(x: number, y: number, z = 0, width = 0, height = 0, depth = 0) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z,\n        };\n\n        this.previousPosition = {\n            x: x,\n            y: y,\n            z: z,\n        };\n\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.speed = DEFAULT_SPEED;\n        this.rotationSpeed = DEFAULT_ROTATION_SPEED;\n\n        this.reset();\n\n        this._body = new Polygon(new Vector2(this.x, this.y), [\n            new Vector2(-this.halfWidth, -this.halfHeight),\n            new Vector2(-this.halfWidth, this.halfHeight),\n            new Vector2(this.halfWidth, this.halfHeight),\n            new Vector2(this.halfWidth, 0),\n        ]);\n\n        this.options = {\n            physics: false,\n            bullets: false,\n            audio: false,\n            isBullet: false,\n            isPlayer: false,\n            isCharacter: false,\n            isSoldier: false,\n        };\n    }\n\n    get rotatedBody() {\n        const body = this._body;\n\n        body.setAngle(this.angle);\n\n        return body;\n    }\n\n    onWallCollision() {\n        return null;\n    }\n\n    get body() {\n        this._body.position.x = this.position.x;\n        this._body.position.y = this.position.y;\n\n        return this._body;\n    }\n\n    get x() {\n        return this.position.x;\n    }\n\n    get y() {\n        return this.position.y;\n    }\n\n    get z() {\n        return this.position.z;\n    }\n\n    get halfWidth() {\n        return this.width / 2;\n    }\n\n    get halfHeight() {\n        return this.height / 2;\n    }\n\n    kill() {\n        this.dead = true;\n    }\n\n    get point(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n    reset() {\n        this.velocity = {\n            x: 0,\n            y: 0,\n            z: 0,\n        };\n\n        this.dead = false;\n        this.reverse = false;\n        this.angle = Math.PI * 2;\n        this.angularVelocity = 0;\n\n        // If entity is moving backwards\n        this.reverse = false;\n\n        this.collidable = true;\n        this.shouldUpdate = true;\n\n        this.isMoving = false;\n\n        // Actions can trigger things that should happen in the next update.\n        this.actions = {\n            firedBullet: false,\n        };\n    }\n\n    respawn(position) {\n        this.reset();\n\n        this.position = {\n            x: position.x,\n            y: position.y,\n            z: position.z,\n        };\n\n        this.previousPosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z,\n        };\n    }\n\n    moveUp() {\n        this.reverse = false;\n        this.isMoving = true;\n        this.velocity.x = -this.speed * Math.cos(this.angle);\n        this.velocity.y = -this.speed * Math.sin(this.angle);\n    }\n\n    moveDown() {\n        this.reverse = true;\n        this.isMoving = true;\n        this.velocity.x = this.speed * Math.cos(this.angle);\n        this.velocity.y = this.speed * Math.sin(this.angle);\n    }\n\n    turnLeft() {\n        this.angularVelocity = this.rotationSpeed * (Math.PI / 180);\n    }\n\n    turnRight() {\n        this.angularVelocity = -this.rotationSpeed * (Math.PI / 180);\n    }\n\n    stopMoving() {\n        this.isMoving = false;\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    }\n\n    stopTurning() {\n        this.angularVelocity = 0;\n    }\n\n    update(delta) {\n        if (!this.dead) {\n            this.angle += this.angularVelocity * delta;\n\n            if (this.angle < 0) {\n                this.angle = Math.PI * 2 - this.angle;\n            }\n\n            this.previousPosition.x = this.position.x;\n            this.previousPosition.y = this.position.y;\n            this.previousPosition.z = this.position.z;\n\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n            this.position.z += this.velocity.z * delta;\n        }\n    }\n}\n","import { Entity } from \"./Entity\";\n\nconst GRAVITY = -0.2;\n\n/**\n * Entities that walk, run, jump, die and get hit by bullets.\n */\nexport class Character extends Entity {\n    public maxHealth: number = 100;\n    public walkingSpeed: number = 0.1;\n    public runningSpeed: number = 0.2;\n    private _isRunning: boolean = false;\n    public health: number = 100;\n\n    constructor(x, y, z, width, height, depth) {\n        super(x, y, z, width, height, depth);\n\n        this.reset();\n\n        this.options.physics = true;\n        this.options.bullets = true;\n        this.options.isCharacter = true;\n    }\n\n    set isRunning(running) {\n        if (running) {\n            this._isRunning = true;\n            this.speed = this.runningSpeed;\n        } else {\n            this._isRunning = false;\n            this.speed = this.walkingSpeed;\n        }\n    }\n\n    get isRunning() {\n        return this._isRunning;\n    }\n\n    fall() {\n        this.velocity.z = GRAVITY;\n    }\n\n    hitByBullet(bullet) {\n        this.health -= bullet.damage;\n\n        if (this.health === 0) {\n            this.kill();\n        }\n    }\n\n    stopFalling() {\n        this.velocity.z = 0;\n    }\n\n    reset() {\n        super.reset();\n\n        this._isRunning = false;\n        this.speed = this.walkingSpeed;\n        this.health = 100;\n\n        this.health = this.maxHealth;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.position.z <= 0) {\n            this.kill();\n        }\n    }\n}\n","class Gun {\n    constructor (name, options = {}) {\n        this.name = name;\n        this.maxMagazine = options.maxMagazine || 10;\n        this.magazine = options.magazine || this.maxMagazine;\n\n        this.maxAmmo = options.maxAmmo || 10;\n        this.ammo = (options.ammo || this.maxAmmo) - this.magazine;\n\n        this.fireRate = options.fireRate || 150;\n        this.damage = options.damage || 10;\n        this.reloadTime = options.reloadTime || 500;\n\n        this._reloadingTime = 0;\n        this._firedTime = 0;\n        this._canFire = true;\n\n        this.isReloading = false;\n        this.fired = false;\n    }\n\n    fire () {\n        if (!this.isReloading && this._canFire && this.magazine > 0) {\n            this.fired = true;\n            this._canFire = false;\n            this.magazine -= 1;\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    reload () {\n        if (!this.isReloading) {\n            this.isReloading = true;\n\n            let refill = this.maxMagazine - this.magazine;\n\n            const newAmmo = this.ammo - refill;\n\n            if (newAmmo < 0) {\n                refill = this.ammo;\n\n                this.ammo = 0;\n            } else {\n                this.ammo -= refill;\n            }\n\n            this.magazine += refill;\n        }\n    }\n\n    get magazines () {\n        return Math.floor(this.ammo / this.maxMagazine);\n    }\n\n    update (delta) {\n        if (this._fired) {\n            this._fired = false;\n        }\n\n        if (this.isReloading) {\n            this._reloadingTime += delta;\n\n            if (this._reloadingTime > this.reloadTime) {\n                this._reloadingTime = 0;\n                this.isReloading = false;\n            }\n        } else if (!this._canFire) {\n            this._firedTime += delta;\n\n            if (this._firedTime > this.fireRate) {\n                this._firedTime = 0;\n                this._canFire = true;\n            }\n        }\n    }\n}\n\nexport default Gun;\n","import Gun from './Gun';\n\nexport default {\n    mp44: function () {\n        const mp44 = new Gun('mp44', {\n            maxAmmo: 120,\n            maxMagazine: 30\n        });\n\n        return mp44;\n    },\n    thompson: function () {\n        const thompson = new Gun('thompson', {\n            maxAmmo: 90,\n            maxMagazine: 25,\n            fireRate: 90\n        });\n\n        return thompson;\n    }\n};\n","import { Character } from \"./Character\";\nimport WeaponFactory from \"../weapons/WeaponFactory\";\n\nexport class Soldier extends Character {\n    public name: string;\n    public weapons: any[] = [];\n    public currentWeaponIndex: number = 0;\n    public currentWeapon?: any;\n    public team: any;\n    public maxHealth: number = 100;\n    public walkingSpeed: number = 0.1;\n    public runningSpeed: number = 0.2;\n\n    // Contains the character killed, and the count\n    public kills: Map<Character, number> = new Map();\n\n    // Contains the characters killed by, and the count\n    public deaths: Map<Character, number> = new Map();\n\n    constructor(x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        // FIXME make configurable\n        this.name = \"cpu\";\n        this.team = team;\n\n        // TODO remove this hardcoded stuff\n        this.addWeapon(WeaponFactory.mp44());\n        this.addWeapon(WeaponFactory.thompson());\n        this.currentWeapon = this.weapons[0];\n\n        this.reset();\n\n        this.options.isSoldier = true;\n    }\n\n    addWeapon(weapon) {\n        // TODO increase ammo if weapon is the same\n        this.weapons.push(weapon);\n    }\n\n    scrollWeapons(direction) {\n        if (direction === \"up\") {\n            if (this.currentWeaponIndex === this.weapons.length - 1) {\n                this.currentWeaponIndex = 0;\n            } else {\n                this.currentWeaponIndex += 1;\n            }\n        } else if (direction === \"down\") {\n            if (this.currentWeaponIndex === 0) {\n                this.currentWeaponIndex = this.weapons.length - 1;\n            } else {\n                this.currentWeaponIndex -= 1;\n            }\n        } else {\n            throw new Error('direction is not \"up\" or \"down\"');\n        }\n\n        this.currentWeapon = this.weapons[this.currentWeaponIndex];\n    }\n\n    reload() {\n        if (!this.dead && this.currentWeapon) {\n            this.currentWeapon.reload();\n        }\n    }\n\n    hitByBullet(bullet) {\n        super.hitByBullet(bullet);\n\n        // TODO prevent team killing / make configurable\n        if (this.health === 0) {\n            let deathCount = this.deaths.get(bullet.firedBy);\n\n            if (deathCount) {\n                deathCount += 1;\n            } else {\n                deathCount = 1;\n            }\n\n            this.deaths.set(bullet.firedBy, deathCount);\n\n            let killedByCount = bullet.firedBy.kills.get(this);\n\n            if (killedByCount) {\n                killedByCount += 1;\n            } else {\n                killedByCount = 1;\n            }\n\n            bullet.firedBy.kills.set(this, killedByCount);\n        }\n    }\n\n    kill() {\n        super.kill();\n        const suicides = this.deaths.get(this);\n\n        if (suicides) {\n            this.deaths.set(this, suicides + 1);\n        } else {\n            this.deaths.set(this, 1);\n        }\n    }\n\n    get totalKills() {\n        let total = 0;\n\n        for (const kill of this.kills.values()) {\n            total += kill;\n        }\n\n        return total;\n    }\n\n    get totalDeaths() {\n        let total = 0;\n\n        for (const death of this.deaths.values()) {\n            total += death;\n        }\n\n        return total;\n    }\n\n    fireBullet() {\n        if (!this.dead && this.currentWeapon) {\n            const fired = this.currentWeapon.fire();\n\n            if (fired) {\n                this.actions.firedBullet = true;\n            }\n        }\n    }\n\n    reset() {\n        super.reset();\n\n        this.actions.firedBullet = false;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        if (this.actions.firedBullet) {\n            this.actions.firedBullet = false;\n        }\n\n        if (this.currentWeapon) {\n            this.currentWeapon.update(delta);\n        }\n    }\n}\n","import { Soldier } from \"./Soldier\";\n\nexport class Player extends Soldier {\n    constructor(x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth, team);\n\n        // FIXME make configurable\n        this.name = \"player\";\n\n        this.options.isPlayer = true;\n        this.options.audio = true;\n    }\n\n    update(delta) {\n        super.update(delta);\n    }\n}\n","import { StateAudio } from \"../StateAudio\";\nimport { PlayState } from \"./PlayState\";\n\nclass PlayAudio extends StateAudio {\n    private entities: any;\n    private player: any;\n\n    constructor(\n        state: PlayState,\n        effectsSpriteName: string,\n        backgroundSpriteName: string\n    ) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.entities = state.soldiers;\n        this.player = state.player;\n    }\n\n    update(delta) {\n        for (const entity of this.entities) {\n            if (entity === this.player && entity.actions.firedBullet) {\n                this.effects.play(entity.currentWeapon.name);\n            }\n        }\n    }\n}\n\nexport default PlayAudio;\n","import {Polygon} from '../../engine/math/Polygon';\nimport {Vector2} from \"three\";\n\nclass Block {\n    constructor (position, width, height, depth, options = {}) {\n        this._position = position;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.options = options;\n        this.type = options.type || 'wall';\n        this._walls = options.walls || {};\n        this.collidable = options.collidable || true;\n\n        this._computeBodies();\n    }\n\n    set walls (walls) {\n        this._walls = walls;\n        this._computeBodies();\n    }\n\n    get walls () {\n        return this._walls;\n    }\n\n    set position (position) {\n        this._position = position;\n        this._computeBodies();\n    }\n\n    get position () {\n        return this._position;\n    }\n\n    _computeBodies () {\n         // If fully closed block (nothing should be inside it)\n        if (this._walls.top && this._walls.west && this._walls.east && this._walls.south && this._walls.north) {\n            this.bodies = [\n                new Polygon(new Vector2(this.x, this.y), [\n                    new Vector2(0, 0),\n                    new Vector2(this.width, 0),\n                    new Vector2(this.width, this.height),\n                    new Vector2(0, this.height)\n                ])\n            ];\n        }\n\n        const bodies = [];\n\n        if (this._walls.west) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y), [\n                new Vector2(0, 0),\n                new Vector2(this.width, 0),\n                new Vector2(this.width, 2),\n                new Vector2(0, 2)\n            ]));\n        }\n\n        if (this._walls.east) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y + this.height), [\n                new Vector2(0, 0),\n                new Vector2(this.width, 0),\n                new Vector2(this.width, -2),\n                new Vector2(0, -2)\n            ]));\n        }\n\n        if (this._walls.south) {\n            bodies.push(new Polygon(new Vector2(this.x + this.width, this.y), [\n                new Vector2(0, 0),\n                new Vector2(0, this.height),\n                new Vector2(-2, this.height),\n                new Vector2(-2, 0)\n            ]));\n        }\n\n        if (this._walls.north) {\n            bodies.push(new Polygon(new Vector2(this.x, this.y), [\n                new Vector2(0, 0),\n                new Vector2(0, this.height),\n                new Vector2(2, this.height),\n                new Vector2(2, 0)\n            ]));\n        }\n\n        this.bodies = bodies;\n    }\n\n    get x () {\n        return this._position.x;\n    }\n\n    get y () {\n        return this._position.y;\n    }\n\n    get z () {\n        return this._position.z;\n    }\n}\n\nexport default Block;\n","class Light {\n    constructor (x, y, z, color) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n        this.color = color;\n        this.sourcePosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.angle = Math.PI * 2;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n}\n\nexport default Light;\n","class WorldMap {\n    constructor (layers, width, height, depth, blockWidth, blockHeight, blockDepth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.blockWidth = blockWidth;\n        this.blockHeight = blockHeight;\n        this.blockDepth = blockDepth;\n\n        this.lights = [];\n        this.layers = layers;\n        this.name = null;\n    }\n\n    blocks (types) {\n        return this.blocksBetweenIndexes({\n            x: 0, y: 0, z: 0\n        }, {\n            x: this.width - 1,\n            y: this.height - 1,\n            z: this.depth - 1\n        }, types);\n    }\n\n    get totalWidth () {\n        return this.width * this.blockWidth;\n    }\n\n    get totalHeight () {\n        return this.height * this.blockHeight;\n    }\n\n    get totalDepth () {\n        return this.depth * this.blockDepth;\n    }\n\n    indexToPosition (index) {\n        return {\n            x: index.x * this.blockWidth,\n            y: index.y * this.blockHeight,\n            z: index.z * this.blockDepth\n        };\n    }\n\n    positionToIndex (position) {\n        const x = position.x;\n        const y = position.y;\n        const z = position.z;\n\n        const index = {};\n\n        index.x = Math.floor(x / this.blockWidth);\n        index.y = Math.floor(y / this.blockHeight);\n        index.z = Math.floor(z / this.blockDepth);\n\n        return index;\n    }\n\n    randomRespawnPosition () {\n        const respawn = this.respawns[Math.round(Math.random() * (this.respawns.length - 1))];\n        const position = this.indexToPosition(respawn.position);\n\n        return position;\n    }\n\n    blockAtIndex (index) {\n        if (index.z < 0 || index.z >= this.depth) {\n            return null;\n        }\n\n        if (index.y < 0 || index.y >= this.height) {\n            return null;\n        }\n\n        if (index.x < 0 || index.x >= this.width) {\n            return null;\n        }\n\n        return this.layers[index.z][index.y][index.x];\n    }\n\n    blockAtPosition (position) {\n        const indexes = this.positionToIndex(position);\n\n        return this.blockAtIndex(indexes);\n    }\n\n    blocksAtPositions (positions, types = []) {\n        const blocks = [];\n\n        for (const position of positions) {\n            const block = this.blockAtPosition(position);\n\n            if (block && types.indexOf(block.type) !== -1) {\n                blocks.push(block);\n            }\n        }\n\n        return blocks;\n    }\n\n    /**\n     * Get all blocks within two index positions in the map.\n     *\n     * @param {object} start - contains x, y, z index positions for start.\n     * @param {object} end - contains x, y, z index positions for end.\n     *\n     * @returns {array} All blocks within the box\n     */\n    blocksBetweenIndexes (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types = []) {\n        const blocks = [];\n\n        const min = start;\n        const max = end;\n\n        for (let z = 0; z < this.layers.length; z++) {\n            if ((z >= min.z && z <= max.z)) {\n                for (let y = 0; y < this.layers[z].length; y++) {\n                    if ((y >= min.y && y <= max.y)) {\n                        for (let x = 0; x < this.layers[z][y].length; x++) {\n                            if ((x >= min.x && x <= max.x)) {\n                                const index = { x, y, z };\n\n                                const block = this.blockAtIndex(index);\n\n                                if (block && types.indexOf(block.type) !== -1) {\n                                    blocks.push(block);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return blocks;\n    }\n\n    blocksBetweenPositions (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types) {\n        return this.blocksBetweenIndexes(this.positionToIndex(start), this.positionToIndex(end), types);\n    }\n\n    toString () {\n        let finalString = '';\n\n        for (const layer of this.layers) {\n            const layerStrings = [];\n\n            for (const layerRow of layer) {\n                const blocks = layerRow.map(v => v ? v.id : 0);\n\n                layerStrings.push(blocks.join(', '));\n            }\n\n            finalString = finalString.concat(layerStrings.join('\\n'));\n            finalString = finalString.concat('\\n---------------\\n');\n        }\n\n        return finalString;\n    }\n}\n\nexport default WorldMap;\n","import Block from './Block';\nimport Light from './Light';\nimport WorldMap from './WorldMap';\n\nconst _parseBlock = function (rawBlock, blockWidth, blockHeight, blockDepth) {\n    const position = {\n        x: rawBlock.position.x * blockWidth,\n        y: rawBlock.position.y * blockHeight,\n        z: rawBlock.position.z * blockDepth\n    };\n\n    const blockOptions = {\n        walls: rawBlock.walls,\n        type: rawBlock.type,\n        collidable: rawBlock.collidable\n    };\n\n    const block = new Block(position, blockWidth, blockHeight, blockDepth, blockOptions);\n\n    block.collidable = rawBlock.collidable || false;\n\n    return block;\n};\n\nconst _createEmptyLayers = function (mapWidth, mapHeight, mapDepth) {\n    const layers = [];\n\n    for (let z = 0; z < mapDepth; z++) {\n        const layer = [];\n\n        for (let y = 0; y < mapHeight; y++) {\n            const row = [];\n\n            for (let x = 0; x < mapDepth; x++) {\n                row.push(null);\n            }\n\n            layer.push(row);\n        }\n\n        layers.push(layer);\n    }\n\n    return layers;\n};\n\nconst parseLight = function (rawLight, blockWidth, blockHeight, blockDepth) {\n    const rawPosition = rawLight.position;\n    const sourcePosition = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    const position = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    let angle = Math.PI * 2;\n\n    if (rawLight.align === 'west') {\n        sourcePosition.x -= blockWidth / 2;\n    } else if (rawLight.align === 'east') {\n        sourcePosition.x += blockWidth / 2;\n        angle = 180 * (Math.PI / 180);\n    } else if (rawLight.align === 'north') {\n        sourcePosition.y += blockHeight / 2;\n        angle = 90 * (Math.PI / 180);\n    } else if (rawLight.align === 'south') {\n        sourcePosition.y -= blockHeight / 2;\n        angle = 270 * (Math.PI / 180);\n    }\n\n    const light = new Light(position.x, position.y, position.z, rawLight.color);\n\n    light.angle = angle;\n    light.sourcePosition = sourcePosition;\n\n    return light;\n};\n\nconst _parseRawMap = function (rawMap) {\n    // TODO validate map\n    const rawBlocks = rawMap.blocks;\n\n    const blockWidth = rawMap.blockWidth;\n    const blockHeight = rawMap.blockHeight;\n    const blockDepth = rawMap.blockDepth;\n\n    const mapWidth = rawMap.width;\n    const mapHeight = rawMap.height;\n    const mapDepth = rawMap.depth;\n\n    const layers = _createEmptyLayers(mapWidth, mapHeight, mapDepth);\n\n    for (const rawBlock of rawBlocks) {\n        const block = _parseBlock(rawBlock, blockWidth, blockHeight, blockDepth);\n\n        const position = rawBlock.position;\n\n        // TODO check for out of bounds\n        layers[position.z][position.y][position.x] = block;\n    }\n\n    const worldMap = new WorldMap(layers, mapWidth, mapHeight, mapDepth, blockWidth, blockHeight, blockDepth);\n\n    if (rawMap.lights) {\n        for (const rawLight of rawMap.lights) {\n            worldMap.lights.push(parseLight(rawLight, blockWidth, blockHeight, blockDepth));\n        }\n    }\n\n    worldMap.name = rawMap.name;\n    worldMap.respawns = [];\n\n    for (const respawn of rawMap.respawns) {\n        worldMap.respawns.push(respawn);\n    }\n\n    return worldMap;\n};\n\nconst MapParser = {\n    parse: function (rawMap) {\n        return _parseRawMap(rawMap);\n    }\n};\n\nexport default MapParser;\n","import { Polygon } from \"./Polygon\";\nimport { Vector2 } from \"three\";\n\n/**\n * Represents an axis-aligned box, with a width and height.\n * Create a new box, with the specified position, width, and height. If no position\n * is given, the position will be `(0,0)`. If no width or height are given, they will\n * be set to `0`.\n */\nexport class Box {\n    public position: Vector2;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param position A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n     * @param width The width of the box.\n     * @param height The height of the box.\n     */\n    constructor(\n        position = new Vector2(),\n        width: number = 0,\n        height: number = 0\n    ) {\n        this.position = position;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * Returns a polygon whose edges are the same as this box.\n     */\n    toPolygon(): Polygon {\n        const pos = this.position;\n        const w = this.width;\n        const h = this.height;\n\n        return new Polygon(new Vector2(pos.x, pos.y), [\n            new Vector2(),\n            new Vector2(w, 0),\n            new Vector2(w, h),\n            new Vector2(0, h),\n        ]);\n    }\n}\n","import { Vector2 } from \"three\";\n\n/**\n * Calculates which Voronoi region a point is on a line segment.\n * It is assumed that both the line and the point are relative to `(0,0)`\n *\n *            |       (0)      |\n *     (-1)  [S]--------------[E]  (1)\n *            |       (0)      |\n */\nexport class VoronoiRegion {\n    // Constants for Voronoi regions\n    public static LEFT_VORONOI_REGION = -1;\n    public static MIDDLE_VORONOI_REGION = 0;\n    public static RIGHT_VORONOI_REGION = 1;\n\n    private constructor() {}\n\n    /**\n     * @param line The line segment.\n     * @param point The point.\n     * @return {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n     *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n     *          RIGHT_VORONOI_REGION (1) if it is the right region.\n     */\n    public static calculate(line: Vector2, point: Vector2): number {\n        const len2 = line.lengthSq();\n        const dp = point.dot(line);\n\n        // If the point is beyond the start of the line, it is in the\n        // left voronoi region.\n        if (dp < 0) {\n            return VoronoiRegion.LEFT_VORONOI_REGION;\n        } else if (dp > len2) {\n            // If the point is beyond the end of the line, it is in the\n            // right voronoi region.\n\n            return VoronoiRegion.RIGHT_VORONOI_REGION;\n        } else {\n            // Otherwise, it's in the middle one.\n            return VoronoiRegion.MIDDLE_VORONOI_REGION;\n        }\n    }\n}\n","import { Vector2 } from \"three\";\nimport { Polygon } from \"../math/Polygon\";\nimport { Box } from \"../math/Box\";\nimport { Circle } from \"../math/Circle\";\n\n/**\n *\n * An object representing the result of an intersection. Contains:\n *  - The two objects participating in the intersection\n *  - The vector representing the minimum change necessary to extract the first object\n *    from the second one (as well as a unit vector in that direction and the magnitude\n *    of the overlap)\n *  - Whether the first object is entirely inside the second, and vice versa.\n */\nexport class SatResult {\n    public a?: Polygon | Circle | Box = undefined;\n    public b?: Polygon | Circle | Box = undefined;\n    public overlapN: Vector2 = new Vector2();\n    public overlapV: Vector2 = new Vector2();\n    public aInB: boolean = true;\n    public bInA: boolean = true;\n    public overlap: number = Number.MAX_VALUE;\n\n    constructor() {\n        this.clear();\n    }\n\n    /**\n     * Set some values of the response back to their defaults.  Call this between tests if\n     * you are going to reuse a single SatResult object for multiple intersection tests (recommended\n     * as it will avoid allcating extra memory)\n     */\n    clear(): SatResult {\n        this.aInB = true;\n        this.bInA = true;\n        this.overlap = Number.MAX_VALUE;\n\n        return this;\n    }\n}\n","import { Polygon } from \"../math/Polygon\";\nimport { Vector2 } from \"three\";\nimport { ObjectPool } from \"../utils/ObjectPool\";\nimport { Box } from \"../math/Box\";\nimport { Circle } from \"../math/Circle\";\nimport { VoronoiRegion } from \"../math/VornoiRegion\";\nimport { Vector2Helper } from \"../math/Vector2Helper\";\nimport { SatResult } from \"./SatResult\";\n\nconst POINT_POLYGON = new Box(new Vector2(), 0.00001, 0.00001).toPolygon();\n\n/**\n * Determining intersections of circles and\n * polygons using the Separating Axis Theorem.\n *\n * Based on https://github.com/jriecken/sat-js (Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>)\n */\nexport class SeparatingAxisTheorem {\n    private arrayPool: ObjectPool<number[]>;\n    private vectorPool: ObjectPool<Vector2>;\n    private cachedSatResult: SatResult = new SatResult();\n\n    constructor() {\n        this.arrayPool = new ObjectPool<number[]>(() => [], 5, 5, 20);\n        this.vectorPool = new ObjectPool<Vector2>(\n            () => new Vector2(),\n            10,\n            10,\n            40\n        );\n    }\n\n    /**\n     * Flattens the specified array of vertices onto a unit vector axis,\n     * resulting in a one dimensional range of the minimum and\n     * maximum value on that axis.\n     * @param vertices The vertices to flatten.\n     * @param normal The unit vector axis to flatten on.\n     * @param result An array.  After calling this function,\n     *   result[0] will be the minimum value,\n     *   result[1] will be the maximum value.\n     */\n    private static flattenVerticesOn(\n        vertices: Vector2[],\n        normal: Vector2,\n        result: number[]\n    ): void {\n        let min = Number.MAX_VALUE;\n        let max = -Number.MAX_VALUE;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            // The magnitude of the projection of the point onto the normal\n            const dot = vertices[i].dot(normal);\n\n            if (dot < min) {\n                min = dot;\n            }\n            if (dot > max) {\n                max = dot;\n            }\n        }\n\n        result[0] = min;\n        result[1] = max;\n    }\n\n    /**\n     * Check whether two convex polygons are separated by the specified\n     * axis (must be a unit vector).\n     *\n     * @param aPos The position of the first polygon.\n     * @param bPos The position of the second polygon.\n     * @param aPoints The vertices in the first polygon.\n     * @param bPoints The vertices in the second polygon.\n     * @param axis The axis (unit sized) to test against.  The points of both polygons\n     *   will be projected onto this axis.\n     * @param result A SatResult object (optional) which will be populated\n     *   if the axis is not a separating axis.\n     * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n     *   and a response is passed in, information about how much overlap and\n     *   the direction of the overlap will be populated.\n     */\n    private isSeparatingAxis(\n        aPos: Vector2,\n        bPos: Vector2,\n        aPoints: Vector2[],\n        bPoints: Vector2[],\n        axis: Vector2,\n        result?: SatResult\n    ): boolean {\n        const rangeA: number[] = this.arrayPool.get();\n        const rangeB: number[] = this.arrayPool.get();\n\n        // The magnitude of the offset between the two polygons\n        const offsetV = this.vectorPool.get().copy(bPos).sub(aPos);\n        const projectedOffset = offsetV.dot(axis);\n\n        // Project the polygons onto the axis.\n        SeparatingAxisTheorem.flattenVerticesOn(aPoints, axis, rangeA);\n        SeparatingAxisTheorem.flattenVerticesOn(bPoints, axis, rangeB);\n\n        // Move B's range to its position relative to A.\n        rangeB[0] += projectedOffset;\n        rangeB[1] += projectedOffset;\n\n        // Check if there is a gap. If there is, this is a separating axis and we can stop\n        if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n            this.vectorPool.free(offsetV);\n            this.arrayPool.free(rangeA);\n            this.arrayPool.free(rangeB);\n\n            return true;\n        }\n\n        // This is not a separating axis. If we're calculating a result, calculate the overlap.\n        if (result) {\n            let overlap = 0;\n\n            // A starts further left than B\n            if (rangeA[0] < rangeB[0]) {\n                result.aInB = false;\n\n                // A ends before B does. We have to pull A out of B\n                if (rangeA[1] < rangeB[1]) {\n                    overlap = rangeA[1] - rangeB[0];\n                    result.bInA = false;\n                } else {\n                    // B is fully inside A.  Pick the shortest way out.\n                    const option1 = rangeA[1] - rangeB[0];\n                    const option2 = rangeB[1] - rangeA[0];\n\n                    overlap = option1 < option2 ? option1 : -option2;\n                }\n            } else {\n                // B starts further left than A\n                result.bInA = false;\n\n                // B ends before A ends. We have to push A out of B\n                if (rangeA[1] > rangeB[1]) {\n                    overlap = rangeA[0] - rangeB[1];\n                    result.aInB = false;\n\n                    // A is fully inside B.  Pick the shortest way out.\n                } else {\n                    const option1 = rangeA[1] - rangeB[0];\n                    const option2 = rangeB[1] - rangeA[0];\n\n                    overlap = option1 < option2 ? option1 : -option2;\n                }\n            }\n\n            // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n            const absOverlap = Math.abs(overlap);\n\n            if (absOverlap < result.overlap) {\n                result.overlap = absOverlap;\n                result.overlapN.copy(axis);\n                if (overlap < 0) {\n                    result.overlapN.negate();\n                }\n            }\n        }\n\n        this.vectorPool.free(offsetV);\n        this.arrayPool.free(rangeA);\n        this.arrayPool.free(rangeB);\n\n        return false;\n    }\n\n    /**\n     * Check if a polygon and a circle collide.\n     *\n     * @param polygon\n     * @param circle\n     * @param response SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testPolygonInCircle(\n        polygon: Polygon,\n        circle: Circle,\n        response?: SatResult\n    ): boolean {\n        // Get the position of the circle relative to the polygon.\n        const circlePos = this.vectorPool\n            .get()\n            .copy(circle.position)\n            .sub(polygon.position);\n        const radius = circle.radius;\n        const radius2 = radius * radius;\n        const points = polygon.computedVertices;\n        const len = points.length;\n        const edge = this.vectorPool.get();\n        const point = this.vectorPool.get();\n\n        // For each edge in the polygon:\n        for (let i = 0; i < len; i++) {\n            const next = i === len - 1 ? 0 : i + 1;\n            const prev = i === 0 ? len - 1 : i - 1;\n            let overlap = 0;\n            let overlapN: Vector2 | undefined = undefined;\n\n            // Get the edge.\n            edge.copy(polygon.edges[i] as Vector2);\n\n            // Calculate the center of the circle relative to the starting point of the edge.\n            point.copy(circlePos).sub(points[i]);\n\n            // If the distance between the center of the circle and the point\n            // is bigger than the radius, the polygon is definitely not fully in\n            // the circle.\n            if (response && point.lengthSq() > radius2) {\n                response.aInB = false;\n            }\n\n            // Calculate which Voronoi region the center of the circle is in.\n            let region = VoronoiRegion.calculate(edge, point);\n\n            // If it's the left region:\n            if (region === VoronoiRegion.LEFT_VORONOI_REGION) {\n                // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n                edge.copy(polygon.edges[prev]);\n\n                // Calculate the center of the circle relative the starting point of the previous edge\n                const point2 = this.vectorPool\n                    .get()\n                    .copy(circlePos)\n                    .sub(points[prev]);\n\n                region = VoronoiRegion.calculate(edge, point2);\n\n                if (region === VoronoiRegion.RIGHT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    const dist = point.length();\n\n                    if (dist > radius) {\n                        // No intersection\n                        this.vectorPool.free(circlePos);\n                        this.vectorPool.free(edge);\n                        this.vectorPool.free(point);\n                        this.vectorPool.free(point2);\n\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response.bInA = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n\n                this.vectorPool.free(point2);\n\n                // If it's the right region:\n            } else if (region === VoronoiRegion.RIGHT_VORONOI_REGION) {\n                // We need to make sure we're in the left region on the next edge\n                edge.copy(polygon.edges[next]);\n\n                // Calculate the center of the circle relative to the starting point of the next edge.\n                point.copy(circlePos).sub(points[next]);\n                region = VoronoiRegion.calculate(edge, point);\n                if (region === VoronoiRegion.LEFT_VORONOI_REGION) {\n                    // It's in the region we want.  Check if the circle intersects the point.\n                    const dist = point.length();\n\n                    if (dist > radius) {\n                        // No intersection\n                        this.vectorPool.free(circlePos);\n                        this.vectorPool.free(edge);\n                        this.vectorPool.free(point);\n\n                        return false;\n                    } else if (response) {\n                        // It intersects, calculate the overlap.\n                        response.bInA = false;\n                        overlapN = point.normalize();\n                        overlap = radius - dist;\n                    }\n                }\n\n                // Otherwise, it's the middle region:\n            } else {\n                // Need to check if the circle is intersecting the edge,\n                // Change the edge into its \"edge normal\".\n                const normal = Vector2Helper.perp(edge).normalize();\n\n                // Find the perpendicular distance between the center of the\n                // circle and the edge.\n                const dist = point.dot(normal);\n                const distAbs = Math.abs(dist);\n\n                // If the circle is on the outside of the edge, there is no intersection.\n                if (dist > 0 && distAbs > radius) {\n                    // No intersection\n                    this.vectorPool.free(circlePos);\n                    this.vectorPool.free(normal);\n                    this.vectorPool.free(point);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    overlapN = normal;\n                    overlap = radius - dist;\n\n                    // If the center of the circle is on the outside of the edge, or part of the\n                    // circle is on the outside, the circle is not fully inside the polygon.\n                    if (dist >= 0 || overlap < 2 * radius) {\n                        response.bInA = false;\n                    }\n                }\n            }\n\n            // If this is the smallest overlap we've seen, keep it.\n            // (overlapN may be null if the circle was in the wrong Voronoi region).\n            if (\n                overlapN &&\n                response &&\n                Math.abs(overlap) < Math.abs(response.overlap)\n            ) {\n                response.overlap = overlap;\n                response.overlapN.copy(overlapN);\n            }\n        }\n\n        // Calculate the final overlap vector - based on the smallest overlap.\n        if (response) {\n            response.a = polygon;\n            response.b = circle;\n            response.overlapV\n                .copy(response.overlapN)\n                .multiplyScalar(response.overlap);\n        }\n\n        this.vectorPool.free(circlePos);\n        this.vectorPool.free(edge);\n        this.vectorPool.free(point);\n\n        return true;\n    }\n\n    /**\n     * Check if a circle and a polygon collide.\n     *\n     *   **NOTE:** This is slightly less efficient than polygonCircle as it just\n     *   runs polygonCircle and reverses everything at the end.\n     * @param circle\n     * @param polygon\n     * @param response SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testCircleInPolygon(\n        circle: Circle,\n        polygon: Polygon,\n        response?: SatResult\n    ): boolean {\n        // Test the polygon against the circle.\n        const result = this.testPolygonInCircle(polygon, circle, response);\n\n        if (result && response) {\n            // Swap A and B in the response.\n            const a = response.a;\n            const aInB = response.aInB;\n\n            response.overlapN.negate();\n            response.overlapV.negate();\n            response.a = response.b;\n            response.b = a;\n            response.aInB = response.bInA;\n            response.bInA = aInB;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a point is inside a convex polygon.\n     *\n     * @param point\n     * @param polygon\n     * @return {boolean} true if the point is inside the polygon, false if it is not.\n     */\n    public testPointInPolygon(point: Vector2, polygon: Polygon): boolean {\n        POINT_POLYGON.position.copy(point);\n\n        this.cachedSatResult.clear();\n\n        let result = this.testPolygonInPolygon(\n            POINT_POLYGON,\n            polygon,\n            this.cachedSatResult\n        );\n\n        if (result) {\n            result = this.cachedSatResult.aInB;\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks whether polygons collide.\n     *\n     * @param a The first polygon.\n     * @param b The second polygon.\n     * @param result SatResult object (optional) that will be populated if they intersect.\n     * @return {boolean} true if they intersect, false if they don't.\n     */\n    public testPolygonInPolygon(\n        a: Polygon,\n        b: Polygon,\n        result?: SatResult\n    ): boolean {\n        const aPoints = a.computedVertices;\n        const aLen = aPoints.length;\n        const bPoints = b.computedVertices;\n        const bLen = bPoints.length;\n\n        // If any of the edge normals of A is a separating axis, no intersection.\n        for (let i = 0; i < aLen; i++) {\n            if (\n                this.isSeparatingAxis(\n                    a.position,\n                    b.position,\n                    aPoints,\n                    bPoints,\n                    a.normals[i],\n                    result\n                )\n            ) {\n                return false;\n            }\n        }\n\n        // If any of the edge normals of B is a separating axis, no intersection.\n        for (let i = 0; i < bLen; i++) {\n            if (\n                this.isSeparatingAxis(\n                    a.position,\n                    b.position,\n                    aPoints,\n                    bPoints,\n                    b.normals[i],\n                    result\n                )\n            ) {\n                return false;\n            }\n        }\n\n        // Since none of the edge normals of A or B are a separating axis, there is an intersection\n        // and we've already calculated the smallest overlap (in _isSeparatingAxis).  Calculate the\n        // final overlap vector.\n        if (result) {\n            result.a = a;\n            result.b = b;\n            result.overlapV\n                .copy(result.overlapN)\n                .multiplyScalar(result.overlap);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if two circles collide.\n     *\n     * @param a The first circle.\n     * @param b The second circle.\n     * @param response SatResult object (optional) that will be populated if the circles intersect.\n     * @return {boolean} true if the circles intersect, false if they don't.\n     */\n    public testCircleInCircle(\n        a: Circle,\n        b: Circle,\n        response?: SatResult\n    ): boolean {\n        // Check if the distance between the centers of the two\n        // circles is greater than their combined radius.\n        const differenceV = this.vectorPool\n            .get()\n            .copy(b.position)\n            .sub(a.position);\n        const totalRadius = a.radius + b.radius;\n        const totalRadiusSq = totalRadius * totalRadius;\n        const distanceSq = differenceV.lengthSq();\n\n        // If the distance is bigger than the combined radius, they don't intersect.\n        if (distanceSq > totalRadiusSq) {\n            this.vectorPool.free(differenceV);\n\n            return false;\n        }\n\n        // They intersect.  If we're calculating a response, calculate the overlap.\n        if (response) {\n            const dist = Math.sqrt(distanceSq);\n\n            response.a = a;\n            response.b = b;\n            response.overlap = totalRadius - dist;\n            response.overlapN.copy(differenceV.normalize());\n            response.overlapV\n                .copy(differenceV)\n                .multiplyScalar(response.overlap);\n            response.aInB = a.radius <= b.radius && dist <= b.radius - a.radius;\n            response.bInA = b.radius <= a.radius && dist <= a.radius - b.radius;\n        }\n\n        this.vectorPool.free(differenceV);\n\n        return true;\n    }\n\n    /**\n     * Check if a point is inside a circle.\n     * @param point The point to test.\n     * @param circle The circle to test.\n     * @return {boolean} true if the point is inside the circle, false if it is not.\n     */\n    public testPointInCircle(point: Vector2, circle: Circle): boolean {\n        const differenceV = this.vectorPool\n            .get()\n            .copy(point)\n            .sub(circle.position);\n        const radiusSq = circle.radius * circle.radius;\n        const distanceSq = differenceV.lengthSq();\n\n        this.vectorPool.free(differenceV);\n\n        // If the distance between is smaller than the radius then the point is inside the circle.\n        return distanceSq <= radiusSq;\n    }\n}\n","import {SeparatingAxisTheorem} from \"../engine/physics/SeparatingAxisTheorem\";\nimport {SatResult} from \"../engine/physics/SatResult\";\n\nconst sat = new SeparatingAxisTheorem();\n\nconst rayPositions = function (entity, rayDistance) {\n    let x = entity.position.x;\n    let y = entity.position.y;\n    const angle = entity.angle;\n\n    const reverse = entity.reverse ? -1 : 1;\n\n    const start = {};\n    const end = {};\n\n    if (Math.abs(entity.velocity.x) > 0) {\n        x -= rayDistance * Math.cos(angle) * reverse;\n    } else {\n        x -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.x < 0) {\n        start.x = x;\n        end.x = entity.position.x;\n    } else {\n        start.x = entity.position.x;\n        end.x = x;\n    }\n\n    if (Math.abs(entity.velocity.y) > 0) {\n        y -= rayDistance * Math.sin(angle) * reverse;\n    } else {\n        y -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.y < 0) {\n        start.y = y;\n        end.y = entity.position.y;\n    } else {\n        start.y = entity.position.y;\n        end.y = y;\n    }\n\n    start.z = entity.position.z;\n    end.z = entity.position.z;\n\n    return { min: start, max: end };\n};\n\nconst cachedSatResult = new SatResult();\n\nconst CollisionUtils = {\n    wallCollision (map, entity, onCollision) {\n        const rayDistance = (map.blockWidth + map.blockHeight) / 2;\n        const ray = rayPositions(entity, rayDistance);\n\n        if (!(ray.min.x === ray.max.x && ray.min.y === ray.max.y)) {\n            const blocks = map.blocksBetweenPositions(ray.min, ray.max, ['wall']);\n\n            for (const block of blocks) {\n                if (block.collidable) {\n                    const polygons = block.bodies;\n\n                    for (const polygon of polygons) {\n                        cachedSatResult.clear();\n\n                        if (sat.testPolygonInPolygon(entity.body, polygon, cachedSatResult)) {\n                            onCollision(cachedSatResult);\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    floorCollision (map, entity, delta, onCollision = () => {}) {\n        const nextEntityPosition = {\n            x: entity.position.x + (entity.velocity.x * delta),\n            y: entity.position.y + (entity.velocity.y * delta),\n            z: entity.position.z + (entity.velocity.z * delta)\n        };\n\n        const floorBlockIndex = map.positionToIndex(entity.position);\n\n        floorBlockIndex.z -= 1;\n\n        const block = map.blockAtIndex(floorBlockIndex);\n\n        if (block && block.collidable && block.walls.top) {\n            if (nextEntityPosition.z <= block.position.z + block.depth) {\n                onCollision(block);\n            }\n        } else {\n            entity.fall();\n        }\n    }\n};\n\nexport default CollisionUtils;\n","import CollisionUtils from './CollisionUtils';\n\nclass CollisionSystem {\n    constructor (state) {\n        this.state = state;\n        this.entities = state.soldiers;\n        this.map = this.state.map;\n    }\n\n    update (delta) {\n        for (const entity of this.entities) {\n            CollisionUtils.wallCollision(this.map, entity, (response) => {\n                entity.position.x -= response.overlapV.x;\n                entity.position.y -= response.overlapV.y;\n            });\n\n            CollisionUtils.floorCollision(this.map, entity, delta, (block) => {\n                if (block.type === 'water') {\n                    entity.fall();\n                    entity.kill();\n                } else {\n                    entity.position.z = block.position.z + block.depth;\n                    entity.stopFalling();\n                }\n            });\n        }\n    }\n}\n\nexport default CollisionSystem;\n","import { Entity } from \"./Entity\";\nimport { Soldier } from \"./Soldier\";\n\nexport class Bullet extends Entity {\n    public firedBy?: Soldier;\n    public firedByWeapon?: any;\n    private maxDistance: number = 500;\n    private traveledDistance: number = 0;\n\n    constructor(x, y, z, width, height) {\n        super(x, y, z, width, height);\n\n        this.dead = true;\n        this.speed = 0.3;\n\n        this.options.isBullet = true;\n    }\n\n    get damage() {\n        if (this.firedByWeapon) {\n            return this.firedByWeapon.damage;\n        }\n\n        return 0;\n    }\n\n    update(delta) {\n        super.update(delta);\n\n        this.traveledDistance += this.speed * delta;\n\n        if (this.traveledDistance > this.maxDistance) {\n            this.dead = true;\n            this.traveledDistance = 0;\n        } else {\n            this.moveUp();\n        }\n    }\n}\n","import { ObjectPool } from \"../engine/utils/ObjectPool\";\nimport { Bullet } from \"./entities/Bullet\";\nimport CollisionUtils from \"./CollisionUtils\";\nimport { PlayState } from \"../client/play/PlayState\";\nimport { Soldier } from \"./entities/Soldier\";\nimport { SeparatingAxisTheorem } from \"../engine/physics/SeparatingAxisTheorem\";\n\nexport class BulletSystem {\n    private state: PlayState;\n    private readonly soldiers: Set<Soldier>;\n    private readonly map: any;\n    private bulletPool: ObjectPool<Bullet>;\n\n    // Bullets that died last turn\n    public readonly deadBullets: Set<Bullet> = new Set();\n\n    // Bullets currently flying around\n    public readonly activeBullets: Set<Bullet> = new Set();\n    private sat: SeparatingAxisTheorem = new SeparatingAxisTheorem();\n\n    constructor(state: PlayState, poolLimit?: number) {\n        this.state = state;\n        this.soldiers = this.state.soldiers;\n        this.map = this.state.map;\n\n        this.bulletPool = new ObjectPool<Bullet>(\n            (): Bullet => {\n                return new Bullet(0, 0, 0, 4, 10);\n            },\n            10,\n            10,\n            poolLimit || 200\n        );\n    }\n\n    get poolSize() {\n        return this.bulletPool.size;\n    }\n\n    _fireBullet(firedBy) {\n        let bullet = this.bulletPool.get();\n\n        // If the pool is full, reused the first item.\n        if (!bullet) {\n            const firstBullet = this.activeBullets.values().next().value;\n\n            this.bulletPool.free(firstBullet);\n            bullet = this.bulletPool.get();\n        }\n\n        bullet.firedBy = firedBy;\n        bullet.firedByWeapon = firedBy.currentWeapon;\n        bullet.respawn(firedBy.position);\n        bullet.angle = firedBy.angle;\n        this.activeBullets.add(bullet);\n\n        return bullet;\n    }\n\n    killBullet(bullet) {\n        bullet.kill();\n        this.bulletPool.free(bullet());\n    }\n\n    update(delta) {\n        for (const soldier of this.soldiers) {\n            if (soldier.actions.firedBullet) {\n                this._fireBullet(soldier);\n            }\n        }\n\n        for (const bullet of this.activeBullets) {\n            bullet.update(delta);\n            CollisionUtils.wallCollision(this.map, bullet, () => bullet.kill());\n\n            if (bullet.dead) {\n                this.deadBullets.add(bullet);\n                this.activeBullets.delete(bullet);\n                this.bulletPool.free(bullet);\n            } else {\n                for (const soldier of this.soldiers) {\n                    if (!soldier.dead) {\n                        // Can't kill itself\n                        if (bullet.firedBy !== soldier) {\n                            // Check if on same level\n                            if (\n                                bullet.position.z >= soldier.position.z &&\n                                bullet.position.z < soldier.position.z + 50\n                            ) {\n                                if (\n                                    this.sat.testPointInPolygon(\n                                        bullet.point,\n                                        soldier.body\n                                    )\n                                ) {\n                                    soldier.hitByBullet(bullet);\n                                    bullet.kill();\n                                    this.bulletPool.free(bullet);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import { Soldier } from \"../../../core/entities/Soldier\";\nimport { StateInput } from \"../../../engine/state/StateInput\";\n\nexport class ComputerInput implements StateInput {\n    private readonly soldier: Soldier;\n\n    constructor(soldier: Soldier) {\n        this.soldier = soldier;\n    }\n\n    update() {\n        if (Math.random() < 0.05) {\n            this.soldier.fireBullet();\n        }\n\n        if (Math.random() > 0.8) {\n            this.soldier.moveUp();\n        }\n\n        if (Math.random() > 0.7) {\n            if (Math.random() > 0.5) {\n                this.soldier.turnRight();\n            } else {\n                this.soldier.turnLeft();\n            }\n        } else {\n            this.soldier.stopTurning();\n        }\n\n        if (this.soldier.currentWeapon) {\n            if (this.soldier.currentWeapon.magazine === 0) {\n                this.soldier.reload();\n            }\n        }\n    }\n}\n","import {PlayState} from './PlayState';\nimport {ViewBuilder} from './ViewBuilder';\n\nimport Match from '../../core/Match';\nimport {PlayerInput} from './input/PlayerInput';\nimport {UiInput} from './input/UiInput';\nimport {Player} from '../../core/entities/Player';\n\nimport PlayAudio from './PlayAudio';\nimport MapParser from '../../core/maps/MapParser';\nimport AssetManager from '../../engine/AssetManager';\n\nimport {Soldier} from '../../core/entities/Soldier';\nimport CollisionSystem from '../../core/CollisionSystem';\nimport {BulletSystem} from '../../core/BulletSystem';\nimport {ComputerInput} from \"./input/ComputerInput\";\n\n/**\n * Create CPU soldiers.\n *\n * @param {PlayState} state The play state.\n * @param {number} count Number of CPU soldiers.\n *\n * @return {void}\n */\nfunction createCpuSoldiers (state, count) {\n    for (let i = 0; i < count; i++) {\n        const { x, y, z } = state.map.randomRespawnPosition();\n        const soldier = new Soldier(x, y, z, 48, 48, 1, 'american');\n\n        state.addInput(new ComputerInput(soldier));\n\n        state.match.addSoldier(soldier);\n    }\n}\n\n/**\n * Create the player entity and add it to the play state.\n *\n * @param {PlayState} state The play state.\n * @param {string} name Name of the player.\n *\n * @param dead\n * @return {void}\n */\nfunction createPlayer (engine, state, name, dead = false) {\n    const { x, y, z } = state.map.randomRespawnPosition();\n    const player = new Player(x, y, z, 48, 48, 1, 'american');\n    const playerInput = new PlayerInput(engine.inputSources, player);\n\n    state.player = player;\n    state.addInput(playerInput);\n\n    player.kill();\n\n    state.match.addSoldier(player, 'american');\n}\n\n/**\n * Create the views for the play state.\n *\n * @param {PlayState} state The play state.\n *\n * @return {void}\n */\nfunction createViews (state) {\n    state.addView(ViewBuilder.playView(state));\n    state.addView(ViewBuilder.uiView(state));\n}\n\nconst PlayBuilder = {\n    createSingleplayer (engine, options) {\n        const map = MapParser.parse(AssetManager.getMap(options.map));\n        const match = new Match(options.teams);\n        const state = new PlayState(engine, match, map);\n\n        createCpuSoldiers(state, options.cpuCount);\n        createPlayer(engine, state, options.playerName);\n\n        state.bulletSystem = new BulletSystem(state, options.poolLimit || 200);\n\n        state.collisionSystem = new CollisionSystem(state);\n        state.audio = new PlayAudio(state, 'guns', 'background');\n\n        const uiInput = new UiInput(engine.inputSources, state);\n\n        state.addInput(uiInput);\n\n        createViews(state);\n\n        return state;\n    },\n};\n\nexport default PlayBuilder;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\nimport PlayBuilder from '../../play/PlayBuilder';\nimport LogoView from '../../menu/views/LogoView';\n\n/**\n * Create the play state.\n *\n * @param {Engine} engine Game engine.\n * @param {object} options Options for the play state.\n *\n * @return {PlayState} The created play state.\n */\nfunction createPlayState (engine, options) {\n    const playOptions = Object.assign({\n        poolLimit: 200,\n        teams: ['american', 'german'],\n        cpuCount: 7,\n        map: 'level2',\n        playerName: 'unknown soldier'\n    }, options);\n\n    const playState = PlayBuilder.createSingleplayer(engine, playOptions);\n\n    engine.addState('play', playState);\n\n    return playState;\n}\n\n/**\n * Create the menu and add items to it.\n *\n * @param {Engine} engine Game engine instance.\n * @param {MenuState} menuState The menu state.\n *\n * @return {Menu} Menu instance.\n */\nfunction createMenu (engine, menuState) {\n    const menu = new Menu();\n\n    menu.addMenuItem(new MenuItem('createGame', 'Singleplayer', (menuItem) => {\n        let playState = engine.states.get('play');\n\n        if (!playState) {\n            playState = createPlayState(engine, {\n                playerName: menuState.options.get('name')\n            });\n\n            menuItem.text = 'Create game';\n        } else {\n            menuState.gamePlaying = true;\n\n            playState.player.name = menuState.options.get('name');\n            menuItem.text = 'Continue game';\n        }\n\n        playState.resume();\n\n        engine.changeState('play');\n    }));\n\n    menu.addMenuItem(new MenuItem('options', 'Options', () => {\n        menuState.currentMenu = 'options';\n    }));\n\n    menu.addMenuItem(new MenuItem('help', 'Help', () => {\n        menuState.currentMenu = 'help';\n    }));\n\n    return menu;\n}\n\n/**\n * Create the ViewContainer for this menu.\n *\n * @param {Menu} menu Menu instance.\n *\n * @return {ViewContainer} ViewContainer for the menu.\n */\nfunction createView (menu) {\n    const viewContainer = new ViewContainer();\n    const background = new BackgroundView('normandy', 'ui');\n\n    viewContainer.addDynamicView(new MenuItemsView(menu), { x: 500, y: 200, z: 0 });\n    viewContainer.addStaticView(new LogoView('logo', 'ui'), { x: 300, y: 300, z: 0 });\n\n    background.lightness = 0.5;\n    viewContainer.backgroundView = background;\n\n    return viewContainer;\n}\n\nconst MainMenu = {\n    create (engine, menuState) {\n        const menu = createMenu(engine, menuState);\n        const viewContainer = createView(menu);\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default MainMenu;\n","import {AbstractState} from '../AbstractState';\n\nclass MenuState extends AbstractState {\n\n    constructor (engine) {\n        super('menu', engine);\n\n        this.menus = new Map();\n        this._currentMenu = null;\n        this.currentMenuName = null;\n        this.options = new Map([\n            ['name', 'Unknown Soldier'],\n        ]);\n        this.gamePlaying = false;\n        this.currentOptionsEdit = null;\n    }\n\n\n    addMenu (name, menu) {\n        this.menus.set(name, menu);\n    }\n\n    changeOption (optionName, value) {\n        this.options.set(optionName, value);\n    }\n\n    set currentMenu (name) {\n        this._currentMenu = this.menus.get(name);\n\n        if (!this._currentMenu) {\n            throw new Error('Menu \"' + name + '\" does not exist');\n        }\n\n        this.currentMenuName = name;\n    }\n\n    get currentMenu () {\n        return this._currentMenu;\n    }\n\n    init () {\n        super.init();\n    }\n\n    update (delta) {\n        super.updateInputs(delta);\n\n        super.updateAudio(delta);\n    }\n}\n\nexport default MenuState;\n","import MenuInput from './MenuInput';\nimport {MenuRenderView} from './views/MenuRenderView';\nimport MenuAudio from './MenuAudio';\nimport OptionsMenu from './menus/OptionsMenu';\nimport HelpMenu from './menus/HelpMenu';\nimport MainMenu from './menus/MainMenu';\nimport MenuState from './MenuState';\n\nconst MenuBuilder = {\n    create (engine) {\n        const state = new MenuState(engine);\n        const menuInput = new MenuInput(engine.inputSources, state);\n\n        state.addInput(menuInput);\n\n        const subMenus = new Map([\n            ['main', MainMenu.create(engine, state)],\n            ['options', OptionsMenu.create(state)],\n            ['help', HelpMenu.create(state)]\n        ]);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            state.addMenu(subMenuName, subMenu.menu);\n        }\n\n        const menuView = new MenuRenderView(state);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            menuView.addViewContainer(subMenuName, subMenu.viewContainer);\n        }\n\n        menuView.currentViewContainer = 'main';\n        state.addView(menuView);\n\n        state.currentMenu = 'main';\n        state.audio = new MenuAudio(state, 'menu_effects', 'background');\n\n        return state;\n    }\n};\n\nexport default MenuBuilder;\n","/**\n * Copyright 2014 Christopher Dolphin. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author dolphin@likethemammal.com (Chris Dolphin)\n */\n\n/**\n * GamepadMicro provides an easy interface to the Gamepad API.\n *\n * @constructor\n */\nfunction GamepadMicro () {\n    this._buttonNames = [\n        'actionSouth',\n        'actionEast',\n        'actionWest',\n        'actionNorth',\n        'leftBumper',\n        'rightBumper',\n        'leftTrigger',\n        'rightTrigger',\n        'select',\n        'start',\n        'leftStick',\n        'rightStick',\n        'dPadUp',\n        'dPadDown',\n        'dPadLeft',\n        'dPadRight',\n        'extra'\n    ];\n\n    this.reset();\n}\n\nGamepadMicro.prototype.reset = function () {\n    this._ticking = false;\n    this._prevTimestamps = [];\n    this._connectionListening = false;\n    this._updateCallback = function () {};\n    this._prevRawGamepadTypes = [];\n    this.gamepadconnected = _getRawGamepads.length > 0;\n    this.gamepadConnected = Boolean(this.gamepadconnected);\n    this.gamepadSupported = Boolean(_gamepadSupported());\n    this.gamepads = [];\n    this._heldButtonDelay = 200;\n    this._heldTimestampByGamepad = {};\n};\n\nconst _newGamepad = function () {\n    return {\n        leftStick: { x: 0, y: 0 },\n        rightStick: { x: 0, y: 0 },\n        dPad: { x: 0, y: 0 },\n        buttons: {},\n        _pressed: {},\n        timestamp: 0\n    };\n};\n\nGamepadMicro.prototype.onUpdate = function (callback) {\n    this._updateCallback = callback;\n    this._checkForEvents();\n    this._setupPoll();\n};\n\nGamepadMicro.prototype.offUpdate = function () {\n    this._shouldRemoveEvents();\n    this._removePoll();\n};\n\nGamepadMicro.prototype.update = function () {\n    this._updateCallback(this.gamepads);\n};\n\nGamepadMicro.prototype._checkForEvents = function () {\n    if (!this._connectionListening) {\n        window.addEventListener('gamepadconnected', this._onGamepadConnected.bind(this), false);\n        window.addEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this), false);\n        this._connectionListening = true;\n    }\n};\n\nGamepadMicro.prototype._shouldRemoveEvents = function () {\n    if (this._connectionListening) {\n        window.removeEventListener('gamepadconnected', this._onGamepadConnected.bind(this));\n        window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this));\n        this._connectionListening = false;\n    }\n};\n\nGamepadMicro.prototype._onGamepadConnected = function (event) {\n    const gamepad = event.gamepad;\n\n    if (gamepad.mapping === 'standard') {\n        this.gamepads[gamepad.index] = _newGamepad();\n        this.gamepadconnected = true;\n\n        this.update();\n    }\n};\n\nGamepadMicro.prototype._onGamepadDisconnected = function (event) {\n    const disconnectedGamepad = event.gamepad;\n    const gamepads = this.gamepads;\n\n    gamepads.forEach(function (gamepad, index) {\n        if (index === disconnectedGamepad.index) {\n            gamepads.splice(index, 1);\n        }\n    });\n\n    if (!gamepads.length) {\n        this.gamepadconnected = false;\n    }\n\n    this.update();\n};\n\nconst _getRawGamepads = function () {\n    const gamepads = (navigator.getGamepads && navigator.getGamepads()) || (navigator.webkitGetGamepads && navigator.webkitGetGamepads());\n    const standardGamepads = [];\n\n    if (gamepads) {\n        for (let i = 0, len = gamepads.length; i < len; i++) {\n            const gp = gamepads[i];\n\n            if (gp && gp.mapping === 'standard') {\n                standardGamepads.push(gp);\n            }\n        }\n    }\n\n    return standardGamepads;\n};\n\nconst _buttonPressed = function (gamepad, index) {\n    if (!gamepad || !gamepad.buttons || index >= gamepad.buttons.length) {\n        return false;\n    }\n\n    const b = gamepad.buttons[index];\n    let pressure = null;\n\n    if (!b) {\n        return false;\n    }\n\n    pressure = b;\n\n    if (typeof b === 'object') {\n        pressure = b.value;\n    }\n\n    return (pressure === 1.0);\n};\n\nGamepadMicro.prototype._checkForGamepadChange = function () {\n    const rawGamepads = _getRawGamepads();\n    let changed = false;\n    const changedRawGamepads = {};\n    let gamepadIndex = 0;\n\n    for (let i = 0; i < rawGamepads.length; i++) {\n        const gamepad = rawGamepads[i];\n        let heldTimestamps = null;\n        let hasBeenHeld = null;\n\n        if (!gamepad.timestamp) {\n            continue;\n        }\n\n        gamepadIndex = gamepad.index;\n\n        // Browsers don't update the gamepad timestamp if a button remains held.\n        // This is a manual check to see if any button has been held. Since the\n        // browser would tell us if it released, we'll assume some button is\n        // still held and announce it's continued heldness.\n        heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n        hasBeenHeld = Object.keys(heldTimestamps).length === 0;\n\n        // Don’t do anything if the current timestamp is the same as previous\n        // one, which means that the state of the gamepad hasn’t changed.\n        // This is only supported by Chrome right now, so the first check\n        // makes sure we’re not doing anything if the timestamps are empty\n        // or undefined.\n\n        if (gamepad.timestamp === this._prevTimestamps[gamepadIndex] && hasBeenHeld) {\n            continue;\n        }\n\n        this._prevTimestamps[gamepadIndex] = gamepad.timestamp;\n        changedRawGamepads[gamepadIndex] = gamepad;\n        changed = true;\n    }\n\n    return (changed) ? changedRawGamepads : false;\n};\n\nGamepadMicro.prototype._poll = function () {\n    const rawGamepads = this._checkForGamepadChange();\n\n    if (!rawGamepads) {\n        return;\n    }\n\n    this.gamepadconnected = true;\n    this.gamepadConnected = true;\n    this.gamepadSupported = true;\n\n    const currentGamepads = this.gamepads;\n    const buttonNames = this._buttonNames;\n\n    Object.keys(rawGamepads).map((gamepadIndex) => {\n        const currentRawGamepad = rawGamepads[gamepadIndex];\n\n        if (!currentRawGamepad) {\n            return;\n        }\n\n        // Gamepad(s) has changed\n        if (typeof currentRawGamepad !== this._prevRawGamepadTypes[gamepadIndex]) {\n            this._prevRawGamepadTypes[gamepadIndex] = typeof currentGamepad;\n        }\n\n        const activeButtons = {};\n        const currentGamepad = currentGamepads[gamepadIndex] || _newGamepad();\n        const heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n\n        for (let k = 0, len = buttonNames.length; k < len; k++) {\n            const name = buttonNames[k];\n            const heldTimestamp = heldTimestamps[name];\n            let isSameTimestamp = null;\n            const wasDown = Boolean(currentGamepad._pressed[name]);\n            const isDown = currentGamepad._pressed[name] = _buttonPressed(currentRawGamepad, k);\n            const now = Date.now();\n\n            if (wasDown && !isDown) {\n                activeButtons[name] = {\n                    released: true,\n                    held: false\n                };\n\n                if (heldTimestamps) {\n                    delete heldTimestamps[name];\n                }\n            } else if (isDown) {\n                if (heldTimestamp) {\n                    isSameTimestamp = heldTimestamp.gamepadTimestamp === currentRawGamepad.timestamp;\n\n                    // If the gamepad timestamp hasn't changed and the time is after the held delay\n                    if ((isSameTimestamp && now > heldTimestamp.browserTimestamp + this._heldButtonDelay) || (currentRawGamepad.timestamp > heldTimestamp.gamepadTimestamp + this._heldButtonDelay)) {\n                        activeButtons[name] = {\n                            held: true\n                        };\n                    }\n                } else {\n                    heldTimestamps[name] = {\n\n                        // Gamepad Timestamps are HighResTimeStamps relative when gamepad was connected\n                        gamepadTimestamp: currentRawGamepad.timestamp,\n                        browserTimestamp: now\n                    };\n                }\n            }\n        }\n\n        this._heldTimestampByGamepad[gamepadIndex] = heldTimestamps;\n\n        currentGamepad.timestamp = currentRawGamepad.timestamp;\n        currentGamepad.buttons = activeButtons;\n\n        // update the sticks\n        currentGamepad.leftStick.x = currentRawGamepad.axes[0];\n        currentGamepad.leftStick.y = currentRawGamepad.axes[1];\n        currentGamepad.rightStick.x = currentRawGamepad.axes[2];\n        currentGamepad.rightStick.y = currentRawGamepad.axes[3];\n\n        // dpad isn't a true stick, infer from buttons\n        currentGamepad.dPad.x = (currentGamepad.buttons.dPadLeft ? -1 : 0) + (currentGamepad.buttons.dPadRight ? 1 : 0);\n        currentGamepad.dPad.y = (currentGamepad.buttons.dPadUp ? -1 : 0) + (currentGamepad.buttons.dPadDown ? 1 : 0);\n\n        this.gamepads[gamepadIndex] = currentGamepad;\n    });\n\n    this.update();\n};\n\nGamepadMicro.prototype._setupPoll = function () {\n    if (!this._ticking) {\n        this._ticking = true;\n        this._tick();\n    }\n};\n\nGamepadMicro.prototype._tick = function () {\n    const tickFunc = GamepadMicro.prototype._tick.bind(this);\n\n    this._poll();\n\n    if (this._ticking) {\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(tickFunc);\n        } else if (window.mozRequestAnimationFrame) {\n            window.mozRequestAnimationFrame(tickFunc);\n        } else if (window.webkitRequestAnimationFrame) {\n            window.webkitRequestAnimationFrame(tickFunc);\n        }\n    }\n};\n\nGamepadMicro.prototype._removePoll = function () {\n    this._ticking = false;\n};\n\nconst _gamepadSupported = function () {\n    return navigator.getGamepads ||\n        Boolean(navigator.webkitGetGamepads) ||\n        Boolean(navigator.webkitGamepads);\n};\n\nexport default GamepadMicro;\n","import GamepadMicro from \"./utils/gamepad-micro\";\n\nexport class Gamepad {\n    private readonly gp: any;\n    private gamepad: any;\n    private readonly _previousGamepadStick: {};\n    private readonly _previousGamepadButton: {};\n    public readonly gamepadIndex: number;\n\n    constructor() {\n        this._previousGamepadStick = {};\n        this._previousGamepadButton = {};\n        this.gamepadIndex = 0;\n        this.gp = new GamepadMicro();\n\n        this.gp.onUpdate((gamepads: []) => {\n            this.gamepad = gamepads[this.gamepadIndex];\n\n            if (this.gp.gamepadsconnected) {\n            } else {\n            }\n        });\n    }\n\n    isDown(button) {\n        if (\n            this.gamepad?.buttons[button] &&\n            this.gamepad?.buttons[button].held\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    isStickDown(stick, direction) {\n        const gamepad = this.gamepad;\n\n        if (gamepad) {\n            if (stick === \"right\" && gamepad.rightStick) {\n                if (direction === \"right\") {\n                    if (gamepad.rightStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === \"left\") {\n                    if (gamepad.rightStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"up\") {\n                    if (gamepad.rightStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"down\") {\n                    if (gamepad.rightStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n\n            if (stick === \"left\" && gamepad.leftStick) {\n                if (direction === \"right\") {\n                    if (gamepad.leftStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === \"left\") {\n                    if (gamepad.leftStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"up\") {\n                    if (gamepad.leftStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === \"down\") {\n                    if (gamepad.leftStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    gamepadStickDownOnce(stick, direction) {\n        if (\n            !this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)\n        ) {\n            this._previousGamepadStick[stick + direction] = true;\n        } else if (\n            this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)\n        ) {\n            this._previousGamepadStick[stick + direction] = false;\n        }\n    }\n\n    gamepadButtonDownOnce(button) {\n        if (!this._previousGamepadButton[button] && !this.isDown(button)) {\n            this._previousGamepadButton[button] = true;\n        } else if (\n            this._previousGamepadButton[button] &&\n            !this.isDown(button)\n        ) {\n            this._previousGamepadButton[button] = false;\n        }\n    }\n}\n\nexport default Gamepad;\n","import { InputSourceInterface } from \"./InputSourceInterface\";\n\nimport Gamepad from \"./Gamepad\";\n\nexport class GamepadInputSource implements InputSourceInterface {\n    public readonly gamepad: Gamepad;\n\n    constructor() {\n        this.gamepad = new Gamepad();\n    }\n}\n","import { WebGLRenderer } from \"three\";\nimport { RendererInterface } from \"./RendererInterface\";\nimport { AbstractState } from \"../../client/AbstractState\";\nimport { ThreeRenderView } from \"./render-view/ThreeRenderView\";\n\nexport interface ThreeRendererOptions {\n    /**\n     * id of the html div to render into.\n     */\n    div: string;\n\n    width: number;\n    height: number;\n}\n\nexport class ThreeRenderer implements RendererInterface {\n    private _views?: Set<ThreeRenderView>;\n    protected webglRenderer: WebGLRenderer;\n\n    constructor(private options: ThreeRendererOptions) {\n        this.webglRenderer = new WebGLRenderer();\n\n        this.webglRenderer.setSize(options.width, options.height);\n        this.webglRenderer.setClearColor(0x000000);\n        this.webglRenderer.setPixelRatio(window.devicePixelRatio);\n        this.webglRenderer.autoClear = false;\n\n        (document.getElementById(options.div) as HTMLDivElement).appendChild(\n            this.webglRenderer.domElement\n        );\n    }\n\n    set views(views) {\n        this._views = views;\n\n        if (!views) {\n            return;\n        }\n\n        let index = 0;\n\n        for (const view of views) {\n            if (index === 0) {\n                // Get the clear color from the first view\n                this.webglRenderer.setClearColor(view.clearColor);\n            }\n\n            view.changeSize({\n                width: this.options.width,\n                height: this.options.height,\n            });\n\n            index += 1;\n        }\n    }\n\n    handleStateChange(state: AbstractState): void {\n        const views = state.views;\n\n        if (views.size > 0) {\n            this.views = views;\n        }\n    }\n\n    get views() {\n        return this._views;\n    }\n\n    preRender(): void {}\n\n    postRender(): void {}\n\n    render(interpolationPercentage: number): void {\n        this.webglRenderer.clear();\n\n        let index = 0;\n\n        const views = this._views;\n\n        if (!views) {\n            return;\n        }\n\n        for (const view of views) {\n            if (index > 0) {\n                this.webglRenderer.clearDepth();\n            }\n\n            this.webglRenderer.render(view.scene, view.getCamera());\n\n            index += 1;\n        }\n    }\n}\n","import DebugStats from './statsjs';\n\nconst _rendererStats = function () {\n    const container = document.createElement('div');\n\n    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n    const msDiv = document.createElement('div');\n\n    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#200;';\n    container.appendChild(msDiv);\n\n    const msText = document.createElement('div');\n\n    msText.style.cssText = 'color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n    msText.innerHTML = 'WebGLRenderer';\n    msDiv.appendChild(msText);\n\n    const msTexts = [];\n    const nLines = 9;\n\n    for (let i = 0; i < nLines; i++) {\n        msTexts[i] = document.createElement('div');\n        msTexts[i].style.cssText = 'color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        msDiv.appendChild(msTexts[i]);\n        msTexts[i].innerHTML = '-';\n    }\n\n    let lastTime = Date.now();\n\n    return {\n        domElement: container,\n\n        update: function (info) {\n            // refresh only 30time per second\n            if (Date.now() - lastTime < 1000 / 30) {\n                return;\n            }\n\n            lastTime = Date.now();\n\n            let i = 0;\n\n            if (info) {\n                msTexts[i++].textContent = '== Memory =====';\n                msTexts[i++].textContent = 'Programs: ' + info.memory.programs;\n                msTexts[i++].textContent = 'Geometries: ' + info.memory.geometries;\n                msTexts[i++].textContent = 'Textures: ' + info.memory.textures;\n\n                msTexts[i++].textContent = '== Render =====';\n                msTexts[i++].textContent = 'Calls: ' + info.render.calls;\n                msTexts[i++].textContent = 'Vertices: ' + info.render.vertices;\n                msTexts[i++].textContent = 'Faces: ' + info.render.faces;\n                msTexts[i++].textContent = 'Points: ' + info.render.points;\n            }\n        }\n    };\n};\n\nexport default class RenderDebug {\n    constructor (renderer) {\n        this.renderer = renderer;\n    }\n\n    init () {\n        this.statjs = new DebugStats();\n        this.statjs.setModes([0, 1, 2]);\n\n        // Stats.js\n        this.statjs.domElement.style.position = 'absolute';\n        this.statjs.domElement.style.right = '81px';\n        this.statjs.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.statjs.domElement);\n\n        this.rendererStats = _rendererStats();\n\n        // renderer-stats.js\n        this.rendererStats.domElement.style.position = 'absolute';\n\n        this.rendererStats.domElement.style.right = '0px';\n        this.rendererStats.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.rendererStats.domElement);\n    }\n\n    before () {\n        this.statjs.begin();\n    }\n\n    after () {\n        this.statjs.end();\n        this.rendererStats.update(this.renderer.info);\n    }\n}\n","import { ThreeRenderer, ThreeRendererOptions } from \"./ThreeRenderer\";\nimport RenderDebug from \"../utils/debug/RenderDebug\";\nimport { WebGLProgram } from \"three\";\n\nexport class DebugThreeRenderer extends ThreeRenderer {\n    private info: {} = {};\n    private readonly renderDebug: RenderDebug;\n\n    constructor(options: ThreeRendererOptions) {\n        super(options);\n\n        this.renderDebug = new RenderDebug(this);\n        this.renderDebug.init();\n    }\n\n    render(interpolationPercentage) {\n        this.webglRenderer.clear();\n\n        const info = {\n            memory: {\n                programs: 0,\n                geometries: 0,\n                textures: 0,\n            },\n            render: {\n                calls: 0,\n                vertices: 0,\n                faces: 0,\n                points: 0,\n            },\n        };\n\n        let index = 0;\n\n        if (this.views) {\n            for (const view of this.views) {\n                if (index > 0) {\n                    this.webglRenderer.clearDepth();\n                }\n\n                this.webglRenderer.render(view.scene, view.getCamera());\n\n                const programs: WebGLProgram[] = this.webglRenderer.info\n                    .programs as unknown as WebGLProgram[];\n\n                info.memory.programs += programs.length;\n                info.memory.geometries +=\n                    this.webglRenderer.info.memory.geometries;\n                info.memory.textures += this.webglRenderer.info.memory.textures;\n                info.render.calls += this.webglRenderer.info.render.calls;\n                info.render.vertices += this.webglRenderer.info.render.vertices;\n                info.render.faces += this.webglRenderer.info.render.faces;\n                info.render.points += this.webglRenderer.info.render.points;\n\n                index += 1;\n            }\n        }\n\n        this.info = info;\n    }\n\n    preRender(): void {\n        this.renderDebug.before();\n    }\n\n    postRender(): void {\n        this.renderDebug.after();\n    }\n}\n","import { AbstractState } from \"../../client/AbstractState\";\nimport { Engine } from \"../Engine\";\n\nexport class NullState extends AbstractState {\n    constructor(engine: Engine) {\n        super(\"null\", engine);\n    }\n\n    update() {}\n}\n","import Mainloop from \"@arjanfrans/mainloop\";\nimport { AbstractState } from \"../client/AbstractState\";\nimport { NullState } from \"./state/NullState\";\nimport { InputSourceInterface } from \"./input/InputSourceInterface\";\nimport { RendererInterface } from \"./renderer/RendererInterface\";\nimport { EngineInterface } from \"./EngineInterface\";\n\nexport interface EngineOptions {\n    renderer: RendererInterface;\n    input: { [key: string]: InputSourceInterface };\n}\n\nexport class Engine implements EngineInterface {\n    private states: Map<string, AbstractState> = new Map();\n    private currentState: AbstractState;\n    private readonly renderer: RendererInterface;\n    public readonly inputSources: Map<string, InputSourceInterface> = new Map();\n\n    constructor(options: EngineOptions) {\n        this.currentState = new NullState(this);\n        this.renderer = options.renderer;\n\n        for (const [key, inputSource] of Object.entries(options.input)) {\n            this.inputSources.set(key, inputSource);\n        }\n    }\n\n    /**\n     * Add a State to the engine.\n     *\n     * @param {string} name - Name of the state.\n     * @param {AbstractState} state - Instance of the state.\n     *\n     * @returns {void}\n     */\n    addState(name, state) {\n        this.states.set(name, state);\n    }\n\n    /**\n     * Change the current state and change the renderer's view to the view of the state.\n     *\n     * @param {string} name - Name of the state to change to.\n     *\n     * @returns {void}\n     */\n    changeState(name) {\n        const state = this.states.get(name);\n\n        if (!state) {\n            throw new Error(`State ${name} not found.`);\n        }\n\n        this.currentState = state;\n        this.currentState.init();\n\n        this.renderer.handleStateChange(this.currentState);\n    }\n\n    /**\n     * Remove a state from the engine.\n     *\n     * @param {string} name - Name of the state to remove.\n     *\n     * @returns {void}\n     */\n    removeState(name) {\n        this.states.delete(name);\n    }\n\n    /**\n     * The game loop. Updates the current state and renders it's Views.\n     *\n     * @returns {void}\n     */\n    run() {\n        const render = (interpolationPercentage) => {\n            this.currentState.render(interpolationPercentage);\n            this.renderer.render(interpolationPercentage);\n        };\n\n        const update = (delta) => {\n            if (this.currentState) {\n                this.currentState.update(delta);\n            } else {\n                console.warn(\"no current State\");\n            }\n        };\n\n        const before = () => {\n            this.renderer.preRender();\n        };\n\n        const after = () => {\n            this.renderer.postRender();\n        };\n\n        const loop = new Mainloop();\n\n        loop.setUpdate(update);\n        loop.setDraw(render);\n        loop.setBegin(before);\n        loop.setEnd(after);\n\n        loop.start();\n    }\n}\n","import { Game } from \"./client/Game\";\n\nnew Game().start();\n"],"sourceRoot":""}