{"version":3,"sources":["engine/AssetManager.js","engine/graphics/Renderer.js","client/Game.js","engine/utils/debug/statsjs.js","engine/utils/mainloop.js","engine/input/Keyboard.js","engine/input/utils/gamepad-micro.js","engine/input/Gamepad.js","engine/input/HumanInput.js","client/menu/MenuInput.js","engine/graphics/RenderView.js","client/menu/views/MenuRenderView.js","client/StateAudio.js","client/menu/MenuAudio.js","engine/menu-system/Menu.js","engine/menu-system/MenuItem.js","engine/menu-system/MenuInputItem.js","engine/graphics/TextureAtlas.js","engine/graphics/TextureManager.js","engine/graphics/TextureFrame.js","engine/graphics/View.js","engine/graphics/BackgroundView.js","engine/graphics/ViewContainer.js","engine/graphics/Animation.js","engine/three-bmfont-text/lib/utils.js","engine/three-bmfont-text/lib/layout-bmfont-text.js","engine/three-bmfont-text/index.js","engine/three-bmfont-text/lib/vertices.js","engine/graphics/TextView.js","client/menu/views/LogoView.js","client/menu/views/MenuItemsView.js","client/menu/menus/OptionsMenu.js","client/State.js","client/play/PlayState.js","client/play/ui/StatsRenderView.js","client/play/ui/AmmoView.js","client/play/ui/HealthView.js","client/play/ui/WeaponView.js","client/play/ui/ScoreView.js","engine/ObjectPool.js","client/play/views/BulletView.js","client/play/views/BulletSystemView.js","client/play/views/world/WaterBlocksView.js","client/play/views/world/StaticBlocksView.js","client/play/views/lights/LightView.js","client/play/views/WorldMapView.js","client/play/views/SoldierView.js","client/play/views/SoldierViewPool.js","client/play/views/PlayRenderView.js","client/play/ViewBuilder.js","core/Match.js","client/play/input/PlayerInput.js","client/play/input/UiInput.js","client/play/input/ComputerInput.js","engine/collision/Vector.js","engine/collision/SAT.js","engine/collision/Polygon.js","core/entities/Entity.js","core/entities/Character.js","core/weapons/Gun.js","core/weapons/WeaponFactory.js","core/entities/Soldier.js","core/entities/Player.js","client/play/PlayAudio.js","core/maps/Block.js","core/maps/Light.js","core/maps/WorldMap.js","core/maps/MapParser.js","engine/collision/Box.js","engine/collision/Response.js","core/CollisionUtils.js","core/CollisionSystem.js","core/entities/Bullet.js","core/BulletSystem.js","client/play/PlayBuilder.js","client/menu/menus/MultiplayerMenu.js","client/menu/menus/HelpMenu.js","client/menu/menus/MainMenu.js","client/menu/MenuState.js","client/menu/MenuBuilder.js","engine/utils/debug/RenderDebug.js","engine/Engine.js","index.ts"],"names":["_assets","atlases","Map","textures","maps","fonts","audio","_loadAudioSprite","audioSpritePath","name","_loadJson","then","spriteJson","src","urls","fullSources","push","Promise","resolve","reject","onload","onloaderror","soundId","err","sound","Howler","Howl","mapping","set","_loadHowlerAudio","_loadFont","fontsPath","font","pages","fontJson","pageTextures","map","pageName","_loadTexture","all","page","get","url","_textureLoader","load","texture","progress","console","log","loaded","total","fileLoader","response","_loadXhr","JSON","parse","_loadAtlas","atlasesPath","atlas","meta","image","_loadMap","mapsPath","AssetLoader","init","assetConfig","TextureLoader","FileLoader","assetsToLoad","paths","textureAtlases","atlasName","mapName","fontName","audioSpriteName","getTexture","Error","cloneTexture","clone","this","needsUpdate","getMap","getAtlasMapping","getFont","getAudioSprite","audioSprite","Renderer","divName","_views","_THREErenderer","WebGLRenderer","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","autoClear","document","getElementById","appendChild","domElement","views","index","view","clearColor","size","width","height","clear","info","memory","programs","geometries","render","calls","vertices","faces","points","clearDepth","scene","camera","length","ASSET_PATH","path","__dirname","ASSET_CONFIG","Game","start","AssetManager","engine","Engine","debugMode","menuState","MenuBuilder","create","addState","changeState","run","catch","Stats","now","global","performance","bind","Date","startTime","prevTime","frames","modes","createElement","tag","id","css","element","style","cssText","createPanel","fg","bg","div","text","innerHTML","toUpperCase","graph","i","setModes","values","children","container","indexOf","display","updateGraph","dom","value","firstChild","Math","min","fps","fpsMin","Number","POSITIVE_INFINITY","fpsMax","fpsDiv","fpsText","fpsGraph","ms","msMin","msMax","msDiv","msText","msGraph","mem","memMin","memMax","memDiv","memText","memGraph","REVISION","setMode","begin","end","time","max","textContent","round","heapSize","usedJSHeapSize","heapSizeLimit","jsHeapSizeLimit","update","simulationTimestep","frameDelta","lastFrameTimeMs","lastFpsUpdate","framesThisSecond","numUpdateSteps","minFrameDelay","running","started","panic","requestAnimationFrame","lastTimestamp","callback","timeout","setTimeout","cancelAnimationFrame","clearTimeout","NOOP","draw","rafHandle","animate","timestamp","getSimulationTimestep","setSimulationTimestep","timestep","getFPS","getMaxAllowedFPS","setMaxAllowedFPS","Infinity","stop","resetFrameDelta","oldFrameDelta","setBegin","fun","setUpdate","setDraw","setEnd","isRunning","specialKeys","'","specialKeysShift","_","numberKeys","0","1","2","3","4","5","6","7","8","9","letterKeys","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","keys","BACKSPACE","CTRL","SPACE","ENTER","SHIFT","ESC","TAB","LEFT","UP","RIGHT","DOWN","Object","key","shiftKeys","shiftKey","codes","codesShift","Keyboard","_pressed","shiftDown","lastPressed","lastPressedIsChar","charKeys","concat","charCodes","charKey","lastPressedChar","toLowerCase","isDown","keyCode","onKeydown","event","onKeyup","keyByCode","code","pressed","letterCodes","addEventListener","preventDefault","stopPropagation","GamepadMicro","_buttonNames","reset","prototype","_ticking","_prevTimestamps","_connectionListening","_updateCallback","_prevRawGamepadTypes","gamepadconnected","_getRawGamepads","gamepadConnected","Boolean","gamepadSupported","_gamepadSupported","gamepads","_heldButtonDelay","_heldTimestampByGamepad","onUpdate","_checkForEvents","_setupPoll","offUpdate","_shouldRemoveEvents","_removePoll","_onGamepadConnected","_onGamepadDisconnected","removeEventListener","gamepad","leftStick","x","y","rightStick","dPad","buttons","disconnectedGamepad","forEach","splice","navigator","getGamepads","webkitGetGamepads","standardGamepads","len","gp","_buttonPressed","b","pressure","_checkForGamepadChange","rawGamepads","changed","changedRawGamepads","gamepadIndex","heldTimestamps","hasBeenHeld","_poll","currentGamepads","buttonNames","currentRawGamepad","currentGamepad","activeButtons","k","heldTimestamp","wasDown","released","held","gamepadTimestamp","browserTimestamp","axes","dPadLeft","dPadRight","dPadUp","dPadDown","_tick","tickFunc","mozRequestAnimationFrame","webkitRequestAnimationFrame","webkitGamepads","_gp","_gamepads","Gamepad","button","isStickDown","stick","direction","gamepadsConnected","HumanInput","_previousKeyboardKeys","_previousGamepadStick","_previousGamepadButton","MenuInput","state","selectedItem","currentMenu","isEditing","keyboardDownOnce","moveUp","moveDown","editable","slice","gamepadButtonDownOnce","selectCurrentItem","RenderView","_initialized","viewContainers","_currentViewContainer","currentViewContainerName","Scene","entries","viewContainer","add","mesh","visible","delta","warn","aspect","updateProjectionMatrix","newViewContainer","MenuRenderView","menu","menus","OrthographicCamera","currentMenuName","currentViewContainer","StateAudio","effectsSpriteName","backgroundSpriteName","effects","backgrounds","MenuAudio","play","Menu","menuItems","menuItemKeys","selectedItemIndex","freeze","menuItem","action","MenuItem","onAction","MenuInputItem","label","defaultValue","_value","TextureAtlas","wrapS","RepeatWrapping","wrapT","w","h","frame","d","bounds","Vector2","filename","framePosition","frameSize","_atlases","TextureManager","getAtlas","TextureFrame","textureAtlas","geometry","initialFrame","fixed","getFrameSize","_changeSize","aw","ah","faceVertexUvs","uvsNeedUpdate","frameName","offset","getFrameOffset","View","initialPosition","position","z","initialized","BackgroundView","textureName","textureAtlasName","_width","_height","_lightness","PlaneGeometry","textureFrame","material","MeshBasicMaterial","transparent","hsl","color","getHSL","setHSL","s","Mesh","lightness","_initalized","scale","ViewContainer","staticViews","Set","dynamicViews","_backgroundView","Object3D","renderOrder","staticView","backgroundView","remove","dynamicView","Animation","interval","framePrefix","currentFrameIndex","currentDisplayTime","_updateTexture","currentFrame","box","positions","count","X_HEIGHTS","M_WIDTHS","CAP_HEIGHTS","TAB_ID","charCodeAt","SPACE_ID","TextLayout","opt","glyphs","_measure","computeMetrics","wrapper","Function","join","getGlyphById","chars","glyphIdx","findChar","getKerning","left","right","kernings","table","kern","first","second","amount","array","xtend","measure","_opt","tabSize","number","_setupSpaceGlyphs","lines","wordWrap","minWidth","maxLineWidth","reduce","prev","line","lineHeight","common","baseline","base","descender","letterSpacing","align","getAlignType","_descender","_baseline","_xHeight","idx","getXHeight","_capHeight","getCapHeight","_lineHeight","_ascender","self","lineIndex","lastGlyph","lineWidth","glyph","getGlyph","tx","data","xadvance","_linesTotal","_fallbackSpaceGlyph","_fallbackTabGlyph","space","getMGlyph","tabWidth","xoffset","yoffset","curPen","curWidth","nextPen","nextWidth","defineProperty","configurable","TextGeometry","assign","TypeError","layout","createLayout","flipY","texWidth","scaleW","texHeight","scaleH","filter","bitmap","visibleGlyphs","Float32Array","uvs","bw","bh","u0","v1","u1","v0","indices","createIndices","clockwise","type","setIndex","addAttribute","BufferAttribute","multipage","attributes","removeAttribute","boundingSphere","Sphere","itemSize","radius","center","output","minX","minY","sqrt","utils","isNaN","error","boundingBox","Box3","bbox","makeEmpty","BufferGeometry","TextView","options","_text","aligh","_color","rotation","PI","setHex","toString","_updateGeometry","LogoView","logoSize","MenuItemsView","selectedTextColor","textColor","viewMenuItemPairs","selectedView","logoView","itemCount","textView","previousItem","currentView","previousView","OptionsMenu","addMenuItem","changeOption","addDynamicView","background","State","inputs","PlayState","match","collisionSystem","bulletSystem","player","showScores","paused","onPause","soldiers","soldier","dead","randomRespawnPosition","respawn","StatsRenderView","AmmoView","ammoSize","ammoMesh","magazineText","ammoText","ammo","magazine","currentWeapon","weapon","HealthView","_healthScale","applyMatrix","Matrix4","makeTranslation","oldX","healthScale","health","maxHealth","WeaponView","_weapon","ScoreView","backgroundMaterial","MeshLambertMaterial","opacity","backgroundGeometry","scoreTextView","_scoreText","newScores","teams","resultText","teamName","teamData","kills","deaths","soldierText","totalKills","totalDeaths","converToText","sortedScores","ObjectPool","factoryFunction","firstAllocationNumber","allocationNumber","allocationLimit","totalInstances","availableInstances","allocate","pop","object","BulletView","bullet","angle","interpolationPercentage","previous","previousPosition","current","BulletSystemView","bulletViewPool","poolSize","poolLimit","bulletViewPairs","WeakMap","deadBullets","deadBullet","bulletView","delete","activeBullets","WATER_FRAMES","waterGeometry","block","walls","top","getBounds","topGeometry","translate","blockGeometry","Geometry","merge","WaterBlocksView","waterFrames","_textureAtlasName","_waterFrames","blocks","blockWidth","blockHeight","blockDepth","mergedGeometry","mergeVertices","createMergedBlockGeometry","animation","wallBlockGeometry","south","southGeometry","rotateY","north","northGeometry","west","westGeometry","rotateX","east","eastGeometry","StaticBlocksView","side","DoubleSide","LightView","light","lightGeometry","lightMaterial","lightMesh","sourcePosition","rotateZ","spotLight","SpotLight","target","translateX","translateY","translateZ","WorldMapView","wallsView","waterView","lights","lightView","WALK_FRAMES","RUN_FRAMES","IDLE_FRAMES","TEAM_COLORS","american","german","SoldierView","_team","team","animations","walk","idle","currentAnimation","offsetHSL","isMoving","zOffset","depth","_updateAnimation","SoldierViewPool","viewPool","viewPairs","has","free","PlayRenderView","cameraFollowView","PerspectiveCamera","ambientLight","AmbientLight","cameraFollowLight","exponent","setX","setY","setZ","ViewBuilder","playState","uiView","uiViewContainer","scoreView","weaponView","ammoView","healthView","addViewContainer","playView","playerView","soldierView","bulletSystemView","worldMapView","soldierStatsByTeam","stat","resultsByTeam","teamResult","Match","matchTime","matchDuration","teamNames","leastTeamName","minCount","MAX_VALUE","teamWithLeastPlayers","sort","a","teamA","teamB","PlayerInput","stopMoving","turnRight","turnLeft","stopTurning","fireBullet","reload","scrollWeapons","UiInput","resume","pause","ComputerInput","random","Vector","other","constructor","cos","sin","amt","dot","len2","axis","project","projectN","Polygon","setVertices","computedVertices","edges","normals","_compute","rotate","computedVertex","copy","p1","p2","e","sub","perp","normalize","xMin","yMin","xMax","yMax","vertex","Entity","speed","rotationSpeed","_body","halfWidth","halfHeight","physics","bullets","isBullet","isPlayer","isCharacter","body","setAngle","velocity","reverse","angularVelocity","collidable","shouldUpdate","actions","Character","walkingSpeed","runningSpeed","_isRunning","damage","kill","Gun","maxMagazine","maxAmmo","fireRate","reloadTime","_reloadingTime","_firedTime","_canFire","isReloading","fired","refill","floor","_fired","mp44","thompson","Soldier","weapons","currentWeaponIndex","addWeapon","WeaponFactory","isSoldier","deathCount","firedBy","killedByCount","suicides","fire","firedBullet","Player","PlayAudio","entities","entity","Block","_position","_walls","_computeBodies","bodies","Light","WorldMap","layers","types","blocksBetweenIndexes","respawns","indexToPosition","indexes","positionToIndex","blockAtIndex","blockAtPosition","finalString","layer","layerStrings","v","_parseBlock","rawBlock","blockOptions","parseLight","rawLight","rawPosition","MapParser","rawMap","rawBlocks","mapWidth","mapHeight","mapDepth","row","_createEmptyLayers","worldMap","_parseRawMap","Box","pos","Response","overlapN","overlapV","aInB","bInA","overlap","T_VECTORS","T_ARRAYS","T_RESPONSE","UNIT_SQUARE","toPolygon","_flattenVerticesOn","normal","result","_isSeparatingAxis","aPos","bPos","aPoints","bPoints","rangeA","rangeB","offsetV","projectedOffset","option1","option2","absOverlap","abs","negate","_vornoiRegion","point","dp","LEFT_VORONOI_REGION","RIGHT_VORONOI_REGION","MIDDLE_VORONOI_REGION","_testPolygonCircle","polygon","circle","circlePos","radius2","edge","next","region","point2","dist","distAbs","_testPolygonPolygon","aLen","bLen","SAT","testPolygonPolygon","testCirclePolygon","testPolygonCircle","testCircleCircle","differenceV","totalRadius","totalRadiusSq","distanceSq","pointInPolygon","p","poly","pointInCircle","c","radiusSq","CollisionUtils","wallCollision","onCollision","ray","rayDistance","rayPositions","blocksBetweenPositions","polygons","floorCollision","nextEntityPosition","floorBlockIndex","fall","CollisionSystem","stopFalling","Bullet","firedByWeapon","maxDistance","traveledDistance","BulletSystem","bulletPool","firstBullet","_fireBullet","hitByBullet","PlayBuilder","createSingleplayer","addSoldier","createCpuSoldiers","cpuCount","playerInput","createPlayer","playerName","uiInput","addView","createViews","createMultiplayer","Multiplayer","multiplayerState","HelpMenu","createMenu","states","gamePlaying","playOptions","createPlayState","MainMenu","addStaticView","createView","MenuState","_currentMenu","currentOptionsEdit","optionName","menuInput","subMenus","MultiplayerMenu","subMenuName","subMenu","addMenu","menuView","RenderDebug","renderer","statjs","DebugStats","bottom","rendererStats","msTexts","lastTime","_rendererStats","currentState","_renderer","_renderDebug","MainLoop","before","after"],"mappings":"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","file":"static/js/main.c096d3d3.chunk.js","sourcesContent":["import Howler from 'howler';\nimport { FileLoader, TextureLoader } from 'three';\n\nconst _assets = {\n    atlases: new Map(),\n    textures: new Map(),\n    maps: new Map(),\n    fonts: new Map(),\n    audio: new Map()\n};\n\nconst _loadHowlerAudio = function (name, spriteJson) {\n    return new Promise((resolve, reject) => {\n        spriteJson.onload = function () {\n            return resolve();\n        };\n\n        spriteJson.onloaderror = function (soundId, err) {\n            return reject(err);\n        };\n\n        const sound = new Howler.Howl(spriteJson);\n\n        const audio = {\n            mapping: spriteJson,\n            sound: sound\n        };\n\n        _assets.audio.set(name, audio);\n    });\n};\n\nconst _loadAudioSprite = function (audioSpritePath, name) {\n    return _loadJson(audioSpritePath + name + '.json').then(function (spriteJson) {\n        // FIXME change \"urls\" to \"src\" to work with Howler 2\n        spriteJson.src = spriteJson.urls;\n\n        const fullSources = [];\n\n        for (const src of spriteJson.src) {\n            fullSources.push(audioSpritePath + src);\n        }\n\n        spriteJson.src = fullSources;\n\n        return _loadHowlerAudio(name, spriteJson);\n    });\n};\n\nconst _loadFont = function (fontsPath, name) {\n    const font = {\n        mapping: null,\n        pages: [],\n        textures: []\n    };\n\n    return _loadJson(fontsPath + name + '.json').then((fontJson) => {\n        font.mapping = fontJson;\n\n        const pageTextures = fontJson.pages.map((pageName) => {\n            font.pages.push(pageName);\n\n            return _loadTexture(pageName, fontsPath + pageName);\n        });\n\n        return Promise.all(pageTextures);\n    }).then(() => {\n        for (const page of font.pages) {\n            font.textures.push(_assets.textures.get(page));\n        }\n\n        _assets.fonts.set(name, font);\n    });\n};\n\nconst _loadTexture = function (name, url) {\n    return new Promise(function (resolve, reject) {\n        _textureLoader.load(url, function (texture) {\n            _assets.textures.set(name, texture);\n\n            return resolve();\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadXhr = function (url) {\n    return new Promise(function (resolve, reject) {\n        fileLoader.load(url, function (response) {\n            return resolve(response);\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadJson = function (url) {\n    return _loadXhr(url).then(function (response) {\n        try {\n            return JSON.parse(response);\n        } catch (err) {\n            throw err;\n        }\n    });\n};\n\nconst _loadAtlas = function (atlasesPath, name) {\n    return _loadJson(atlasesPath + name + '.json').then(function (atlas) {\n        return atlas;\n    }).then(function (atlas) {\n        _assets.atlases.set(name, atlas);\n\n        return _loadTexture(name, atlasesPath + atlas.meta.image);\n    });\n};\n\nconst _loadMap = function (mapsPath, name) {\n    return _loadJson(mapsPath + name + '.json').then(function (atlas) {\n        _assets.maps.set(name, atlas);\n    });\n};\n\nlet _textureLoader = null;\nlet fileLoader = null;\n\nconst AssetLoader = {\n    init: function (assetConfig) {\n        _textureLoader = new TextureLoader();\n        fileLoader = new FileLoader();\n\n        const assetsToLoad = [];\n        const paths = assetConfig.paths;\n\n        for (const atlasName of assetConfig.textureAtlases) {\n            assetsToLoad.push(_loadAtlas(paths.atlases + '/', atlasName));\n        }\n\n        for (const mapName of assetConfig.maps) {\n            assetsToLoad.push(_loadMap(paths.maps + '/', mapName));\n        }\n\n        for (const fontName of assetConfig.fonts) {\n            assetsToLoad.push(_loadFont(paths.fonts + '/', fontName));\n        }\n\n        for (const audioSpriteName of assetConfig.audio) {\n            assetsToLoad.push(_loadAudioSprite(paths.audio + '/', audioSpriteName));\n        }\n\n        return Promise.all(assetsToLoad);\n    },\n\n    getTexture (name) {\n        const texture = _assets.textures.get(name);\n\n        if (!texture) {\n            throw new Error('Texture does not exist: ' + name);\n        }\n\n        return texture;\n    },\n\n    cloneTexture (name) {\n        const texture = this.getTexture(name);\n        const clone = texture.clone();\n\n        clone.needsUpdate = true;\n\n        return clone;\n    },\n\n    getMap (name) {\n        const map = _assets.maps.get(name);\n\n        if (!map) {\n            throw new Error('Map does not exist: ' + name);\n        }\n\n        return map;\n    },\n\n    getAtlasMapping (name) {\n        const mapping = _assets.atlases.get(name);\n\n        if (!mapping) {\n            throw new Error('Atlas mapping does not exist: ' + name);\n        }\n\n        return mapping;\n    },\n\n    getFont (name) {\n        const font = _assets.fonts.get(name);\n\n        if (!font) {\n            throw new Error('Font does not exist: ' + name);\n        }\n\n        return font;\n    },\n\n    getAudioSprite (name) {\n        const audioSprite = _assets.audio.get(name);\n\n        if (!audioSprite) {\n            throw new Error('Audio sprite does not exist: ' + name);\n        }\n\n        return audioSprite;\n    }\n};\n\nexport default AssetLoader;\n","import { WebGLRenderer } from 'three';\n\nconst DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 600;\n\n/**\n * Handles all the rendering. Uses the three.js renderer internally.\n *\n * @class\n */\nclass Renderer {\n\n    /**\n     * @constructor\n     *\n     * @param {string} [divName=gameDiv] - id of the html div to render into.\n     */\n    constructor (divName = 'root') {\n        this._views = null;\n\n        this._THREErenderer = new WebGLRenderer();\n\n        this._THREErenderer.setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n        this._THREErenderer.setClearColor(0x000000);\n        this._THREErenderer.setPixelRatio(window.devicePixelRatio);\n        this._THREErenderer.autoClear = false;\n\n        document.getElementById(divName).appendChild(this._THREErenderer.domElement);\n    }\n\n    set views (views) {\n        this._views = views;\n\n        let index = 0;\n\n        for (const view of this._views) {\n            if (index === 0) {\n                // Get the clear color from the first view\n                this._THREErenderer.setClearColor(view.clearColor);\n            }\n\n            view.size = {\n                width: DEFAULT_WIDTH,\n                height: DEFAULT_HEIGHT\n            };\n\n            index += 1;\n        }\n    }\n\n    get views () {\n        return this._views;\n    }\n\n    /**\n     * Render the view\n     *\n     * @returns {void}\n     */\n    render () {\n        this._THREErenderer.clear();\n\n        const info = {\n            memory: {\n                programs: 0,\n                geometries: 0,\n                textures: 0\n            },\n            render: {\n                calls: 0,\n                vertices: 0,\n                faces: 0,\n                points: 0\n            }\n        };\n\n        let index = 0;\n\n        for (const view of this._views) {\n            if (index > 0) {\n                this._THREErenderer.clearDepth();\n            }\n\n            this._THREErenderer.render(view.scene, view.camera);\n\n            info.memory.programs += this._THREErenderer.info.programs.length;\n            info.memory.geometries += this._THREErenderer.info.memory.geometries;\n            info.memory.textures += this._THREErenderer.info.memory.textures;\n            info.render.calls += this._THREErenderer.info.render.calls;\n            info.render.vertices += this._THREErenderer.info.render.vertices;\n            info.render.faces += this._THREErenderer.info.render.faces;\n            info.render.points += this._THREErenderer.info.render.points;\n\n            index += 1;\n        }\n\n        this.info = info;\n    }\n}\n\nexport default Renderer;\n","import Engine from '../engine/Engine';\nimport AssetManager from '../engine/AssetManager';\nimport path from 'path';\n\nimport MenuBuilder from './menu/MenuBuilder';\n\nconst ASSET_PATH = path.resolve(__dirname, '../../assets/');\nconst ASSET_CONFIG = {\n    paths: {\n        maps: ASSET_PATH + '/maps',\n        atlases: ASSET_PATH + '/spritesheets',\n        fonts: ASSET_PATH + '/fonts',\n        audio: ASSET_PATH + '/audio/sprites'\n    },\n    textureAtlases: [\n        'soldier',\n        'tiles',\n        'world',\n        'ui'\n    ],\n    maps: [\n        'level1',\n        'level2'\n    ],\n    fonts: [\n        'keep_calm'\n    ],\n    audio: [\n        'guns',\n        'background',\n        'menu_effects'\n    ]\n};\n\nexport const Game = {\n\n    /**\n     * Load assets and start the game.\n     *\n     * @returns {void}\n     */\n    start () {\n        AssetManager.init(ASSET_CONFIG).then(function () {\n            const engine = new Engine({\n                debugMode: true\n            });\n\n            const menuState = MenuBuilder.create(engine);\n\n            engine.addState('menu', menuState);\n\n            engine.changeState('menu');\n\n            engine.run();\n        }).catch(function (err) {\n            throw err;\n        });\n    }\n};\n","/**\n * View that shows FPS, memory usage and render time.\n *\n * @returns {object} statsjs object\n */\nconst Stats = function () {\n    const now = (global.performance && global.performance.now) ? global.performance.now.bind(performance) : Date.now;\n\n    let startTime = now();\n    let prevTime = startTime;\n    let frames = 0;\n    let modes = [0];\n\n    const createElement = function (tag, id, css) {\n        const element = document.createElement(tag);\n\n        element.id = id;\n        element.style.cssText = css;\n\n        return element;\n    };\n\n    const createPanel = function (id, fg, bg) {\n        const div = createElement('div', id, 'padding:0 0 3px 3px;text-align:left;background:' + bg);\n\n        const text = createElement('div', id + 'Text', 'font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px;color:' + fg);\n\n        text.innerHTML = id.toUpperCase();\n        div.appendChild(text);\n\n        const graph = createElement('div', id + 'Graph', 'width:74px;height:30px;background:' + fg);\n\n        div.appendChild(graph);\n\n        for (let i = 0; i < 74; i++) {\n            graph.appendChild(createElement('span', '', 'width:1px;height:30px;float:left;opacity:0.9;background:' + bg));\n        }\n\n        return div;\n    };\n\n    const setModes = function (values) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            if (values.indexOf(i) < 0) {\n                children[i].style.display = 'none';\n            } else {\n                children[i].style.display = 'block';\n            }\n        }\n\n        modes = values;\n    };\n\n    const setMode = function (value) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            children[i].style.display = i === value ? 'block' : 'none';\n        }\n\n        modes = [value];\n    };\n\n    const updateGraph = function (dom, value) {\n        const child = dom.appendChild(dom.firstChild);\n\n        child.style.height = Math.min(30, 30 - value * 30) + 'px';\n    };\n\n    const container = createElement('div', 'stats', 'width:80px;opacity:0.9;cursor:pointer');\n\n    // FPS\n    let fps = 0;\n    let fpsMin = Number.POSITIVE_INFINITY;\n    let fpsMax = 0;\n\n    const fpsDiv = createPanel('fps', '#0ff', '#002');\n    const fpsText = fpsDiv.children[0];\n    const fpsGraph = fpsDiv.children[1];\n\n    container.appendChild(fpsDiv);\n\n    // MS\n    let ms = 0;\n    let msMin = Number.POSITIVE_INFINITY;\n    let msMax = 0;\n\n    const msDiv = createPanel('ms', '#0f0', '#020');\n    const msText = msDiv.children[0];\n    const msGraph = msDiv.children[1];\n\n    container.appendChild(msDiv);\n\n    let mem = 0;\n    let memMin = Number.POSITIVE_INFINITY;\n    let memMax = 0;\n    const memDiv = createPanel('mb', '#f08', '#201');\n    const memText = memDiv.children[0];\n    const memGraph = memDiv.children[1];\n\n    // MEM\n    if (global.performance && global.performance.memory) {\n        container.appendChild(memDiv);\n    }\n\n    setModes([modes]);\n\n    return {\n        REVISION: 14,\n        domElement: container,\n        setMode: setMode,\n        setModes: setModes,\n        begin: function () {\n            startTime = now();\n        },\n        end: function () {\n            const time = now();\n\n            ms = time - startTime;\n            msMin = Math.min(msMin, ms);\n            msMax = Math.max(msMax, ms);\n\n            msText.textContent = (ms | 0) + ' MS (' + (msMin | 0) + '-' + (msMax | 0) + ')';\n            updateGraph(msGraph, ms / 200);\n\n            frames++;\n\n            if (time > prevTime + 1000) {\n                fps = Math.round((frames * 1000) / (time - prevTime));\n                fpsMin = Math.min(fpsMin, fps);\n                fpsMax = Math.max(fpsMax, fps);\n\n                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n                updateGraph(fpsGraph, fps / 100);\n\n                prevTime = time;\n                frames = 0;\n\n                if (typeof mem !== 'undefined' && performance && performance.memory) {\n                    const heapSize = performance.memory.usedJSHeapSize;\n                    const heapSizeLimit = performance.memory.jsHeapSizeLimit;\n\n                    mem = Math.round(heapSize * 0.000000954);\n                    memMin = Math.min(memMin, mem);\n                    memMax = Math.max(memMax, mem);\n\n                    memText.textContent = mem + ' MB (' + memMin + '-' + memMax + ')';\n                    updateGraph(memGraph, heapSize / heapSizeLimit);\n                }\n            }\n\n            return time;\n        },\n\n        update: function () {\n            startTime = this.end();\n        }\n    };\n};\n\nexport default Stats;\n","// https://github.com/IceCreamYou/MainLoop.js\n// The MIT License\n//\n// Copyright (C) 2015 Isaac Sukin\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n// of the Software, and to permit persons to whom the Software is furnished to do\n// so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/*\n * A main loop useful for games and other animated applications.\n */\n\nfunction create () {\n    // The amount of time (in milliseconds) to simulate each time update()\n    // runs. See `MainLoop.setSimulationTimestep()` for details.\n    let simulationTimestep = 1000 / 60;\n\n        // The cumulative amount of in-app time that hasn't been simulated yet.\n        // See the comments inside animate() for details.\n    let frameDelta = 0;\n\n    /**\n    * The timestamp in milliseconds of the last time the main loop was run.\n    * Used to compute the time elapsed between frames.\n    */\n    let lastFrameTimeMs = 0;\n\n    /**\n    * An exponential moving average of the frames per second.\n    */\n    let fps = 60;\n\n    /**\n    * The timestamp (in milliseconds) of the last time the `fps` moving average was updated.\n    */\n    let lastFpsUpdate = 0;\n\n    /**\n    * The number of frames delivered in the current second.\n    */\n    let framesThisSecond = 0;\n\n    // The number of times update() is called in a given frame. This is only\n    // relevant inside of animate(), but a reference is held externally so that\n    // this variable is not marked for garbage collection every time the main\n    // loop runs.\n    let numUpdateSteps = 0;\n\n    // The minimum amount of time in milliseconds that must pass since the last\n    // frame was executed before another frame can be executed. The\n    // multiplicative inverse caps the FPS (the default of zero means there is\n    // no cap).\n    let minFrameDelay = 0;\n\n    /*\n    * Whether the main loop is running.\n    */\n    let running = false;\n\n    // `true` if `MainLoop.start()` has been called and the most recent time it\n    // was called has not been followed by a call to `MainLoop.stop()`. This is\n    // different than `running` because there is a delay of a few milliseconds\n    // after `MainLoop.start()` is called before the application is considered\n    // \"running.\" This delay is due to waiting for the next frame.\n    let started = false;\n\n    // Whether the simulation has fallen too far behind real time.\n    // Specifically, `panic` will be set to `true` if too many updates occur in\n    // one frame. This is only relevant inside of animate(), but a reference is\n    // held externally so that this variable is not marked for garbage\n    // collection every time the main loop runs.\n    let panic = false;\n\n    // The function that runs the main loop. The unprefixed version of\n    // `window.requestAnimationFrame()` is available in all modern browsers\n    // now, but node.js doesn't have it, so fall back to timers. The polyfill\n    // is adapted from the MIT-licensed\n    // https://github.com/underscorediscovery/realtime-multiplayer-in-html5\n    const requestAnimationFrame = global.requestAnimationFrame || (function () {\n        let lastTimestamp = Date.now();\n\n        return function (callback) {\n            const now = Date.now();\n\n            // The next frame should run no sooner than the simulation allows,\n            // but as soon as possible if the current frame has already taken\n            // more time to run than is simulated in one timestep.\n            const timeout = Math.max(0, simulationTimestep - (now - lastTimestamp));\n\n            lastTimestamp = now + timeout;\n\n            return setTimeout(function () {\n                callback(now + timeout);\n            }, timeout);\n        };\n    }());\n\n    // The function that stops the main loop. The unprefixed version of\n    // `window.cancelAnimationFrame()` is available in all modern browsers now,\n    // but node.js doesn't have it, so fall back to timers.\n    const cancelAnimationFrame = global.cancelAnimationFrame || clearTimeout;\n\n    // In all major browsers, replacing non-specified functions with NOOPs\n    // seems to be as fast or slightly faster than using conditions to only\n    // call the functions if they are specified. This is probably due to empty\n    // functions being optimized away. http://jsperf.com/noop-vs-condition\n    const NOOP = function () {};\n\n    // A function that runs at the beginning of the main loop.\n    // See `MainLoop.setBegin()` for details.\n    let begin = NOOP;\n\n    // A function that runs updates (i.e. AI and physics).\n    // See `MainLoop.setUpdate()` for details.\n    let update = NOOP;\n\n    // A function that draws things on the screen.\n    // See `MainLoop.setDraw()` for details.\n    let draw = NOOP;\n\n    // A function that runs at the end of the main loop.\n    // See `MainLoop.setEnd()` for details.\n    let end = NOOP;\n\n    // The ID of the currently executing frame. Used to cancel frames when\n    // stopping the loop.\n    let rafHandle = null;\n\n    /**\n    * Manages the main loop that runs updates and rendering.\n    *\n    * The main loop is a core part of any application in which state changes\n    * even if no events are handled. In games, it is typically responsible for\n    * computing physics and AI as well as drawing the result on the screen.\n    *\n    * The body of this particular loop is run every time the browser is ready to\n    * paint another frame. The frequency with which this happens depends primarily\n    * on the monitor's refresh rate, which is typically 60 frames per second. Most\n    * applications aim to run at 60 FPS for this reason, meaning that the main\n    * loop runs about once every 16.7 milliseconds. With this target, everything\n    * that happens in the main loop (e.g. all updates and drawing) needs to occur\n    * within the \"budget\" of 16.7 milliseconds.  See\n    * `MainLoop.setSimulationTimestep()` for more information about typical\n    * monitor refresh rates and frame rate targets.\n    *\n    * The main loop can be started and stopped, but there can only be one MainLoop\n    * (except that each Web Worker can have its own MainLoop). There are four main\n    * parts of the loop: {@link #setBegin begin}(), {@link #setUpdate update}(),\n    * {@link #setDraw draw}(), and {@link #setEnd end}(), in that order. See the\n    * functions that set each of them for descriptions of what they are used for.\n    * Note that update() can run zero or more times per loop.\n    *\n    * @class MainLoop\n    */\n    const MainLoop = {\n\n        /**\n        * Gets how many milliseconds should be simulated by every run of update().\n        *\n        * See `MainLoop.setSimulationTimestep()` for details on this value.\n        *\n        * @return {Number}\n        *   The number of milliseconds that should be simulated by every run of\n        *   {@link #setUpdate update}().\n        */\n        getSimulationTimestep: function () {\n            return simulationTimestep;\n        },\n\n        /**\n        * Sets how many milliseconds should be simulated by every run of update().\n        *\n        * The perceived frames per second (FPS) is effectively capped at the\n        * multiplicative inverse of the simulation timestep. That is, if the\n        * timestep is 1000 / 60 (which is the default), then the maximum perceived\n        * FPS is effectively 60. Decreasing the timestep increases the maximum\n        * perceived FPS at the cost of running {@link #setUpdate update}() more\n        * times per frame at lower frame rates. Since running update() more times\n        * takes more time to process, this can actually slow down the frame rate.\n        * Additionally, if the amount of time it takes to run update() exceeds or\n        * very nearly exceeds the timestep, the application will freeze and crash\n        * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\n        * an explanation of what can be done if a spiral of death is occurring).\n        *\n        * The exception to this is that interpolating between updates for each\n        * render can increase the perceived frame rate and reduce visual\n        * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\n        * this.\n        *\n        * If you are considering decreasing the simulation timestep in order to\n        * raise the maximum perceived FPS, keep in mind that most monitors can't\n        * display more than 60 FPS. Whether humans can tell the difference among\n        * high frame rates depends on the application, but for reference, film is\n        * usually displayed at 24 FPS, other videos at 30 FPS, most games are\n        * acceptable above 30 FPS, and virtual reality might require 75 FPS to\n        * feel natural. Some gaming monitors go up to 144 FPS. Setting the\n        * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\n        * strongly discouraged. The default of 1000 / 60 is good in most cases.\n        *\n        * The simulation timestep should typically only be changed at\n        * deterministic times (e.g. before the main loop starts for the first\n        * time, and not in response to user input or slow frame rates) to avoid\n        * introducing non-deterministic behavior. The update timestep should be\n        * the same for all players/users in multiplayer/multi-user applications.\n        *\n        * See also `MainLoop.getSimulationTimestep()`.\n        *\n        * @param {Number} timestep\n        *   The number of milliseconds that should be simulated by every run of\n        *   {@link #setUpdate update}().\n        */\n        setSimulationTimestep: function (timestep) {\n            simulationTimestep = timestep;\n\n            return this;\n        },\n\n        /**\n        * Returns the exponential moving average of the frames per second.\n        *\n        * @return {Number}\n        *   The exponential moving average of the frames per second.\n        */\n        getFPS: function () {\n            return fps;\n        },\n\n        /**\n        * Gets the maximum frame rate.\n        *\n        * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\n        * for details.\n        *\n        * See also `MainLoop.setMaxAllowedFPS()`.\n        *\n        * @return {Number}\n        *   The maximum number of frames per second allowed.\n        */\n        getMaxAllowedFPS: function () {\n            return 1000 / minFrameDelay;\n        },\n\n        /**\n        * Sets a maximum frame rate.\n        *\n        * See also `MainLoop.getMaxAllowedFPS()`.\n        *\n        * @param {Number} [fps=Infinity]\n        *   The maximum number of frames per second to execute. If Infinity or not\n        *   passed, there will be no FPS cap (although other factors do limit the\n        *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\n        *   will stop the loop, and when the loop is next started, it will return\n        *   to the previous maximum frame rate. Passing negative values will stall\n        *   the loop until this function is called again with a positive value.\n        *\n        * @chainable\n        */\n        setMaxAllowedFPS: function (fps) {\n            if (typeof fps === 'undefined') {\n                fps = Number.Infinity;\n            }\n\n            if (fps === 0) {\n                this.stop();\n            } else {\n                // Dividing by Infinity returns zero.\n                minFrameDelay = 1000 / fps;\n            }\n\n            return this;\n        },\n\n        /**\n        * Reset the amount of time that has not yet been simulated to zero.\n        *\n        * This introduces non-deterministic behavior if called after the\n        * application has started running (unless it is being reset, in which case\n        * it doesn't matter). However, this can be useful in cases where the\n        * amount of time that has not yet been simulated has grown very large\n        * (for example, when the application's tab gets put in the background and\n        * the browser throttles the timers as a result). In applications with\n        * lockstep the player would get dropped, but in other networked\n        * applications it may be necessary to snap or ease the player/user to the\n        * authoritative state and discard pending updates in the process. In\n        * non-networked applications it may also be acceptable to simply resume\n        * the application where it last left off and ignore the accumulated\n        * unsimulated time.\n        *\n        * @return {Number}\n        *   The cumulative amount of elapsed time in milliseconds that has not yet\n        *   been simulated, but is being discarded as a result of calling this\n        *   function.\n        */\n        resetFrameDelta: function () {\n            const oldFrameDelta = frameDelta;\n\n            frameDelta = 0;\n\n            return oldFrameDelta;\n        },\n\n        /**\n        * Sets the function that runs at the beginning of the main loop.\n        *\n        * The begin() function is typically used to process input before the\n        * updates run. Processing input here (in chunks) can reduce the running\n        * time of event handlers, which is useful because long-running event\n        * handlers can sometimes delay frames.\n        *\n        * Unlike {@link #setUpdate update}(), which can run zero or more times per\n        * frame, begin() always runs exactly once per frame. This makes it useful\n        * for any updates that are not dependent on time in the simulation.\n        * Examples include adjusting HUD calculations or performing long-running\n        * updates incrementally. Compared to {@link #setEnd end}(), generally\n        * actions should occur in begin() if they affect anything that\n        * {@link #setUpdate update}() or {@link #setDraw draw}() use.\n        *\n        * @param {Function} begin\n        *   The begin() function.\n        * @param {Number} [begin.timestamp]\n        *   The current timestamp (when the frame started), in milliseconds. This\n        *   should only be used for comparison to other timestamps because the\n        *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\n        *   In engines that support `DOMHighResTimeStamp` (all modern browsers\n        *   except iOS Safari 8) the epoch is the time the page started loading,\n        *   specifically `performance.timing.navigationStart`. Everywhere else,\n        *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n        * @param {Number} [begin.delta]\n        *   The total elapsed time that has not yet been simulated, in\n        *   milliseconds.\n        */\n        setBegin: function (fun) {\n            begin = fun || begin;\n\n            return this;\n        },\n\n        /**\n        * Sets the function that runs updates (e.g. AI and physics).\n        *\n        * The update() function should simulate anything that is affected by time.\n        * It can be called zero or more times per frame depending on the frame\n        * rate.\n        *\n        * As with everything in the main loop, the running time of update()\n        * directly affects the frame rate. If update() takes long enough that the\n        * frame rate drops below the target (\"budgeted\") frame rate, parts of the\n        * update() function that do not need to execute between every frame can be\n        * moved into Web Workers. (Various sources on the internet sometimes\n        * suggest other scheduling patterns using setTimeout() or setInterval().\n        * These approaches sometimes offer modest improvements with minimal\n        * changes to existing code, but because JavaScript is single-threaded, the\n        * updates will still block rendering and drag down the frame rate. Web\n        * Workers execute in separate threads, so they free up more time in the\n        * main loop.)\n        *\n        * This script can be imported into a Web Worker using importScripts() and\n        * used to run a second main loop in the worker. Some considerations:\n        *\n        * - Profile your code before doing the work to move it into Web Workers.\n        *   It could be the rendering that is the bottleneck, in which case the\n        *   solution is to decrease the visual complexity of the scene.\n        * - It doesn't make sense to move the *entire* contents of update() into\n        *   workers unless {@link #setDraw draw}() can interpolate between frames.\n        *   The lowest-hanging fruit is background updates (like calculating\n        *   citizens' happiness in a city-building game), physics that doesn't\n        *   affect the scene (like flags waving in the wind), and anything that is\n        *   occluded or happening far off screen.\n        * - If draw() needs to interpolate physics based on activity that occurs\n        *   in a worker, the worker needs to pass the interpolation value back to\n        *   the main thread so that is is available to draw().\n        * - Web Workers can't access the state of the main thread, so they can't\n        *   directly modify objects in your scene. Moving data to and from Web\n        *   Workers is a pain. The fastest way to do it is with Transferable\n        *   Objects: basically, you can pass an ArrayBuffer to a worker,\n        *   destroying the original reference in the process.\n        *\n        * You can read more about Web Workers and Transferable Objects at\n        * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\n        *\n        * @param {Function} update\n        *   The update() function.\n        * @param {Number} [update.delta]\n        *   The amount of time in milliseconds to simulate in the update. In most\n        *   cases this timestep never changes in order to ensure deterministic\n        *   updates. The timestep is the same as that returned by\n        *   `MainLoop.getSimulationTimestep()`.\n        */\n        setUpdate: function (fun) {\n            update = fun || update;\n\n            return this;\n        },\n\n        /**\n        * Sets the function that draws things on the screen.\n        *\n        * The draw() function gets passed the percent of time that the next run of\n        * {@link #setUpdate update}() will simulate that has actually elapsed, as\n        * a decimal. In other words, draw() gets passed how far between update()\n        * calls it is. This is useful because the time simulated by update() and\n        * the time between draw() calls is usually different, so the parameter to\n        * draw() can be used to interpolate motion between frames to make\n        * rendering appear smoother. To illustrate, if update() advances the\n        * simulation at each vertical bar in the first row below, and draw() calls\n        * happen at each vertical bar in the second row below, then some frames\n        * will have time left over that is not yet simulated by update() when\n        * rendering occurs in draw():\n        *\n        *     update() timesteps:  |  |  |  |  |  |  |  |  |\n        *     draw() calls:        |   |   |   |   |   |   |\n        *\n        * To interpolate motion for rendering purposes, objects' state after the\n        * last update() must be retained and used to calculate an intermediate\n        * state. Note that this means renders will be up to one update() behind.\n        * This is still better than extrapolating (projecting objects' state after\n        * a future update()) which can produce bizarre results. Storing multiple\n        * states can be difficult to set up, and keep in mind that running this\n        * process takes time that could push the frame rate down, so it's often\n        * not worthwhile unless stuttering is visible.\n        *\n        * @param {Function} draw\n        *   The draw() function.\n        * @param {Number} [draw.interpolationPercentage]\n        *   The cumulative amount of time that hasn't been simulated yet, divided\n        *   by the amount of time that will be simulated the next time update()\n        *   runs. Useful for interpolating frames.\n        */\n        setDraw: function (fun) {\n            draw = fun || draw;\n\n            return this;\n        },\n\n        /**\n        * Sets the function that runs at the end of the main loop.\n        *\n        * Unlike {@link #setUpdate update}(), which can run zero or more times per\n        * frame, end() always runs exactly once per frame. This makes it useful\n        * for any updates that are not dependent on time in the simulation.\n        * Examples include cleaning up any temporary state set up by\n        * {@link #setBegin begin}(), lowering the visual quality if the frame rate\n        * is too low, or performing long-running updates incrementally. Compared\n        * to begin(), generally actions should occur in end() if they use anything\n        * that update() or {@link #setDraw draw}() affect.\n        *\n        * @param {Function} end\n        *   The end() function.\n        * @param {Number} [end.fps]\n        *   The exponential moving average of the frames per second. This is the\n        *   same value returned by `MainLoop.getFPS()`. It can be used to take\n        *   action when the FPS is too low (or to restore to normalcy if the FPS\n        *   moves back up). Examples of actions to take if the FPS is too low\n        *   include exiting the application, lowering the visual quality, stopping\n        *   or reducing activities outside of the main loop like event handlers or\n        *   audio playback, performing non-critical updates less frequently, or\n        *   increasing the simulation timestep (by calling\n        *   `MainLoop.setSimulationTimestep()`). Note that this last option\n        *   results in more time being simulated per update() call, which causes\n        *   the application to behave non-deterministically.\n        * @param {Boolean} [end.panic=false]\n        *   Indicates whether the simulation has fallen too far behind real time.\n        *   Specifically, `panic` will be `true` if too many updates occurred in\n        *   one frame. In networked lockstep applications, the application should\n        *   wait for some amount of time to see if the user can catch up before\n        *   dropping the user. In networked but non-lockstep applications, this\n        *   typically indicates that the user needs to be snapped or eased to the\n        *   current authoritative state. When this happens, it may be convenient\n        *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\n        *   updates. In non-networked applications, it may be acceptable to allow\n        *   the application to keep running for awhile to see if it will catch up.\n        *   However, this could also cause the application to look like it is\n        *   running very quickly for a few frames as it transitions through the\n        *   intermediate states. An alternative that may be acceptable is to\n        *   simply ignore the unsimulated elapsed time by calling\n        *   `MainLoop.resetFrameDelta()` even though this introduces\n        *   non-deterministic behavior. In all cases, if the application panics\n        *   frequently, this is an indication that the main loop is running too\n        *   slowly. However, most of the time the drop in frame rate will probably\n        *   be noticeable before a panic occurs. To help the application catch up\n        *   after a panic caused by a spiral of death, the same steps can be taken\n        *   that are suggested above if the FPS drops too low.\n        */\n        setEnd: function (fun) {\n            end = fun || end;\n\n            return this;\n        },\n\n        /**\n        * Starts the main loop.\n        *\n        * Note that the application is not considered \"running\" immediately after\n        * this function returns; rather, it is considered \"running\" after the\n        * application draws its first frame. The distinction is that event\n        * handlers should remain paused until the application is running, even\n        * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\n        * current status. To act after the application starts, register a callback\n        * with requestAnimationFrame() after calling this function and execute the\n        * action in that callback. It is safe to call `MainLoop.start()` multiple\n        * times even before the application starts running and without calling\n        * `MainLoop.stop()` in between, although there is no reason to do this;\n        * the main loop will only start if it is not already started.\n        *\n        * See also `MainLoop.stop()`.\n        */\n        start: function () {\n            if (!started) {\n                // Since the application doesn't start running immediately, track\n                // whether this function was called and use that to keep it from\n                // starting the main loop multiple times.\n                started = true;\n\n                // In the main loop, draw() is called after update(), so if we\n                // entered the main loop immediately, we would never render the\n                // initial state before any updates occur. Instead, we run one\n                // frame where all we do is draw, and then start the main loop with\n                // the next frame.\n                rafHandle = requestAnimationFrame(function (timestamp) {\n                    // Render the initial state before any updates occur.\n                    draw(1);\n\n                    // The application isn't considered \"running\" until the\n                    // application starts drawing.\n                    running = true;\n\n                    // Reset variables that are used for tracking time so that we\n                    // don't simulate time passed while the application was paused.\n                    lastFrameTimeMs = timestamp;\n                    lastFpsUpdate = timestamp;\n                    framesThisSecond = 0;\n\n                    // Start the main loop.\n                    rafHandle = requestAnimationFrame(animate);\n                });\n            }\n\n            return this;\n        },\n\n        /**\n        * Stops the main loop.\n        *\n        * Event handling and other background tasks should also be paused when the\n        * main loop is paused.\n        *\n        * Note that pausing in multiplayer/multi-user applications will cause the\n        * player's/user's client to become out of sync. In this case the\n        * simulation should exit, or the player/user needs to be snapped to their\n        * updated position when the main loop is started again.\n        *\n        * See also `MainLoop.start()` and `MainLoop.isRunning()`.\n        */\n        stop: function () {\n            running = false;\n            started = false;\n            cancelAnimationFrame(rafHandle);\n\n            return this;\n        },\n\n        /**\n        * Returns whether the main loop is currently running.\n        *\n        * See also `MainLoop.start()` and `MainLoop.stop()`.\n        *\n        * @return {Boolean}\n        *   Whether the main loop is currently running.\n        */\n        isRunning: function () {\n            return running;\n        }\n    };\n\n   /**\n    * The main loop that runs updates and rendering.\n    *\n    * @param {DOMHighResTimeStamp} timestamp\n    *   The current timestamp. In practice this is supplied by\n    *   requestAnimationFrame at the time that it starts to fire callbacks. This\n    *   should only be used for comparison to other timestamps because the epoch\n    *   (i.e. the \"zero\" time) depends on the engine running this code. In engines\n    *   that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\n    *   8) the epoch is the time the page started loading, specifically\n    *   `performance.timing.navigationStart`. Everywhere else, including node.js,\n    *   the epoch is the Unix epoch (1970-01-01T00:00:00Z).\n    *\n    * @ignore\n    */\n    function animate (timestamp) {\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\n        // `MainLoop.setMaxAllowedFPS()`).\n        if (timestamp < lastFrameTimeMs + minFrameDelay) {\n            // Run the loop again the next time the browser is ready to render.\n            rafHandle = requestAnimationFrame(animate);\n\n            return;\n        }\n\n        // frameDelta is the cumulative amount of in-app time that hasn't been\n        // simulated yet. Add the time since the last frame. We need to track total\n        // not-yet-simulated time (as opposed to just the time elapsed since the\n        // last frame) because not all actually elapsed time is guaranteed to be\n        // simulated each frame. See the comments below for details.\n        frameDelta += timestamp - lastFrameTimeMs;\n        lastFrameTimeMs = timestamp;\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setBegin()` for additional details on how to use this.\n        begin(timestamp, frameDelta);\n\n        // Update the estimate of the frame rate, `fps`. Every second, the number\n        // of frames that occurred in that second are included in an exponential\n        // moving average of all frames per second, with an alpha of 0.25. This\n        // means that more recent seconds affect the estimated frame rate more than\n        // older seconds.\n        if (timestamp > lastFpsUpdate + 1000) {\n            // Compute the new exponential moving average with an alpha of 0.25.\n            // Using constants inline is okay here.\n            fps = 0.25 * framesThisSecond + 0.75 * fps;\n\n            lastFpsUpdate = timestamp;\n            framesThisSecond = 0;\n        }\n\n        framesThisSecond += 1;\n\n        /*\n        * A naive way to move an object along its X-axis might be to write a main\n        * loop containing the statement `obj.x += 10;` which would move the object\n        * 10 units per frame. This approach suffers from the issue that it is\n        * dependent on the frame rate. In other words, if your application is\n        * running slowly (that is, fewer frames per second), your object will also\n        * appear to move slowly, whereas if your application is running quickly\n        * (that is, more frames per second), your object will appear to move\n        * quickly. This is undesirable, especially in multiplayer/multi-user\n        * applications.\n        *\n        * One solution is to multiply the speed by the amount of time that has\n        * passed between rendering frames. For example, if you want your object to\n        * move 600 units per second, you might write `obj.x += 600 * delta`, where\n        * `delta` is the time passed since the last frame. (For convenience, let's\n        * move this statement to an update() function that takes `delta` as a\n        * parameter.) This way, your object will move a constant distance over\n        * time. However, at low frame rates and high speeds, your object will move\n        * large distances every frame, which can cause it to do strange things\n        * such as move through walls. Additionally, we would like our program to\n        * be deterministic. That is, every time we run the application with the\n        * same input, we would like exactly the same output. If the time between\n        * frames (the `delta`) varies, our output will diverge the longer the\n        * program runs due to accumulated rounding errors, even at normal frame\n        * rates.\n        *\n        * A better solution is to separate the amount of time simulated in each\n        * update() from the amount of time between frames. Our update() function\n        * doesn't need to change; we just need to change the delta we pass to it\n        * so that each update() simulates a fixed amount of time (that is, `delta`\n        * should have the same value each time update() is called). The update()\n        * function can be run multiple times per frame if needed to simulate the\n        * total amount of time passed since the last frame. (If the time that has\n        * passed since the last frame is less than the fixed simulation time, we\n        * just won't run an update() until the the next frame. If there is\n        * unsimulated time left over that is less than our timestep, we'll just\n        * leave it to be simulated during the next frame.) This approach avoids\n        * inconsistent rounding errors and ensures that there are no giant leaps\n        * through walls between frames.\n        *\n        * That is what is done below. It introduces a new problem, but it is a\n        * manageable one: if the amount of time spent simulating is consistently\n        * longer than the amount of time between frames, the application could\n        * freeze and crash in a spiral of death. This won't happen as long as the\n        * fixed simulation time is set to a value that is high enough that\n        * update() calls usually take less time than the amount of time they're\n        * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\n        * for a discussion of ways to stop it.\n        *\n        * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\n        * considerations.\n        *\n        * Further reading for those interested:\n        *\n        * - http://gameprogrammingpatterns.com/game-loop.html\n        * - http://gafferongames.com/game-physics/fix-your-timestep/\n        * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\n        * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\n        */\n        numUpdateSteps = 0;\n        while (frameDelta >= simulationTimestep) {\n            update(simulationTimestep);\n            frameDelta -= simulationTimestep;\n\n            /*\n            * Sanity check: bail if we run the loop too many times.\n            *\n            * One way this could happen is if update() takes longer to run than\n            * the time it simulates, thereby causing a spiral of death. For ways\n            * to avoid this, see `MainLoop.setEnd()`. Another way this could\n            * happen is if the browser throttles serving frames, which typically\n            * occurs when the tab is in the background or the device battery is\n            * low. An event outside of the main loop such as audio processing or\n            * synchronous resource reads could also cause the application to hang\n            * temporarily and accumulate not-yet-simulated time as a result.\n            *\n            * 240 is chosen because, for any sane value of simulationTimestep, 240\n            * updates will simulate at least one second, and it will simulate four\n            * seconds with the default value of simulationTimestep. (Safari\n            * notifies users that the script is taking too long to run if it takes\n            * more than five seconds.)\n            *\n            * If there are more updates to run in a frame than this, the\n            * application will appear to slow down to the user until it catches\n            * back up. In networked applications this will usually cause the user\n            * to get out of sync with their peers, but if the updates are taking\n            * this long already, they're probably already out of sync.\n            */\n            if (++numUpdateSteps >= 240) {\n                panic = true;\n                break;\n            }\n        }\n\n        /*\n        * Render the screen. We do this regardless of whether update() has run\n        * during this frame because it is possible to interpolate between updates\n        * to make the frame rate appear faster than updates are actually\n        * happening. See `MainLoop.setDraw()` for an explanation of how to do\n        * that.\n        *\n        * We draw after updating because we want the screen to reflect a state of\n        * the application that is as up-to-date as possible. (`MainLoop.start()`\n        * draws the very first frame in the application's initial state, before\n        * any updates have occurred.) Some sources speculate that rendering\n        * earlier in the requestAnimationFrame callback can get the screen painted\n        * faster; this is mostly not true, and even when it is, it's usually just\n        * a trade-off between rendering the current frame sooner and rendering the\n        * next frame later.\n        *\n        * See `MainLoop.setDraw()` for details about draw() itself.\n        */\n        draw(frameDelta / simulationTimestep);\n\n        // Run any updates that are not dependent on time in the simulation. See\n        // `MainLoop.setEnd()` for additional details on how to use this.\n        end(fps, panic);\n\n        panic = false;\n\n        // Run the loop again the next time the browser is ready to render.\n        rafHandle = requestAnimationFrame(animate);\n    }\n\n    return MainLoop;\n}\n\nexport default { create };\n","const specialKeys = {\n    ';': 186,\n    '=': 187,\n    ',': 188,\n    '-': 189,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '[': 219,\n    '\\\\': 220,\n    ']': 221,\n    '\\'': 222\n};\n\nconst specialKeysShift = {\n    ':': 186,\n    '+': 187,\n    '<': 188,\n    _: 189,\n    '>': 190,\n    '?': 191,\n    '~': 192,\n    '{': 219,\n    '|': 220,\n    '}': 221,\n    '\"': 222\n};\n\nconst numberKeys = {\n    0: 48,\n    1: 49,\n    2: 50,\n    3: 51,\n    4: 52,\n    5: 53,\n    6: 54,\n    7: 55,\n    8: 56,\n    9: 57\n};\n\nconst letterKeys = {\n    A: 65,\n    B: 66,\n    C: 67,\n    D: 68,\n    E: 69,\n    F: 70,\n    G: 71,\n    H: 72,\n    I: 73,\n    J: 74,\n    K: 75,\n    L: 76,\n    M: 77,\n    N: 78,\n    O: 79,\n    P: 80,\n    Q: 81,\n    R: 82,\n    S: 83,\n    T: 84,\n    U: 86,\n    V: 86,\n    W: 87,\n    X: 88,\n    Y: 89,\n    Z: 90\n};\n\nconst keys = {\n    BACKSPACE: 8,\n    CTRL: 17,\n    SPACE: 32,\n    ENTER: 13,\n    SHIFT: 16,\n    ESC: 27,\n    TAB: 9,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n};\n\nfor (const key of Object.keys(specialKeys)) {\n    keys[key] = specialKeys[key];\n}\n\nfor (const key of Object.keys(numberKeys)) {\n    keys[key] = numberKeys[key];\n}\n\nfor (const key of Object.keys(letterKeys)) {\n    keys[key] = letterKeys[key];\n}\n\nconst shiftKeys = {};\n\nfor (const shiftKey of Object.keys(specialKeysShift)) {\n    shiftKeys[shiftKey] = specialKeysShift[shiftKey];\n}\n\nconst codes = {};\nconst codesShift = {};\n\nconst Keyboard = {\n    _pressed: {},\n    shiftDown: false,\n    lastPressed: null,\n    lastPressedIsChar () {\n        const charKeys = Object.keys(specialKeys).concat(Object.keys(numberKeys)).concat(Object.keys(letterKeys));\n        const charCodes = [];\n\n        for (const charKey of charKeys) {\n            charCodes.push(keys[charKey]);\n        }\n\n        if (this.lastPressed && charCodes.indexOf(this.lastPressed) !== -1) {\n            return true;\n        }\n\n        return false;\n    },\n\n    lastPressedChar () {\n        if (this.shiftDown) {\n            if (Object.keys(shiftKeys).indexOf(codesShift[this.lastPressed]) !== -1) {\n                return codesShift[this.lastPressed];\n            }\n\n            return codes[this.lastPressed].toUpperCase();\n        }\n\n        return codes[this.lastPressed].toLowerCase();\n    },\n\n    isDown (keyCode) {\n        return this._pressed[keyCode];\n    },\n\n    onKeydown (event) {\n        this.shiftDown = event.shiftKey;\n        this.lastPressed = event.keyCode;\n        this._pressed[event.keyCode] = true;\n    },\n\n    onKeyup (event) {\n        this._pressed[event.keyCode] = false;\n    },\n\n    keyByCode (code) {\n        return codes[code];\n    },\n\n    get pressedCodes () {\n        return this._pressed;\n    },\n\n    get pressedKeys () {\n        const pressed = [];\n\n        for (const code of this._pressed) {\n            pressed.push(this.keyByCode(code));\n        }\n\n        return pressed;\n    },\n\n    keys: keys,\n    get letterKeyCodes () {\n        const letterCodes = [];\n\n        for (const key of Object.keys(letterKeys)) {\n            letterCodes.push(letterKeys[key]);\n        }\n\n        return letterCodes;\n    }\n};\n\nfor (const key of Object.keys(keys)) {\n    const code = keys[key];\n\n    codes[code] = key;\n    Keyboard[key] = code;\n}\n\nfor (const shiftKey of Object.keys(shiftKeys)) {\n    const code = shiftKeys[shiftKey];\n\n    codesShift[code] = shiftKey;\n    Keyboard[shiftKey] = code;\n}\n\nwindow.addEventListener('keyup', function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    Keyboard.onKeyup(event);\n}, false);\n\nwindow.addEventListener('keydown', function (event) {\n    console.log(event)\n    event.preventDefault();\n    event.stopPropagation();\n    Keyboard.onKeydown(event);\n}, false);\n\nexport default Keyboard;\n","/**\n * Copyright 2014 Christopher Dolphin. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author dolphin@likethemammal.com (Chris Dolphin)\n */\n\n/**\n * GamepadMicro provides an easy interface to the Gamepad API.\n *\n * @constructor\n */\nfunction GamepadMicro () {\n    this._buttonNames = [\n        'actionSouth',\n        'actionEast',\n        'actionWest',\n        'actionNorth',\n        'leftBumper',\n        'rightBumper',\n        'leftTrigger',\n        'rightTrigger',\n        'select',\n        'start',\n        'leftStick',\n        'rightStick',\n        'dPadUp',\n        'dPadDown',\n        'dPadLeft',\n        'dPadRight',\n        'extra'\n    ];\n\n    this.reset();\n}\n\nGamepadMicro.prototype.reset = function () {\n    this._ticking = false;\n    this._prevTimestamps = [];\n    this._connectionListening = false;\n    this._updateCallback = function () {};\n    this._prevRawGamepadTypes = [];\n    this.gamepadconnected = _getRawGamepads.length > 0;\n    this.gamepadConnected = Boolean(this.gamepadconnected);\n    this.gamepadSupported = Boolean(_gamepadSupported());\n    this.gamepads = [];\n    this._heldButtonDelay = 200;\n    this._heldTimestampByGamepad = {};\n};\n\nconst _newGamepad = function () {\n    return {\n        leftStick: { x: 0, y: 0 },\n        rightStick: { x: 0, y: 0 },\n        dPad: { x: 0, y: 0 },\n        buttons: {},\n        _pressed: {},\n        timestamp: 0\n    };\n};\n\nGamepadMicro.prototype.onUpdate = function (callback) {\n    this._updateCallback = callback;\n    this._checkForEvents();\n    this._setupPoll();\n};\n\nGamepadMicro.prototype.offUpdate = function () {\n    this._shouldRemoveEvents();\n    this._removePoll();\n};\n\nGamepadMicro.prototype.update = function () {\n    this._updateCallback(this.gamepads);\n};\n\nGamepadMicro.prototype._checkForEvents = function () {\n    if (!this._connectionListening) {\n        window.addEventListener('gamepadconnected', this._onGamepadConnected.bind(this), false);\n        window.addEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this), false);\n        this._connectionListening = true;\n    }\n};\n\nGamepadMicro.prototype._shouldRemoveEvents = function () {\n    if (this._connectionListening) {\n        window.removeEventListener('gamepadconnected', this._onGamepadConnected.bind(this));\n        window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this));\n        this._connectionListening = false;\n    }\n};\n\nGamepadMicro.prototype._onGamepadConnected = function (event) {\n    const gamepad = event.gamepad;\n\n    if (gamepad.mapping === 'standard') {\n        this.gamepads[gamepad.index] = _newGamepad();\n        this.gamepadconnected = true;\n\n        this.update();\n    }\n};\n\nGamepadMicro.prototype._onGamepadDisconnected = function (event) {\n    const disconnectedGamepad = event.gamepad;\n    const gamepads = this.gamepads;\n\n    gamepads.forEach(function (gamepad, index) {\n        if (index === disconnectedGamepad.index) {\n            gamepads.splice(index, 1);\n        }\n    });\n\n    if (!gamepads.length) {\n        this.gamepadconnected = false;\n    }\n\n    this.update();\n};\n\nconst _getRawGamepads = function () {\n    const gamepads = (navigator.getGamepads && navigator.getGamepads()) || (navigator.webkitGetGamepads && navigator.webkitGetGamepads());\n    const standardGamepads = [];\n\n    if (gamepads) {\n        for (let i = 0, len = gamepads.length; i < len; i++) {\n            const gp = gamepads[i];\n\n            if (gp && gp.mapping === 'standard') {\n                standardGamepads.push(gp);\n            }\n        }\n    }\n\n    return standardGamepads;\n};\n\nconst _buttonPressed = function (gamepad, index) {\n    if (!gamepad || !gamepad.buttons || index >= gamepad.buttons.length) {\n        return false;\n    }\n\n    const b = gamepad.buttons[index];\n    let pressure = null;\n\n    if (!b) {\n        return false;\n    }\n\n    pressure = b;\n\n    if (typeof b === 'object') {\n        pressure = b.value;\n    }\n\n    return (pressure === 1.0);\n};\n\nGamepadMicro.prototype._checkForGamepadChange = function () {\n    const rawGamepads = _getRawGamepads();\n    let changed = false;\n    const changedRawGamepads = {};\n    let gamepadIndex = 0;\n\n    for (let i = 0; i < rawGamepads.length; i++) {\n        const gamepad = rawGamepads[i];\n        let heldTimestamps = null;\n        let hasBeenHeld = null;\n\n        if (!gamepad.timestamp) {\n            continue;\n        }\n\n        gamepadIndex = gamepad.index;\n\n        // Browsers don't update the gamepad timestamp if a button remains held.\n        // This is a manual check to see if any button has been held. Since the\n        // browser would tell us if it released, we'll assume some button is\n        // still held and announce it's continued heldness.\n        heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n        hasBeenHeld = Object.keys(heldTimestamps).length === 0;\n\n        // Don’t do anything if the current timestamp is the same as previous\n        // one, which means that the state of the gamepad hasn’t changed.\n        // This is only supported by Chrome right now, so the first check\n        // makes sure we’re not doing anything if the timestamps are empty\n        // or undefined.\n\n        if (gamepad.timestamp === this._prevTimestamps[gamepadIndex] && hasBeenHeld) {\n            continue;\n        }\n\n        this._prevTimestamps[gamepadIndex] = gamepad.timestamp;\n        changedRawGamepads[gamepadIndex] = gamepad;\n        changed = true;\n    }\n\n    return (changed) ? changedRawGamepads : false;\n};\n\nGamepadMicro.prototype._poll = function () {\n    const rawGamepads = this._checkForGamepadChange();\n\n    if (!rawGamepads) {\n        return;\n    }\n\n    this.gamepadconnected = true;\n    this.gamepadConnected = true;\n    this.gamepadSupported = true;\n\n    const currentGamepads = this.gamepads;\n    const buttonNames = this._buttonNames;\n\n    Object.keys(rawGamepads).map((gamepadIndex) => {\n        const currentRawGamepad = rawGamepads[gamepadIndex];\n\n        if (!currentRawGamepad) {\n            return;\n        }\n\n        // Gamepad(s) has changed\n        if (typeof currentRawGamepad !== this._prevRawGamepadTypes[gamepadIndex]) {\n            this._prevRawGamepadTypes[gamepadIndex] = typeof currentGamepad;\n        }\n\n        const activeButtons = {};\n        const currentGamepad = currentGamepads[gamepadIndex] || _newGamepad();\n        const heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n\n        for (let k = 0, len = buttonNames.length; k < len; k++) {\n            const name = buttonNames[k];\n            const heldTimestamp = heldTimestamps[name];\n            let isSameTimestamp = null;\n            const wasDown = Boolean(currentGamepad._pressed[name]);\n            const isDown = currentGamepad._pressed[name] = _buttonPressed(currentRawGamepad, k);\n            const now = Date.now();\n\n            if (wasDown && !isDown) {\n                activeButtons[name] = {\n                    released: true,\n                    held: false\n                };\n\n                if (heldTimestamps) {\n                    delete heldTimestamps[name];\n                }\n            } else if (isDown) {\n                if (heldTimestamp) {\n                    isSameTimestamp = heldTimestamp.gamepadTimestamp === currentRawGamepad.timestamp;\n\n                    // If the gamepad timestamp hasn't changed and the time is after the held delay\n                    if ((isSameTimestamp && now > heldTimestamp.browserTimestamp + this._heldButtonDelay) || (currentRawGamepad.timestamp > heldTimestamp.gamepadTimestamp + this._heldButtonDelay)) {\n                        activeButtons[name] = {\n                            held: true\n                        };\n                    }\n                } else {\n                    heldTimestamps[name] = {\n\n                        // Gamepad Timestamps are HighResTimeStamps relative when gamepad was connected\n                        gamepadTimestamp: currentRawGamepad.timestamp,\n                        browserTimestamp: now\n                    };\n                }\n            }\n        }\n\n        this._heldTimestampByGamepad[gamepadIndex] = heldTimestamps;\n\n        currentGamepad.timestamp = currentRawGamepad.timestamp;\n        currentGamepad.buttons = activeButtons;\n\n        // update the sticks\n        currentGamepad.leftStick.x = currentRawGamepad.axes[0];\n        currentGamepad.leftStick.y = currentRawGamepad.axes[1];\n        currentGamepad.rightStick.x = currentRawGamepad.axes[2];\n        currentGamepad.rightStick.y = currentRawGamepad.axes[3];\n\n        // dpad isn't a true stick, infer from buttons\n        currentGamepad.dPad.x = (currentGamepad.buttons.dPadLeft ? -1 : 0) + (currentGamepad.buttons.dPadRight ? 1 : 0);\n        currentGamepad.dPad.y = (currentGamepad.buttons.dPadUp ? -1 : 0) + (currentGamepad.buttons.dPadDown ? 1 : 0);\n\n        this.gamepads[gamepadIndex] = currentGamepad;\n    });\n\n    this.update();\n};\n\nGamepadMicro.prototype._setupPoll = function () {\n    if (!this._ticking) {\n        this._ticking = true;\n        this._tick();\n    }\n};\n\nGamepadMicro.prototype._tick = function () {\n    const tickFunc = GamepadMicro.prototype._tick.bind(this);\n\n    this._poll();\n\n    if (this._ticking) {\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(tickFunc);\n        } else if (window.mozRequestAnimationFrame) {\n            window.mozRequestAnimationFrame(tickFunc);\n        } else if (window.webkitRequestAnimationFrame) {\n            window.webkitRequestAnimationFrame(tickFunc);\n        }\n    }\n};\n\nGamepadMicro.prototype._removePoll = function () {\n    this._ticking = false;\n};\n\nconst _gamepadSupported = function () {\n    return navigator.getGamepads ||\n        Boolean(navigator.webkitGetGamepads) ||\n        Boolean(navigator.webkitGamepads);\n};\n\nexport default GamepadMicro;\n","import GamepadMicro from './utils/gamepad-micro';\n\nconst _gp = new GamepadMicro();\nlet _gamepads = [];\n\nconst Gamepad = {\n    isDown: function (index, button) {\n        if (_gamepads.length > 0) {\n            // FIXME rewrite gamepad-micro\n            const gamepad = _gamepads[index + 1];\n\n            if (gamepad.buttons[button] && gamepad.buttons[button].held) {\n                return true;\n            }\n\n            return false;\n        }\n    },\n    isStickDown: function (index, stick, direction) {\n        if (_gamepads.length > 0) {\n            // FIXME rewrite gamepad-micro\n            const gamepad = _gamepads[index + 1];\n\n            if (stick === 'right' && gamepad.rightStick) {\n                if (direction === 'right') {\n                    if (gamepad.rightStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === 'left') {\n                    if (gamepad.rightStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'up') {\n                    if (gamepad.rightStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'down') {\n                    if (gamepad.rightStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n\n            if (stick === 'left' && gamepad.leftStick) {\n                if (direction === 'right') {\n                    if (gamepad.leftStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === 'left') {\n                    if (gamepad.leftStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'up') {\n                    if (gamepad.leftStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'down') {\n                    if (gamepad.leftStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n};\n\n_gp.onUpdate(function (gamepads) {\n    _gamepads = gamepads;\n\n    if (_gp.gamepadsConnected) {\n\n    } else {\n\n    }\n});\n\nexport default Gamepad;\n","import Keyboard from './Keyboard';\nimport Gamepad from './Gamepad';\n\nclass HumanInput {\n    constructor () {\n        this._previousKeyboardKeys = {};\n        this._previousGamepadStick = {};\n        this._previousGamepadButton = {};\n        this.gamepadIndex = 0;\n    }\n\n    keyboardDownOnce (keyCode) {\n        if (!this._previousKeyboardKeys[keyCode] && Keyboard.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = true;\n\n            return true;\n        } else if (this._previousKeyboardKeys[keyCode] && !Keyboard.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = false;\n        }\n\n        return false;\n    }\n\n    gamepadStickDownOnce (stick, direction) {\n        if (!this._previousGamepadStick[stick + direction] &&\n                !Gamepad.isStickDown(this.gamepadIndex, stick, direction)) {\n            this._previousGamepadStick[stick + direction] = true;\n        } else if (this._previousGamepadStick[stick + direction] &&\n                !Gamepad.isStickDown(this.gamepadIndex, stick, direction)) {\n            this._previousGamepadStick[stick + direction] = false;\n        }\n    }\n\n    gamepadButtonDownOnce (button) {\n        if (!this._previousGamepadButton[button] && !Gamepad.isDown(this.gamepadIndex, button)) {\n            this._previousGamepadButton[button] = true;\n        } else if (this._previousGamepadButton[button] && !Gamepad.isDown(this.gamepadIndex, button)) {\n            this._previousGamepadButton[button] = false;\n        }\n    }\n}\n\nexport default HumanInput;\n","import Keyboard from '../../engine/input/Keyboard';\nimport Gamepad from '../../engine/input/Gamepad';\nimport HumanInput from '../../engine/input/HumanInput';\n\nclass MenuInput extends HumanInput {\n    constructor (state) {\n        super();\n\n        this.state = state;\n    }\n\n    update () {\n        const state = this.state;\n        const selectedItem = state.currentMenu.selectedItem;\n\n        // Do not change selection while editing\n        if (!selectedItem.isEditing) {\n            if (this.keyboardDownOnce(Keyboard.UP) || Gamepad.isStickDown(0, 'left', 'up')) {\n                state.currentMenu.moveUp();\n            } else if (this.keyboardDownOnce(Keyboard.DOWN) || Gamepad.isStickDown(0, 'left', 'down')) {\n                state.currentMenu.moveDown();\n            }\n        }\n\n        if (selectedItem.editable && selectedItem.isEditing) {\n            if (this.keyboardDownOnce(Keyboard.BACKSPACE)) {\n                selectedItem.value = selectedItem.value.slice(0, -1);\n            } else if (Keyboard.lastPressedIsChar()) {\n                if (this.keyboardDownOnce(Keyboard[Keyboard.keyByCode(Keyboard.lastPressed)])) {\n                    selectedItem.value += Keyboard.lastPressedChar();\n                }\n            }\n        }\n\n        if (this.keyboardDownOnce(Keyboard.ENTER) || this.keyboardDownOnce(Keyboard.SPACE) ||\n                this.gamepadButtonDownOnce('actionSouth')) {\n            state.currentMenu.selectCurrentItem();\n        }\n    }\n}\n\nexport default MenuInput;\n","import { Scene } from 'three';\n\nclass RenderView {\n    constructor () {\n        this.width = 800;\n        this.height = 600;\n        this._initialized = false;\n        this.clearColor = 0x000000;\n        this.viewContainers = new Map();\n        this._currentViewContainer = null;\n        this.currentViewContainerName = null;\n        this.camera = null;\n    }\n\n    init () {\n        this.scene = new Scene();\n\n        for (let [name, viewContainer] of this.viewContainers.entries()) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n\n            if (name === this.currentViewContainerName) {\n                viewContainer.visible = true;\n                this._currentViewContainer = viewContainer;\n            } else {\n                viewContainer.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this._currentViewContainer) {\n            this._currentViewContainer.update(delta);\n        } else {\n            console.warn('no current ViewContainer');\n        }\n    }\n\n    set size (size) {\n        this.width = size.width;\n        this.height = size.height;\n\n        if (this.camera) {\n            this.camera.aspect = this.width / this.height;\n            this.camera.updateProjectionMatrix();\n        }\n\n        if (this._initialized) {\n            for (const viewContainer of this.viewContainers.values()) {\n                viewContainer.width = this.width;\n                viewContainer.height = this.height;\n            }\n        }\n    }\n\n    set currentViewContainer (name) {\n        const newViewContainer = this.viewContainers.get(name);\n\n        if (this._initialized) {\n            if (this._currentViewContainer) {\n                this._currentViewContainer.visible = false;\n            }\n\n            newViewContainer.visible = true;\n        }\n\n        this.currentViewContainerName = name;\n        this._currentViewContainer = newViewContainer;\n    }\n\n    get currentViewContainer () {\n        return this._currentViewContainer;\n    }\n\n    addViewContainer (name, viewContainer) {\n        if (this._initialized) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n        }\n        this.viewContainers.set(name, viewContainer);\n    }\n}\n\nexport default RenderView;\n","import { OrthographicCamera } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\nclass MenuRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.menu = state.menus;\n        this.clearColor = 0x000000;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new OrthographicCamera(0, this.width,\n            this.height, 0, 0, 1);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.currentViewContainerName !== this.state.currentMenuName) {\n            this.currentViewContainer = this.state.currentMenuName;\n        }\n    }\n}\n\nexport default MenuRenderView;\n","import AssetManager from '../engine/AssetManager';\n\nclass StateAudio {\n    constructor (state, effectsSpriteName = null, backgroundSpriteName = null) {\n        this.state = state;\n        this.effectsSpriteName = effectsSpriteName;\n        this.backgroundSpriteName = backgroundSpriteName;\n\n        this.effects = null;\n        this.backgrounds = null;\n\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.effectsSpriteName) {\n            this.effects = AssetManager.getAudioSprite(this.effectsSpriteName).sound;\n        }\n\n        if (this.backgroundSpriteName) {\n            this.backgrounds = AssetManager.getAudioSprite(this.backgroundSpriteName).sound;\n        }\n\n        this._initialized = true;\n    }\n\n    stopEffects () {\n        if (this.effects) {\n            this.effects.stop();\n        }\n    }\n\n    stopBackground () {\n        if (this.backgrounds) {\n            this.backgrounds.stop();\n        }\n    }\n}\n\nexport default StateAudio;\n","import StateAudio from '../StateAudio';\n\nclass MenuAudio extends StateAudio {\n    constructor (state, effectsSpriteName, backgroundSpriteName) {\n        super(state, effectsSpriteName, backgroundSpriteName);\n\n        this.selectedItem = this.state.currentMenu.selectedItem;\n    }\n\n    update (delta) {\n        // Selected item changed\n        if (this.selectedItem !== this.state.currentMenu.selectedItem) {\n            this.selectedItem = this.state.currentMenu.selectedItem;\n            this.effects.play('select');\n        }\n    }\n}\n\nexport default MenuAudio;\n","class Menu {\n    constructor () {\n        this.menuItems = new Map();\n        this.menuItemKeys = [];\n        this.selectedItemIndex = 0;\n        this.freeze = false;\n    }\n\n    addMenuItem (menuItem) {\n        this.menuItemKeys.push(menuItem.name);\n        this.menuItems.set(menuItem.name, menuItem);\n    }\n\n    get selectedItem () {\n        return this.menuItems.get(this.menuItemKeys[this.selectedItemIndex]);\n    }\n\n    moveUp () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex > 0) {\n                this.selectedItemIndex -= 1;\n            } else {\n                this.selectedItemIndex = 0;\n            }\n        }\n    }\n\n    moveDown () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex < this.menuItemKeys.length - 1) {\n                this.selectedItemIndex += 1;\n            } else {\n                this.selectedItemIndex = this.menuItemKeys.length - 1;\n            }\n        }\n    }\n\n    selectCurrentItem () {\n        this.selectedItem.action();\n    }\n}\n\nexport default Menu;\n","class MenuItem {\n    constructor (name, text, onAction = null) {\n        this.name = name;\n        this.text = text;\n        this.onAction = onAction;\n        this.editable = false;\n    }\n\n    action () {\n        if (this.onAction) {\n            this.onAction(this);\n        }\n    }\n}\n\nexport default MenuItem;\n","import MenuItem from './MenuItem';\n\nclass MenuInputItem extends MenuItem {\n    constructor (name, label, defaultValue, onAction) {\n        super(name, label + ': ' + defaultValue, onAction);\n\n        this.label = label;\n        this.defaultValue = defaultValue;\n        this.isEditing = false;\n        this._value = defaultValue;\n        this.editable = true;\n    }\n\n    action () {\n        this.isEditing = !this.isEditing;\n\n        if (!this.isEditing && this.onAction) {\n            this.onAction(this._value);\n        }\n    }\n\n    set value (value) {\n        this._value = value;\n        this.text = this.label + ': ' + value;\n    }\n\n    get value () {\n        return this._value;\n    }\n}\n\nexport default MenuInputItem;\n","import { RepeatWrapping, Vector2 } from 'three';\nimport AssetManager from '../AssetManager';\n\nclass TextureAtlas {\n    constructor (name, clone, filter = {}) {\n        this.mapping = AssetManager.getAtlasMapping(name);\n\n        if (!this.mapping) {\n            throw new Error('TextureAtlas does not exists', name);\n        }\n\n        if (clone) {\n            this.texture = AssetManager.cloneTexture(name);\n        } else {\n            this.texture = AssetManager.getTexture(name);\n        }\n\n        this.texture.wrapS = RepeatWrapping;\n        this.texture.wrapT = RepeatWrapping;\n\n        this.width = this.mapping.meta.size.w;\n        this.height = this.mapping.meta.size.h;\n\n        this.frames = new Map();\n\n        for (const frame of this.mapping.frames) {\n            const d = frame.frame;\n\n            // Origin image is y-inverted compared to what THREE wants\n            const bounds = [\n                new Vector2(d.x / this.width, (this.height - (d.y)) / this.height), // lower left\n                new Vector2(d.x / this.width, (this.height - (d.y + d.h)) / this.height), // upper left\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y + d.h)) / this.height), // upper right\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y)) / this.height) // lower right\n            ];\n\n            this.frames.set(frame.filename, {\n                bounds: bounds,\n                frame: frame,\n                framePosition: {\n                    x: d.x,\n                    y: d.y\n                },\n                frameSize: {\n                    width: d.w,\n                    height: d.h\n                }\n            });\n        }\n    }\n\n    getFrameOffset (name) {\n        const d = this.frames.get(name + '.png').framePosition;\n\n        return new Vector2(d.x / this.width, (this.height - d.y) / this.height);\n    }\n\n    getFrameSize (name) {\n        return this.frames.get(name + '.png').frameSize;\n    }\n\n    getBounds (name) {\n        return this.frames.get(name + '.png').bounds;\n    }\n}\n\nexport default TextureAtlas;\n","import TextureAtlas from './TextureAtlas';\nconst _atlases = new Map();\n\nconst TextureManager = {\n    getAtlas (name, clone) {\n        if (clone) {\n            return new TextureAtlas(name, clone);\n        }\n\n        let atlas = _atlases.get(name);\n\n        if (!atlas) {\n            atlas = new TextureAtlas(name);\n\n            _atlases.set(name, atlas);\n        }\n\n        return atlas;\n    }\n};\n\nexport default TextureManager;\n","import { Vector2 } from 'three';\n\nclass TextureFrame {\n    constructor (textureAtlas, geometry, initialFrame, fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n        this.fixed = fixed;\n\n        if (initialFrame) {\n            this.frame = initialFrame;\n\n            if (fixed) {\n                const size = this.textureAtlas.getFrameSize(initialFrame);\n\n                this._changeSize(size.width, size.height);\n            }\n        }\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _changeSize (width, height) {\n        this.width = width;\n        this.height = height;\n        const aw = this.textureAtlas.width;\n        const ah = this.textureAtlas.height;\n\n        if (this.geometry) {\n            // TODO make this more efficient (no new instances necessary)\n            const bounds = [\n                new Vector2(0, ah / ah), // lower left\n                new Vector2(0, (ah - height) / ah), // upper left\n                new Vector2(width / aw, (ah - height) / ah), // upper right\n                new Vector2(width / aw, ah / ah) // lower right\n            ];\n\n            console.log(this.geometry.faces)\n            // If a geometry is merged, for example multiple planes\n            for (let i = 1; i < this.geometry.faceVertexUvs[0].length; i += 2) {\n                this.geometry.faceVertexUvs[0][i - 1] = [bounds[0], bounds[1], bounds[3]];\n                this.geometry.faceVertexUvs[0][i] = [bounds[1], bounds[2], bounds[3]];\n            }\n\n            this.geometry.uvsNeedUpdate = true;\n        }\n    }\n\n    set frame (frameName) {\n        const offset = this.textureAtlas.getFrameOffset(frameName);\n        const size = this.textureAtlas.getFrameSize(frameName);\n\n        // Size changed\n        if (!this.fixed) {\n            if (size.width !== this.width || size.height !== this.height) {\n                this._changeSize(size.width, size.height);\n            }\n        }\n\n        this.texture.offset = offset;\n    }\n}\n\nexport default TextureFrame;\n","class View {\n    constructor () {\n        this.mesh = null;\n        this.initialPosition = null;\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.initialPosition) {\n            if (!this.mesh) {\n                throw new Error('No mesh initialized!');\n            }\n\n            this.mesh.position.x = this.initialPosition.x;\n            this.mesh.position.y = this.initialPosition.y;\n            this.mesh.position.z = this.initialPosition.z;\n        }\n\n        this._initialized = true;\n    }\n\n    get position () {\n        return this.mesh.position;\n    }\n\n    set position ({ x, y, z }) {\n        if (this.mesh && this.initialized) {\n            if (x) {\n                this.mesh.position.x = x;\n            }\n\n            if (y) {\n                this.mesh.position.y = y;\n            }\n\n            if (z) {\n                this.mesh.position.z = z;\n            }\n        } else {\n            this.initialPosition = {\n                x: x,\n                y: y,\n                z: z\n            };\n        }\n    }\n}\n\nexport default View;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport TextureManager from './TextureManager';\nimport TextureFrame from './TextureFrame';\nimport View from './View';\n\nclass BackgroundView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n        this._width = null;\n        this._height = null;\n        this._lightness = 1;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const size = textureAtlas.getFrameSize(this.textureName);\n\n        this._width = size.width;\n        this._height = size.height;\n\n        this.geometry = new PlaneGeometry(size.width, size.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n\n        this.material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        const hsl = this.material.color.getHSL();\n\n        this.material.color.setHSL(hsl.h, hsl.s, this._lightness);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set lightness (lightness) {\n        if (this._initalized) {\n            const hsl = this.material.color.getHSL();\n\n            this.material.color.setHSL(hsl.h, hsl.s, lightness);\n        }\n\n        this._lightness = lightness;\n    }\n\n    get lightness () {\n        return this._lightness;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this.mesh.scale.x = scale;\n        this.mesh.position.x = width / 2;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this.mesh.scale.y = scale;\n        this.mesh.position.y = height / 2;\n    }\n}\n\nexport default BackgroundView;\n","import { Object3D } from 'three';\n\nclass ViewContainer {\n    constructor () {\n        this.staticViews = new Set();\n        this.dynamicViews = new Set();\n        this._backgroundView = null;\n        this._width = 800;\n        this._height = 600;\n\n        this._initialized = false;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        if (this._backgroundView) {\n            this._backgroundView.init();\n            this._backgroundView.width = this._width;\n            this._backgroundView.height = this._height;\n            this._backgroundView.mesh.renderOrder = -1;\n            this.mesh.add(this._backgroundView.mesh);\n        }\n\n        for (const staticView of this.staticViews) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        for (const view of this.dynamicViews) {\n            view.init();\n            this.mesh.add(view.mesh);\n        }\n\n        this._initialized = true;\n    }\n\n    set backgroundView (backgroundView) {\n        if (backgroundView !== this._backgroundView) {\n            if (this._initialized) {\n                this._backgroundView.init();\n                this._backgroundView.width = this._width;\n                this._backgroundView.height = this._height;\n                this._backgroundView.mesh.renderOrder = -1;\n                this.mesh.remove(this._backgroundView);\n            }\n\n            this._backgroundView = backgroundView;\n        } else {\n            console.warn('backgroundView is the same');\n        }\n    }\n\n    update (delta) {\n        if (!this._initialized) {\n            throw new Error('View not initialized.');\n        }\n\n        for (const view of this.dynamicViews) {\n            view.update(delta);\n        }\n    }\n\n    addStaticView (staticView, position) {\n        if (this._initialized) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        if (position) {\n            staticView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.staticViews.add(staticView);\n    }\n\n    addDynamicView (dynamicView, position) {\n        if (this._initialized) {\n            dynamicView.init();\n            this.mesh.add(dynamicView.mesh);\n        }\n\n        if (position) {\n            dynamicView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.dynamicViews.add(dynamicView);\n    }\n\n    set visible (visible) {\n        this.mesh.visible = visible;\n    }\n\n    get visible () {\n        return this.mesh.visible;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this._width = width;\n\n        if (this._backgroundView) {\n            this._backgroundView.width = this._width;\n        }\n\n        this.mesh.scale.x = scale;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this._height = height;\n\n        if (this._backgroundView) {\n            this._backgroundView.height = this._height;\n        }\n\n        this.mesh.scale.y = scale;\n    }\n}\n\nexport default ViewContainer;\n","import TextureFrame from './TextureFrame';\n\nclass Animation {\n    constructor (textureAtlas, geometry, interval = 10, repeat = true, frames = [],\n            framePrefix = '', fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n\n        // Use the first frame as a size reference\n        this.textureFrame = new TextureFrame(this.textureAtlas, geometry, framePrefix + frames[0], fixed);\n\n        this.interval = interval;\n        this.frames = frames;\n        this.framePrefix = framePrefix;\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n\n        this._updateTexture();\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _updateTexture () {\n        const currentFrame = this.framePrefix + this.frames[this.currentFrameIndex];\n\n        this.textureFrame.frame = currentFrame;\n    }\n\n    reset () {\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n    }\n\n    update (delta) {\n        this.currentDisplayTime += 1;\n\n        if (this.currentDisplayTime > this.interval) {\n            this.currentDisplayTime = 0;\n\n            this.currentFrameIndex++;\n\n            if (this.currentFrameIndex >= this.frames.length) {\n                this.currentFrameIndex = 0;\n            }\n\n            this._updateTexture();\n        }\n    }\n\n    get currentFrame () {\n        return this.frames[this.currentFrameIndex];\n    }\n}\n\nexport default Animation;\n","var itemSize = 2\nvar box = { min: [0, 0], max: [0, 0] }\n\nfunction bounds (positions) {\n  var count = positions.length / itemSize\n  box.min[0] = positions[0]\n  box.min[1] = positions[1]\n  box.max[0] = positions[0]\n  box.max[1] = positions[1]\n\n  for (var i = 0; i < count; i++) {\n    var x = positions[i * itemSize + 0]\n    var y = positions[i * itemSize + 1]\n    box.min[0] = Math.min(x, box.min[0])\n    box.min[1] = Math.min(y, box.min[1])\n    box.max[0] = Math.max(x, box.max[0])\n    box.max[1] = Math.max(y, box.max[1])\n  }\n}\n\nexport function computeBox (positions, output) {\n  bounds(positions)\n  output.min.set(box.min[0], box.min[1], 0)\n  output.max.set(box.max[0], box.max[1], 0)\n}\n\nexport function computeSphere (positions, output) {\n  bounds(positions)\n  var minX = box.min[0]\n  var minY = box.min[1]\n  var maxX = box.max[0]\n  var maxY = box.max[1]\n  var width = maxX - minX\n  var height = maxY - minY\n  var length = Math.sqrt(width * width + height * height)\n  output.center.set(minX + width / 2, minY + height / 2, 0)\n  output.radius = length / 2\n}\n","import * as wordWrap from 'word-wrapper';\nimport * as xtend from 'xtend';\nimport * as number from 'as-number';\n\nvar X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z']\nvar M_WIDTHS = ['m', 'w']\nvar CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\nvar TAB_ID = '\\t'.charCodeAt(0)\nvar SPACE_ID = ' '.charCodeAt(0)\nvar ALIGN_LEFT = 0,\n    ALIGN_CENTER = 1,\n    ALIGN_RIGHT = 2\n\nexport function createLayout(opt) {\n    return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n    this.glyphs = []\n    this._measure = this.computeMetrics.bind(this)\n    this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n    opt = xtend({\n        measure: this._measure\n    }, opt)\n    this._opt = opt\n    this._opt.tabSize = number(this._opt.tabSize, 4)\n\n    if (!opt.font)\n        throw new Error('must provide a valid bitmap font')\n\n    var glyphs = this.glyphs\n    var text = opt.text||''\n    var font = opt.font\n    this._setupSpaceGlyphs(font)\n\n    var lines = wordWrap.lines(text, opt)\n    var minWidth = opt.width || 0\n\n    //clear glyphs\n    glyphs.length = 0\n\n    //get max line width\n    var maxLineWidth = lines.reduce(function(prev, line) {\n        return Math.max(prev, line.width, minWidth)\n    }, 0)\n\n    //the pen position\n    var x = 0\n    var y = 0\n    var lineHeight = number(opt.lineHeight, font.common.lineHeight)\n    var baseline = font.common.base\n    var descender = lineHeight-baseline\n    var letterSpacing = opt.letterSpacing || 0\n    var height = lineHeight * lines.length - descender\n    var align = getAlignType(this._opt.align)\n\n    //draw text along baseline\n    y -= height\n\n    //the metrics for this text layout\n    this._width = maxLineWidth\n    this._height = height\n    this._descender = lineHeight - baseline\n    this._baseline = baseline\n    this._xHeight = getXHeight(font)\n    this._capHeight = getCapHeight(font)\n    this._lineHeight = lineHeight\n    this._ascender = lineHeight - descender - this._xHeight\n\n    //layout each glyph\n    var self = this\n    lines.forEach(function(line, lineIndex) {\n        var start = line.start\n        var end = line.end\n        var lineWidth = line.width\n        var lastGlyph\n\n        //for each glyph in that line...\n        for (var i=start; i<end; i++) {\n            var id = text.charCodeAt(i)\n            var glyph = self.getGlyph(font, id)\n            if (glyph) {\n                if (lastGlyph)\n                    x += getKerning(font, lastGlyph.id, glyph.id)\n\n                var tx = x\n                if (align === ALIGN_CENTER)\n                    tx += (maxLineWidth-lineWidth)/2\n                else if (align === ALIGN_RIGHT)\n                    tx += (maxLineWidth-lineWidth)\n\n                glyphs.push({\n                    position: [tx, y],\n                    data: glyph,\n                    index: i,\n                    line: lineIndex\n                })\n\n                //move pen forward\n                x += glyph.xadvance + letterSpacing\n                lastGlyph = glyph\n            }\n        }\n\n        //next line down\n        y += lineHeight\n        x = 0\n    })\n    this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n    //These are fallbacks, when the font doesn't include\n    //' ' or '\\t' glyphs\n    this._fallbackSpaceGlyph = null\n    this._fallbackTabGlyph = null\n\n    if (!font.chars || font.chars.length === 0)\n        return\n\n    //try to get space glyph\n    //then fall back to the 'm' or 'w' glyphs\n    //then fall back to the first glyph available\n    var space = getGlyphById(font, SPACE_ID)\n        || getMGlyph(font)\n        || font.chars[0]\n\n    //and create a fallback for tab\n    var tabWidth = this._opt.tabSize * space.xadvance\n    this._fallbackSpaceGlyph = space\n    this._fallbackTabGlyph = xtend(space, {\n        x: 0, y: 0, xadvance: tabWidth, id: TAB_ID,\n        xoffset: 0, yoffset: 0, width: 0, height: 0\n    })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n    var glyph = getGlyphById(font, id)\n    if (glyph)\n        return glyph\n    else if (id === TAB_ID)\n        return this._fallbackTabGlyph\n    else if (id === SPACE_ID)\n        return this._fallbackSpaceGlyph\n    return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n    var letterSpacing = this._opt.letterSpacing || 0\n    var font = this._opt.font\n    var curPen = 0\n    var curWidth = 0\n    var count = 0\n    var glyph\n    var lastGlyph\n\n    if (!font.chars || font.chars.length === 0) {\n        return {\n            start: start,\n            end: start,\n            width: 0\n        }\n    }\n\n    end = Math.min(text.length, end)\n    for (var i=start; i < end; i++) {\n        var id = text.charCodeAt(i)\n        var glyph = this.getGlyph(font, id)\n\n        if (glyph) {\n            //move pen forward\n            var xoff = glyph.xoffset\n            var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0\n            curPen += kern\n\n            var nextPen = curPen + glyph.xadvance + letterSpacing\n            var nextWidth = curPen + glyph.width\n\n            //we've hit our limit; we can't move onto the next glyph\n            if (nextWidth >= width || nextPen >= width)\n                break\n\n            //otherwise continue along our line\n            curPen = nextPen\n            curWidth = nextWidth\n            lastGlyph = glyph\n        }\n        count++\n    }\n\n    //make sure rightmost edge lines up with rendered glyphs\n    if (lastGlyph)\n        curWidth += lastGlyph.xoffset\n\n    return {\n        start: start,\n        end: start + count,\n        width: curWidth\n    }\n}\n\n//getters for the private vars\n;['width', 'height',\n    'descender', 'ascender',\n    'xHeight', 'baseline',\n    'capHeight',\n    'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n    Object.defineProperty(TextLayout.prototype, name, {\n        get: wrapper(name),\n        configurable: true\n    })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n    return (new Function([\n        'return function '+name+'() {',\n        '  return this._'+name,\n        '}'\n    ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n    if (!font.chars || font.chars.length === 0)\n        return null\n\n    var glyphIdx = findChar(font.chars, id)\n    if (glyphIdx >= 0)\n        return font.chars[glyphIdx]\n    return null\n}\n\nfunction getXHeight(font) {\n    for (var i=0; i<X_HEIGHTS.length; i++) {\n        var id = X_HEIGHTS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getMGlyph(font) {\n    for (var i=0; i<M_WIDTHS.length; i++) {\n        var id = M_WIDTHS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx]\n    }\n    return 0\n}\n\nfunction getCapHeight(font) {\n    for (var i=0; i<CAP_HEIGHTS.length; i++) {\n        var id = CAP_HEIGHTS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getKerning(font, left, right) {\n    if (!font.kernings || font.kernings.length === 0)\n        return 0\n\n    var table = font.kernings\n    for (var i=0; i<table.length; i++) {\n        var kern = table[i]\n        if (kern.first === left && kern.second === right)\n            return kern.amount\n    }\n    return 0\n}\n\nfunction getAlignType(align) {\n    if (align === 'center')\n        return ALIGN_CENTER\n    else if (align === 'right')\n        return ALIGN_RIGHT\n    return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n    start = start || 0\n    for (var i = start; i < array.length; i++) {\n        if (array[i].id === value) {\n            return i\n        }\n    }\n    return -1\n}\n","import { BufferGeometry, Box3, BufferAttribute, Sphere } from 'three';\nimport * as createIndices from 'quad-indices';\nimport * as vertices from './lib/vertices'\nimport * as utils from './lib/utils'\n\nimport {createLayout} from \"./lib/layout-bmfont-text\";\n\nexport class TextGeometry extends BufferGeometry {\n  constructor(opt) {\n    super();\n\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use these as default values for any subsequent\n    // calls to update()\n    this._opt = Object.assign({}, opt)\n\n    // also do an initial setup...\n    if (opt) this.update(opt)\n  }\n\n  update(opt) {\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use constructor defaults\n    opt = Object.assign({}, this._opt, opt)\n\n    if (!opt.font) {\n      throw new TypeError('must specify a { font } in options')\n    }\n\n    this.layout = createLayout(opt)\n\n    // get vec2 texcoords\n    var flipY = opt.flipY !== false\n\n    // the desired BMFont data\n    var font = opt.font\n\n    // determine texture size from font file\n    var texWidth = font.common.scaleW\n    var texHeight = font.common.scaleH\n\n    // get visible glyphs\n    var glyphs = this.layout.glyphs.filter(function (glyph) {\n      var bitmap = glyph.data\n      return bitmap.width * bitmap.height > 0\n    })\n\n    // provide visible glyphs for convenience\n    this.visibleGlyphs = glyphs\n\n    // get common vertex data\n    var positions = vertices.positions(glyphs)\n    var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY)\n    var indices = createIndices([], {\n      clockwise: true,\n      type: 'uint16',\n      count: glyphs.length\n    })\n\n    // update vertex data\n    this.setIndex(indices)\n    this.addAttribute('position', new BufferAttribute(positions, 2))\n    this.addAttribute('uv', new BufferAttribute(uvs, 2))\n\n    // update multipage data\n    if (!opt.multipage && 'page' in this.attributes) {\n      // disable multipage rendering\n      this.removeAttribute('page')\n    } else if (opt.multipage) {\n      // enable multipage rendering\n      var pages = vertices.pages(glyphs)\n      this.addAttribute('page', new BufferAttribute(pages, 1))\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere()\n    }\n\n    var positions = this.attributes.position.array\n    var itemSize = this.attributes.position.itemSize\n    if (!positions || !itemSize || positions.length < 2) {\n      this.boundingSphere.radius = 0\n      this.boundingSphere.center.set(0, 0, 0)\n      return\n    }\n    utils.computeSphere(positions, this.boundingSphere)\n    if (isNaN(this.boundingSphere.radius)) {\n      console.error('BufferGeometry.computeBoundingSphere(): ' +\n          'Computed radius is NaN. The ' +\n          '\"position\" attribute is likely to have NaN values.')\n    }\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3()\n    }\n\n    var bbox = this.boundingBox\n    var positions = this.attributes.position.array\n    var itemSize = this.attributes.position.itemSize\n    if (!positions || !itemSize || positions.length < 2) {\n      bbox.makeEmpty()\n      return\n    }\n    utils.computeBox(positions, bbox)\n  }\n}\n","export function pages (glyphs) {\n  var pages = new Float32Array(glyphs.length * 4 * 1)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var id = glyph.data.page || 0\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n  })\n  return pages\n}\n\nexport function uvs (glyphs, texWidth, texHeight, flipY) {\n  var uvs = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n    var bw = (bitmap.x + bitmap.width)\n    var bh = (bitmap.y + bitmap.height)\n\n    // top left position\n    var u0 = bitmap.x / texWidth\n    var v1 = bitmap.y / texHeight\n    var u1 = bw / texWidth\n    var v0 = bh / texHeight\n\n    if (flipY) {\n      v1 = (texHeight - bitmap.y) / texHeight\n      v0 = (texHeight - bh) / texHeight\n    }\n\n    // BL\n    uvs[i++] = u0\n    uvs[i++] = v1\n    // TL\n    uvs[i++] = u0\n    uvs[i++] = v0\n    // TR\n    uvs[i++] = u1\n    uvs[i++] = v0\n    // BR\n    uvs[i++] = u1\n    uvs[i++] = v1\n  })\n  return uvs\n}\n\nexport function positions (glyphs) {\n  var positions = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n\n    // bottom left position\n    var x = glyph.position[0] + bitmap.xoffset\n    var y = glyph.position[1] + bitmap.yoffset\n\n    // quad size\n    var w = bitmap.width\n    var h = bitmap.height\n\n    // BL\n    positions[i++] = x\n    positions[i++] = y\n    // TL\n    positions[i++] = x\n    positions[i++] = y + h\n    // TR\n    positions[i++] = x + w\n    positions[i++] = y + h\n    // BR\n    positions[i++] = x + w\n    positions[i++] = y\n  })\n  return positions\n}\n","import View from './View';\nimport AssetManager from '../AssetManager';\nimport { BufferGeometry, Mesh, MeshBasicMaterial } from 'three';\nimport { TextGeometry } from '../three-bmfont-text/index';\n\nclass TextView extends View {\n    constructor (text, options = {}) {\n        super();\n\n        const fontName = options.font || 'keep_calm';\n\n        this._text = text;\n        this.font = AssetManager.getFont(fontName);\n        this.width = options.width || 100;\n        this.align = options.aligh || 'left';\n        this._color = options.color || 0xff0000;\n    }\n\n    init () {\n        this.geometry = new TextGeometry({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping,\n            multipage: true\n        });\n\n        this.material = new MeshBasicMaterial({\n            map: this.font.textures[0],\n            transparent: true,\n            color: this._color\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.rotation.y = 180 * (Math.PI / 180);\n        this.mesh.rotation.z = 180 * (Math.PI / 180);\n\n        super.init();\n    }\n\n    get color () {\n        return this._color;\n    }\n\n    set color (color) {\n        this.material.color.setHex(color);\n    }\n\n    get text () {\n        return this._text;\n    }\n\n    get height () {\n        return this.geometry.layout.height;\n    }\n\n    _updateGeometry () {\n        this.geometry.update({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping\n        });\n\n        this.geometry.uvsNeedUpdate = true;\n    }\n\n    set text (text) {\n        text = text.toString();\n\n        // Check if text is not the same\n        if (text !== this._text) {\n            this._text = text;\n            this._updateGeometry();\n        }\n    }\n}\n\nexport default TextView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport { TextureFrame, TextureManager, View } from '../../../engine/graphics';\n\nclass LogoView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const logoSize = textureAtlas.getFrameSize(this.textureName);\n\n        this.geometry = new PlaneGeometry(logoSize.width, logoSize.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n        const material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n}\n\nexport default LogoView;\n","import { Object3D } from 'three';\nimport { TextView, View } from '../../../engine/graphics';\nimport LogoView from './LogoView';\n\nclass MenuItemsView extends View {\n    constructor (menu, options = {\n        selectedTextColor: 0x00ff00,\n        textColor: 0xffdddd\n    }) {\n        super();\n\n        this.menu = menu;\n        this.options = options;\n        this.viewMenuItemPairs = new Map();\n        this.selectedItem = null;\n        this.selectedView = null;\n        this.logoView = new LogoView('logo', 'ui');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const distance = 100;\n        const startY = 200;\n        let itemCount = 0;\n\n        this.selectedItem = this.menu.selectedItem;\n\n        for (const menuItem of this.menu.menuItems.values()) {\n            const textView = new TextView(menuItem.text, {\n                width: 300\n            });\n\n            textView.init();\n            textView.mesh.position.y = startY - (distance * itemCount);\n            textView.mesh.position.x += 100;\n\n            if (this.selectedItem === menuItem) {\n                textView.color = this.options.selectedTextColor;\n            } else {\n                textView.color = this.options.textColor;\n            }\n\n            this.viewMenuItemPairs.set(menuItem, textView);\n\n            this.mesh.add(textView.mesh);\n            itemCount += 1;\n        }\n\n        super.init();\n    }\n\n    update () {\n        // Selected item changed\n        if (this.selectedItem !== this.menu.selectedItem) {\n            const previousItem = this.selectedItem;\n\n            this.selectedItem = this.menu.selectedItem;\n\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n            const previousView = this.viewMenuItemPairs.get(previousItem);\n\n            currentView.text = this.selectedItem.text;\n\n            previousView.color = this.options.textColor;\n            currentView.color = this.options.selectedTextColor;\n        }\n\n        if (this.menu.selectedItem.editable && this.menu.selectedItem.isEditing) {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text + '-';\n        } else {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text;\n        }\n    }\n}\n\nexport default MenuItemsView;\n\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport MenuInputItem from '../../../engine/menu-system/MenuInputItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst OptionsMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuInputItem('name', 'Name', 'Unknown Soldier', function (value) {\n            menuState.changeOption('name', value);\n        }));\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default OptionsMenu;\n","/**\n * Base class for all states.\n *\n * @class\n */\nclass State {\n\n    /**\n     * @constructor\n     *\n     * @param {string} name - name of the state.\n     * @param {Engine} engine - game engine instance.\n     */\n    constructor (name, engine) {\n        this.name = name;\n        this.engine = engine;\n        this.inputs = new Set();\n        this.views = new Set();\n        this.audio = null;\n        this._initialized = false;\n    }\n\n    addView (view) {\n        this.views.add(view);\n    }\n\n    update () {\n        throw new TypeError('State requires update() method');\n    }\n\n    init () {\n        if (!this._initialized) {\n            if (this.audio) {\n                this.audio.init();\n            }\n\n            for (const view of this.views.values()) {\n                view.init();\n            }\n\n            this._initialized = true;\n        }\n    }\n\n    updateInputs (delta) {\n        for (const input of this.inputs.values()) {\n            input.update(delta);\n        }\n    }\n\n    render (delta) {\n        for (const view of this.views.values()) {\n            view.update(delta);\n        }\n    }\n\n    updateAudio (delta) {\n        if (this.audio) {\n            this.audio.update(delta);\n        }\n    }\n}\n\nexport default State;\n","import State from '../State';\n\n/**\n * State of playing the game.\n *\n * @class\n * @extends State\n */\nclass PlayState extends State {\n\n    constructor (match, map) {\n        super('play');\n\n        this.collisionSystem = null;\n        this.bulletSystem = null;\n        this.player = null;\n        this.map = map;\n        this.match = match;\n\n        // FIXME get this out of here\n        this.showScores = false;\n        this.paused = false;\n        this.onPause = null;\n    }\n\n    init () {\n        super.init();\n    }\n\n    get soldiers () {\n        return this.match.soldiers;\n    }\n\n    pause () {\n        if (this.onPause) {\n            this.onPause();\n        }\n\n        this.paused = true;\n    }\n\n    resume () {\n        this.paused = false;\n    }\n\n    /**\n     * Update the state. Logic and views are updated.\n     *\n     * @param {float} delta - delta time.\n     *\n     * @returns {void}\n     */\n    update (delta) {\n        super.updateInputs(delta);\n\n        if (this.paused) {\n            return;\n        }\n\n        super.updateAudio(delta);\n\n        // Relies on previous turn\n        if (this.bulletSystem) {\n            this.bulletSystem.update(delta);\n        }\n\n        for (const soldier of this.soldiers) {\n            soldier.update(delta);\n\n            if (soldier.dead) {\n                const position = this.map.randomRespawnPosition();\n\n                soldier.respawn(position);\n            }\n        }\n\n        this.match.update(delta);\n\n        if (this.collisionSystem) {\n            this.collisionSystem.update(delta);\n        }\n    }\n}\n\nexport default PlayState;\n","import { OrthographicCamera } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\n// TODO fix duplicate code of subviews\nclass StatsRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new OrthographicCamera(0, this.width,\n            this.height, 0, 0, 1);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n    }\n\n}\n\nexport default StatsRenderView;\n","import { Mesh, MeshBasicMaterial, Object3D, PlaneGeometry } from 'three';\nimport { TextView, TextureFrame, TextureManager, View } from '../../../engine/graphics';\n\nclass AmmoView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('ui', false);\n\n        const material = new MeshBasicMaterial({\n            map: textureAtlas.texture,\n            transparent: true\n        });\n\n        const ammoSize = textureAtlas.getFrameSize('ammo');\n\n        this.geometry = new PlaneGeometry(ammoSize.width, ammoSize.height);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'ammo');\n\n        const ammoMesh = new Mesh(this.geometry, material);\n\n        ammoMesh.scale.set(0.5, 0.5, 1);\n\n        this.magazineText = new TextView('0', {\n            color: 0xffffcc\n        });\n\n        this.magazineText.init();\n\n        this.magazineText.mesh.scale.set(2, 2, 1);\n\n        this.magazineText.position = {\n            x: ammoSize.width + 10,\n            y: -this.magazineText.height\n        };\n\n        this.mesh.add(this.magazineText.mesh);\n\n        this.ammoText = new TextView('0', {\n            color: 0xffff99\n        });\n\n        this.ammoText.init();\n\n        this.ammoText.mesh.scale.set(1, 1, 1);\n\n        this.ammoText.position = {\n            x: ammoSize.width + 64,\n            y: -this.ammoText.height\n        };\n\n        ammoMesh.position.x = 20;\n        this.magazineText.position.x = 40;\n        this.ammoText.position.x = 120;\n\n        this.mesh.add(this.ammoText.mesh);\n        this.mesh.add(ammoMesh);\n\n        super.init();\n    }\n\n    set ammo (ammo) {\n        if (ammo === null) {\n            this.ammoText.text = '-';\n        }\n        this.ammoText.text = ammo;\n    }\n\n    set magazine (magazine) {\n        if (magazine === null) {\n            this.magazineText.text = '-';\n        }\n        this.magazineText.text = magazine;\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.ammo = weapon.ammo;\n            this.magazine = weapon.magazine;\n        } else {\n            this.ammo = null;\n            this.magazine = null;\n        }\n    }\n}\n\nexport default AmmoView;\n","import { Matrix4, Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport View from '../../../engine/graphics/View';\n\nclass HealthView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._healthScale = 1;\n    }\n\n    init () {\n        const material = new MeshBasicMaterial({\n            color: 0xcc0000\n        });\n\n        this.geometry = new PlaneGeometry(200, 20);\n\n        // Change originX to left side\n        this.geometry.applyMatrix(new Matrix4().makeTranslation(100, 0, 0));\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n\n    set healthScale (value) {\n        if (value !== this._healthScale) {\n            this._healthScale = value;\n\n            if (value <= 0) {\n                this.mesh.visible = false;\n            } else {\n                if (!this.mesh.visible) {\n                    this.mesh.visible = true;\n                }\n\n                const oldX = this.mesh.position.x;\n\n                this.mesh.scale.set(value, 1, 1);\n                this.mesh.position.x = oldX;\n            }\n        }\n    }\n\n    update () {\n        this.healthScale = this.player.health / this.player.maxHealth;\n    }\n}\n\nexport default HealthView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport { TextureFrame, TextureManager, View } from '../../../engine/graphics';\n\nclass WeaponView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._weapon = null;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas('ui', true);\n\n        this.geometry = new PlaneGeometry(196, 64);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry);\n\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set weapon (weapon) {\n        if (this._weapon !== weapon) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            this._weapon = weapon;\n            this.textureFrame.frame = weapon;\n        } else if (weapon === null) {\n            if (this.mesh.visible) {\n                this.mesh.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.weapon = weapon.name;\n        } else {\n            this.weapon = null;\n        }\n    }\n}\n\nexport default WeaponView;\n","import { Mesh, MeshLambertMaterial, Object3D, PlaneGeometry } from 'three';\nimport { TextView, View } from '../../../engine/graphics';\n\nfunction converToText (teams) {\n    let resultText = '';\n\n    for (const [teamName, teamData] of teams.entries()) {\n        resultText += `${teamName} - k: ${teamData.kills} - d: ${teamData.deaths} \\n`;\n\n        const soldierText = [];\n\n        for (const soldier of teamData.soldiers) {\n            const text = `${soldier.name} - k: ${soldier.totalKills} - d: ${soldier.totalDeaths}`;\n\n            soldierText.push(text);\n        }\n\n        resultText += soldierText.join('\\n');\n        resultText += '\\n----------------------\\n';\n    }\n\n    return resultText;\n}\n\nclass ScoreView extends View {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.match = state.match;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const backgroundMaterial = new MeshLambertMaterial({\n            color: 0x00000,\n            transparent: true,\n            opacity: 0.5\n        });\n\n        const backgroundGeometry = new PlaneGeometry(600, 800);\n\n        this.mesh.add(new Mesh(backgroundGeometry, backgroundMaterial));\n\n        this.scoreTextView = new TextView(this._scoreText, {\n            color: 0xfeff80,\n            width: 600,\n            align: 'left'\n        });\n\n        this.scoreTextView.init();\n\n        this.mesh.visible = false;\n        this.mesh.add(this.scoreTextView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        if (this.state.showScores) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            const newScores = converToText(this.match.sortedScores());\n\n            // Scores have changed\n            this.scoreTextView.text = newScores;\n        } else if (this.mesh.visible) {\n            this.mesh.visible = false;\n        }\n    }\n}\n\nexport default ScoreView;\n","// https://github.com/kchapelier/migl-pool/blob/master/src/pool.js\nclass ObjectPool {\n\n    /**\n     * @constructor\n     * @param {function} factoryFunction Function that creates the object to pool.\n     * @param {number} firstAllocationNumber Initial amount of objects to allocate.\n     * @param {number} allocationNumber Number to increase the pool by when it is full.\n     * @param {number} allocationLimit Size limit of the pool.\n     */\n    constructor (factoryFunction, firstAllocationNumber, allocationNumber, allocationLimit) {\n        this.factoryFunction = factoryFunction;\n        this.totalInstances = 0;\n        this.allocationLimit = allocationLimit;\n        this.allocationNumber = allocationNumber;\n        this.availableInstances = [];\n        this.allocate(firstAllocationNumber);\n    }\n\n    get size () {\n        return this.totalInstances;\n    }\n\n    /**\n     * Instantiate a given number of elements and add them to the collection of available instances\n     * @param {number} number Number of elements to allocate\n     * @private\n     * @returns {Pool} Own instance for fluent interface\n     */\n    allocate (number) {\n        if (this.totalInstances + number < this.allocationLimit) {\n            this.totalInstances += number;\n\n            for (let i = 0; i < number; i++) {\n                this.availableInstances.push(this.factoryFunction());\n            }\n        } else {\n            throw new Error('ObjectPool allocation limit reached');\n        }\n\n        return this;\n    }\n\n    /**\n     * Retrieve an element for the collection of available instances, (re)initialize and return it.\n     * @returns {function} initializeFunction Function used to initialize a new instance.\n     */\n    get () {\n        // check if we still have enough available instances, instantiate new ones\n        if (this.availableInstances.length < 1) {\n            this.allocate(this.allocationNumber);\n        }\n\n        const object = this.availableInstances.pop();\n\n        return object;\n    }\n\n    /**\n     * Add a given element to the pool.\n     * @param {Object} object Element to add to the pool\n     * @returns {Pool} Own instance for fluent interface\n     */\n    free (object) {\n        if (this.availableInstances.indexOf(object) === -1) {\n            this.availableInstances.push(object);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clear all references.\n     * @returns {Pool} Own instance for fluent interface\n     */\n    clear () {\n        while (this.availableInstances.length) {\n            this.availableInstances.pop();\n        }\n\n        this.totalInstances = 0;\n\n        return this;\n    }\n}\n\nexport default ObjectPool;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport { TextureFrame, TextureManager, View } from '../../../engine/graphics';\n\nclass BulletView extends View {\n    constructor (bullet) {\n        super();\n\n        this.bullet = bullet;\n    }\n\n    init () {\n        const bullet = this.bullet;\n\n        const textureAtlas = TextureManager.getAtlas('world', false);\n\n        this.geometry = new PlaneGeometry(2, 8);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'bullet1');\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n        this.mesh = new Mesh(this.geometry, this.material);\n        this.mesh.position.set(bullet.position.x, bullet.position.y, bullet.position.z);\n        this.mesh.rotation.z = bullet.angle + (90 * (Math.PI / 180));\n\n        super.init();\n    }\n\n    update (interpolationPercentage) {\n        const previous = this.bullet.previousPosition;\n        const current = this.bullet.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n        this.mesh.rotation.z = this.bullet.angle + (90 * (Math.PI / 180));\n\n        if (this.bullet.dead) {\n            this.mesh.visible = false;\n        } else {\n            this.mesh.visible = true;\n        }\n    }\n}\n\nexport default BulletView;\n","import { Object3D } from 'three';\nimport ObjectPool from '../../../engine/ObjectPool';\nimport View from '../../../engine/graphics/View';\nimport BulletView from './BulletView';\n\nclass BulletSystemView extends View {\n    constructor (bulletSystem, options = {}) {\n        super();\n        this.bulletSystem = bulletSystem;\n        this.bulletViewPool = new ObjectPool(() => {\n            return new BulletView(null);\n        }, this.bulletSystem.poolSize, 10, options.poolLimit || 200);\n\n        this.bulletViewPairs = new WeakMap();\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        super.init();\n    }\n\n    update (delta) {\n        // Keep viewPool in sync with bullet pool\n        if (this.bulletSystem.poolSize > this.bulletViewPool.size) {\n            this.bulletViewPool.allocate(this.bulletSystem.poolSize - this.bulletViewPool.size);\n        }\n\n        // Clear previously killed bullets\n        for (const deadBullet of this.bulletSystem.deadBullets) {\n            const bulletView = this.bulletViewPairs.get(deadBullet);\n\n            if (bulletView) {\n                bulletView.update(delta);\n            }\n\n            this.bulletSystem.deadBullets.delete(deadBullet);\n        }\n\n        for (const bullet of this.bulletSystem.activeBullets) {\n            let bulletView = this.bulletViewPairs.get(bullet);\n\n            if (!bulletView) {\n                bulletView = this.bulletViewPool.get();\n\n                bulletView.bullet = bullet;\n                bulletView.init();\n\n                this.mesh.add(bulletView.mesh);\n\n                this.bulletViewPairs.set(bullet, bulletView);\n            }\n\n            bulletView.update(delta);\n        }\n    }\n}\n\nexport default BulletSystemView;\n","import { Animation, TextureManager, View } from '../../../../engine/graphics';\nimport { Matrix4, Geometry, Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\n\nconst WATER_FRAMES = [\n    'animation_water_0001',\n    'animation_water_0002',\n    'animation_water_0003',\n    'animation_water_0004',\n    'animation_water_0005',\n    'animation_water_0006',\n    'animation_water_0007',\n    'animation_water_0008',\n    'animation_water_0009'\n];\n\nfunction waterGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = waterGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass WaterBlocksView extends View {\n    constructor (map, textureAtlasName, waterFrames = WATER_FRAMES) {\n        super();\n\n        this.map = map;\n        this._textureAtlasName = textureAtlasName;\n        this._waterFrames = waterFrames;\n        this.blocks = map.blocks(['water']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        // Do not clone, since all water animates in sync\n        this.textureAtlas = TextureManager.getAtlas(this._textureAtlasName, true);\n\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.animation = new Animation(this.textureAtlas, this.geometry, 9, true, this._waterFrames, '', true);\n        this.animation.textureFrame.width = 100;\n        this.animation.textureFrame.height = 100;\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: false\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n\n    update () {\n        this.animation.update();\n    }\n}\n\nexport default WaterBlocksView;\n","import { DoubleSide, Matrix4, Mesh, MeshLambertMaterial, Geometry, PlaneGeometry } from 'three';\nimport { TextureManager, View } from '../../../../engine/graphics';\n\nfunction wallBlockGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.south) {\n        const south = textureAtlas.getBounds(block.walls.south);\n\n        const southGeometry = new PlaneGeometry(block.width, block.height);\n\n        southGeometry.faceVertexUvs[0][0] = [south[0], south[1], south[3]];\n        southGeometry.faceVertexUvs[0][1] = [south[1], south[2], south[3]];\n        southGeometry.rotateY(Math.PI / 2);\n        southGeometry.translate(block.width / 2, 0, 0);\n\n        geometries.push(southGeometry);\n    }\n\n    if (block.walls.north) {\n        const north = textureAtlas.getBounds(block.walls.north);\n\n        const northGeometry = new PlaneGeometry(block.width, block.height);\n\n        northGeometry.faceVertexUvs[0][0] = [north[0], north[1], north[3]];\n        northGeometry.faceVertexUvs[0][1] = [north[1], north[2], north[3]];\n        northGeometry.rotateY(-(Math.PI / 2));\n        northGeometry.translate(-(block.width / 2), 0, 0);\n\n        geometries.push(northGeometry);\n    }\n\n    if (block.walls.west) {\n        const west = textureAtlas.getBounds(block.walls.west);\n\n        const westGeometry = new PlaneGeometry(block.width, block.height);\n\n        westGeometry.faceVertexUvs[0][0] = [west[0], west[1], west[3]];\n        westGeometry.faceVertexUvs[0][1] = [west[1], west[2], west[3]];\n        westGeometry.rotateX((Math.PI / 2));\n        westGeometry.translate(0, -(block.height / 2), 0);\n\n        geometries.push(westGeometry);\n    }\n\n    if (block.walls.east) {\n        const east = textureAtlas.getBounds(block.walls.east);\n\n        const eastGeometry = new PlaneGeometry(block.width, block.height);\n\n        eastGeometry.faceVertexUvs[0][0] = [east[0], east[1], east[3]];\n        eastGeometry.faceVertexUvs[0][1] = [east[1], east[2], east[3]];\n        eastGeometry.rotateX(-(Math.PI / 2));\n        eastGeometry.rotateY((Math.PI / 2));\n        eastGeometry.translate(0, (block.height / 2), 0);\n\n        geometries.push(eastGeometry);\n    }\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = wallBlockGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass StaticBlocksView extends View {\n    constructor (map, textureAtlasName) {\n        super();\n\n        this.map = map;\n        this.textureAtlasName = textureAtlasName;\n        this.blocks = map.blocks(['wall']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        this.textureAtlas = TextureManager.getAtlas(this.textureAtlasName, false);\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: true,\n            side: DoubleSide\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n}\n\nexport default StaticBlocksView;\n","import { Mesh, MeshLambertMaterial, Object3D, PlaneGeometry, SpotLight } from 'three';\nimport { TextureFrame, TextureManager, View } from '../../../../engine/graphics';\n\nclass LightView extends View {\n    constructor (light) {\n        super();\n        this.light = light;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('world', true);\n        const lightGeometry = new PlaneGeometry(32, 32);\n\n        this.textureFrame = new TextureFrame(textureAtlas, lightGeometry, 'light1');\n\n        const lightMaterial = new MeshLambertMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        const lightMesh = new Mesh(lightGeometry, lightMaterial);\n\n        lightMesh.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        lightMesh.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(lightMesh);\n\n        const spotLight = new SpotLight(0xff00000, 1);\n\n        const target = new Object3D();\n\n        target.position.set(this.light.x, this.light.y, -this.light.z);\n        target.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(target);\n\n        spotLight.target = target;\n        spotLight.angle = 45 * (Math.PI / 180);\n        spotLight.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        spotLight.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(spotLight);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.translateX(100 / 2);\n        this.mesh.translateY(100 / 2);\n        this.mesh.translateZ(100);\n\n        super.init();\n    }\n}\n\nexport default LightView;\n","import { Object3D } from 'three';\nimport WaterBlocksView from './world/WaterBlocksView';\nimport StaticBlocksView from './world/StaticBlocksView';\nimport LightView from './lights/LightView';\nimport View from '../../../engine/graphics/View';\n\nclass WorldMapView extends View {\n    constructor (map) {\n        super();\n\n        this.map = map;\n        this.wallsView = new StaticBlocksView(map, 'tiles');\n        this.waterView = new WaterBlocksView(map, 'tiles');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        for (const light of this.map.lights) {\n            const lightView = new LightView(light);\n\n            lightView.init();\n\n            this.mesh.add(lightView.mesh);\n        }\n\n        this.wallsView.init();\n        this.waterView.init();\n\n        this.mesh.add(this.wallsView.mesh);\n        this.mesh.add(this.waterView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        this.waterView.update();\n    }\n}\n\nexport default WorldMapView;\n","import { Animation, TextureManager, View } from '../../../engine/graphics';\nimport { Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\n\nconst WALK_FRAMES = [\n    'walk_0001',\n    'walk_0002',\n    'walk_0003',\n    'walk_0004',\n    'walk_0005',\n    'walk_0006',\n    'walk_0007',\n    'walk_0008'\n];\n\nconst RUN_FRAMES = [\n    'run_0001',\n    'run_0002',\n    'run_0003',\n    'run_0004',\n    'run_0005',\n    'run_0006',\n    'run_0007',\n    'run_0008'\n];\n\nconst IDLE_FRAMES = ['idle_0001'];\n\nconst TEAM_COLORS = {\n    american: 0x006D02,\n    german: 0xcccc00\n};\n\nclass SoldierView extends View {\n    constructor (soldier) {\n        super();\n\n        this.soldier = soldier;\n        this._team = soldier ? soldier.team : 'american';\n    }\n\n    set team (team) {\n        if (team !== this._team) {\n            this._team = team;\n            this.material.color.setHex(TEAM_COLORS[team]);\n        }\n    }\n\n    init () {\n        const soldier = this.soldier;\n\n        this.geometry = new PlaneGeometry(soldier.height * 2, soldier.width * 2);\n\n        this.geometry.rotateZ(Math.PI);\n\n        const textureAtlas = TextureManager.getAtlas('soldier', true);\n\n        this.animations = {\n            walk: new Animation(textureAtlas, this.geometry, 9, true, WALK_FRAMES, 'soldier_weapon_'),\n            run: new Animation(textureAtlas, this.geometry, 5, true, RUN_FRAMES, 'soldier_weapon_'),\n            idle: new Animation(textureAtlas, this.geometry, 8, true, IDLE_FRAMES, 'soldier_weapon_')\n        };\n\n        this.currentAnimation = this.animations.idle;\n\n        this.material = new MeshLambertMaterial({\n            map: textureAtlas.texture,\n            transparent: true,\n            color: TEAM_COLORS[this._team]\n        });\n\n        this.material.color.offsetHSL(0.1, 0.8, 0.4);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.position.set(soldier.position.x, soldier.position.y, soldier.position.z);\n        this.mesh.rotation.z = soldier.angle;\n\n        super.init();\n    }\n\n    _updateAnimation () {\n        let animation = this.currentAnimation;\n\n        if (this.soldier.isMoving) {\n            if (this.soldier.isRunning) {\n                animation = this.animations.run;\n            } else {\n                animation = this.animations.walk;\n            }\n        } else {\n            animation = this.animations.idle;\n        }\n\n        // Animation changed\n        if (animation !== this.currentAnimation) {\n            this.currentAnimation = animation;\n            this.currentAnimation.reset();\n        }\n\n        this.currentAnimation.update();\n    }\n\n    update (interpolationPercentage) {\n        let zOffset = this.soldier.depth;\n\n        if (this.soldier.dead) {\n            this.mesh.visible = false;\n            zOffset = 0;\n        } else if (!this.mesh.visible) {\n            this.mesh.visible = true;\n        }\n\n        const previous = this.soldier.previousPosition;\n        const current = this.soldier.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n\n        this.mesh.position.z += zOffset;\n\n        this.mesh.rotation.z = this.soldier.angle + (90 * (Math.PI / 180));\n\n        this._updateAnimation();\n    }\n}\n\nexport default SoldierView;\n","import { Object3D } from 'three';\nimport ObjectPool from '../../../engine/ObjectPool';\nimport View from '../../../engine/graphics/View';\nimport SoldierView from './SoldierView';\n\nclass SoldierViewPool extends View {\n    constructor (soldiers, options = {}) {\n        super();\n\n        this.soldiers = soldiers;\n\n        this.viewPool = new ObjectPool(() => {\n            return new SoldierView(null);\n        }, this.soldiers.size, 10, options.poolLimit || 200);\n\n        this.viewPairs = new WeakMap();\n    }\n\n    init () {\n        this.mesh = new Object3D();\n        this._initialized = true;\n    }\n\n    update (interpolationPercentage) {\n        // Keep viewPool in sync with soldier pool\n        if (this.viewPool.poolSize > this.soldiers.length + 1) {\n            this.viewPool.allocate(this.soldiers.length + 1 - this.viewPool.size);\n        }\n\n        for (const soldier of this.soldiers) {\n            let view = this.viewPairs.get(soldier);\n\n            if (!view && !soldier.dead) {\n                view = this.viewPool.get();\n\n                view.soldier = soldier;\n                view.init();\n\n                // Team is set after, because it affects the material\n                view.team = soldier.team;\n\n                this.mesh.add(view.mesh);\n\n                this.viewPairs.set(soldier, view);\n            } else if (view) {\n                view.update(interpolationPercentage);\n\n                if (soldier.dead && this.viewPairs.has(soldier)) {\n                    this.viewPool.free(view);\n                    this.viewPairs.delete(soldier);\n                }\n            }\n        }\n    }\n}\n\nexport default SoldierViewPool;\n","import { AmbientLight, PerspectiveCamera, SpotLight } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\nexport class PlayRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.map = this.state.map;\n\n        this.cameraFollowView = null;\n        this.clearColor = 0x000000;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new PerspectiveCamera(75, this.map.width / this.map.height, 100, 1000);\n\n        this.camera.position.x = (this.map.width / 2) * this.map.blockWidth;\n        this.camera.position.y = (this.map.height / 2) * this.map.blockHeight;\n        this.camera.position.z = this.map.blockDepth * 6;\n\n        const ambientLight = new AmbientLight(0x030303);\n\n        this.scene.add(ambientLight);\n\n        this.cameraFollowLight = new SpotLight(0xfffffff, 2, 800);\n        this.cameraFollowLight.angle = 135 * (Math.PI / 180);\n        this.cameraFollowLight.exponent = 10;\n        this.cameraFollowLight.target = this.cameraFollowView.mesh;\n\n        this.scene.add(this.cameraFollowLight);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        if (this.state.paused) {\n            return;\n        }\n\n        super.update(delta);\n\n        if (this.cameraFollowView) {\n            this.camera.position.setX(this.cameraFollowView.position.x);\n            this.camera.position.setY(this.cameraFollowView.position.y);\n\n            this.cameraFollowLight.position.setX(this.cameraFollowView.position.x);\n            this.cameraFollowLight.position.setY(this.cameraFollowView.position.y);\n            this.cameraFollowLight.position.setZ(this.cameraFollowView.position.z + 400);\n        }\n    }\n}\n","import ViewContainer from '../../engine/graphics/ViewContainer';\n\nimport StatsRenderView from './ui/StatsRenderView';\nimport AmmoView from './ui/AmmoView';\nimport HealthView from './ui/HealthView';\nimport WeaponView from './ui/WeaponView';\nimport ScoreView from './ui/ScoreView';\n\nimport BulletSystemView from './views/BulletSystemView';\nimport WorldMapView from './views/WorldMapView';\nimport SoldierView from './views/SoldierView';\nimport SoldierViewPool from './views/SoldierViewPool';\nimport {PlayRenderView} from './views/PlayRenderView';\n\nexport const ViewBuilder = {\n    uiView (playState) {\n        const uiView = new StatsRenderView(playState);\n        const uiViewContainer = new ViewContainer();\n\n        const scoreView = new ScoreView(playState);\n        const weaponView = new WeaponView(playState);\n        const ammoView = new AmmoView(playState);\n        const healthView = new HealthView(playState);\n\n        uiViewContainer.addDynamicView(scoreView, { x: 100, y: 100, z: 0 });\n        uiViewContainer.addDynamicView(weaponView, { x: 280, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(ammoView, { x: 10, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(healthView, { x: 600, y: 540, z: 0 });\n        uiView.addViewContainer('main', uiViewContainer);\n        uiView.currentViewContainer = 'main';\n\n        return uiView;\n    },\n\n    playView (playState) {\n        const playView = new PlayRenderView(playState);\n\n        const playerView = new SoldierView(playState.player);\n        const soldierView = new SoldierViewPool(playState.soldiers);\n        const bulletSystemView = new BulletSystemView(playState.bulletSystem);\n        const worldMapView = new WorldMapView(playState.map);\n\n        const viewContainer = new ViewContainer();\n\n        viewContainer.addDynamicView(playerView);\n        viewContainer.addDynamicView(soldierView);\n        viewContainer.addDynamicView(bulletSystemView);\n        viewContainer.addDynamicView(worldMapView);\n\n        playView.addViewContainer('main', viewContainer);\n        playView.currentViewContainer = 'main';\n\n        // Camera follow\n        playView.cameraFollowView = playerView;\n\n        return playView;\n    }\n};\n","/**\n * Get a given statistic of a all soldiers per team.\n *\n * @param {string} stat Stat to get.\n *\n * @return {Map} Stats per team\n */\nfunction soldierStatsByTeam (stat) {\n    const resultsByTeam = new Map();\n\n    for (let [teamName, soldiers] of this.teams.entries()) {\n        for (const soldier of soldiers) {\n            const teamResult = resultsByTeam.get(teamName);\n\n            if (teamResult) {\n                resultsByTeam.set(teamName, teamResult + soldier[stat]);\n            } else {\n                resultsByTeam.set(teamName, soldier[stat]);\n            }\n        }\n    }\n}\n\nclass Match {\n    constructor (teams) {\n        this.matchTime = 0;\n        this.matchDuration = 300000;\n        this.soldiers = new Set();\n        this.teamNames = [];\n        this.teams = new Map();\n\n        for (const teamName of teams) {\n            this.teamNames.push(teamName);\n            this.teams.set(teamName, new Set());\n        }\n    }\n\n    teamWithLeastPlayers () {\n        let leastTeamName = null;\n        let minCount = Number.MAX_VALUE;\n\n        for (const teamName of this.teamNames) {\n            const count = this.teams.get(teamName).size;\n\n            if (count < minCount) {\n                leastTeamName = teamName;\n                minCount = count;\n            }\n        }\n\n        return leastTeamName;\n    }\n\n    addSoldier (soldier, teamName) {\n        if (!teamName) {\n            teamName = this.teamWithLeastPlayers();\n        }\n\n        // FIXME get this out of here?\n        soldier.team = teamName;\n\n        const team = this.teams.get(teamName);\n\n        if (team) {\n            team.add(soldier);\n            this.soldiers.add(soldier);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    sortedScores () {\n        const teams = new Map();\n\n        for (const soldier of new Set([...this.soldiers])) {\n            const team = teams.get(soldier.team);\n\n            if (team) {\n                team.kills += soldier.totalKills;\n                team.deaths += soldier.totalDeaths;\n                team.soldiers.push(soldier);\n            } else {\n                teams.set(soldier.team, {\n                    kills: soldier.totalKills,\n                    deaths: soldier.totalDeaths,\n                    soldiers: [soldier]\n                });\n            }\n        }\n\n        for (const team of teams.values()) {\n            team.soldiers.sort((a, b) => b.kills - a.kills);\n        }\n\n        return new Map([...teams.entries()].sort((teamA, teamB) => {\n            return teamB[1].kills - teamA[1].kills;\n        }));\n    }\n\n    removeSoldier (soldier) {\n        for (const team of this.teams.values()) {\n            if (team.has(soldier)) {\n                team.delete(soldier);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    killsByTeam () {\n        return soldierStatsByTeam('kills');\n    }\n\n    deathsByTeam () {\n        return soldierStatsByTeam('deaths');\n    }\n\n    start () {\n\n    }\n\n    end () {\n\n    }\n\n    update (delta) {\n        this.matchTime += delta;\n\n        if (this.matchTime >= this.matchDuration) {\n            this.end();\n        }\n    }\n}\n\nexport default Match;\n","import Keyboard from '../../../engine/input/Keyboard';\nimport Gamepad from '../../../engine/input/Gamepad';\nimport HumanInput from '../../../engine/input/HumanInput';\n\nclass PlayerInput extends HumanInput {\n    constructor (player) {\n        super();\n\n        this.player = player;\n    }\n\n    update (delta) {\n        if (Keyboard.isDown(Keyboard.UP) || Gamepad.isStickDown(this.gamepadIndex, 'left', 'up')) {\n            this.player.moveUp();\n        } else if (Keyboard.isDown(Keyboard.DOWN) || Gamepad.isStickDown(this.gamepadIndex, 'left', 'down')) {\n            this.player.moveDown();\n        } else {\n            this.player.stopMoving();\n        }\n\n        if (Keyboard.isDown(Keyboard.RIGHT) || Gamepad.isStickDown(this.gamepadIndex, 'right', 'right')) {\n            this.player.turnRight();\n        } else if (Keyboard.isDown(Keyboard.LEFT) || Gamepad.isStickDown(this.gamepadIndex, 'right', 'left')) {\n            this.player.turnLeft();\n        } else {\n            this.player.stopTurning();\n        }\n\n        if (!this.player.isRunning && (Keyboard.isDown(Keyboard.CTRL) ||\n                Gamepad.isDown(this.gamepadIndex, 'rightTrigger'))) {\n            this.player.fireBullet();\n        }\n\n        if (Keyboard.isDown(Keyboard.SHIFT) || Gamepad.isDown(this.gamepadIndex, 'actionSouth')) {\n            this.player.isRunning = true;\n        } else {\n            this.player.isRunning = false;\n        }\n\n        if (this.keyboardDownOnce(Keyboard.R) || this.gamepadButtonDownOnce('actionWest')) {\n            this.player.reload();\n        }\n\n        if (this.keyboardDownOnce(Keyboard.X) || this.gamepadButtonDownOnce('actionNorth')) {\n            this.player.scrollWeapons('down');\n        }\n\n        if (this.keyboardDownOnce(Keyboard.Z) || this.gamepadButtonDownOnce('actionEast')) {\n            this.player.scrollWeapons('up');\n        }\n    }\n}\n\nexport default PlayerInput;\n","import { HumanInput, Keyboard } from '../../../engine/input';\n\nclass UiInput extends HumanInput {\n    constructor (state) {\n        super();\n\n        this.state = state;\n    }\n\n    update (delta) {\n        if (Keyboard.isDown(Keyboard.E) || this.gamepadButtonDownOnce('leftBumper')) {\n            this.state.showScores = true;\n        } else {\n            this.state.showScores = false;\n        }\n\n        if (this.keyboardDownOnce(Keyboard.ESC)) {\n            if (this.state.paused) {\n                this.state.resume();\n            } else {\n                this.state.pause();\n            }\n        }\n    }\n}\n\nexport default UiInput;\n","class ComputerInput {\n    constructor (soldier) {\n        this.soldier = soldier;\n    }\n\n    update () {\n        if (Math.random() < 0.05) {\n            this.soldier.fireBullet();\n        }\n\n        if (Math.random() > 0.8) {\n            this.soldier.moveUp();\n        }\n\n        if (Math.random() > 0.7) {\n            if (Math.random() > 0.5) {\n                this.soldier.turnRight();\n            } else {\n                this.soldier.turnLeft();\n            }\n        } else {\n            this.soldier.stopTurning();\n        }\n\n        if (this.soldier.currentWeapon) {\n            if (this.soldier.currentWeapon.magazine === 0) {\n                this.soldier.reload();\n            }\n        }\n    }\n}\n\nexport default ComputerInput;\n","class Vector {\n    constructor (x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Copy the values of another Vector into this one.\n     *\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaining.\n     */\n    copy (other) {\n        this.x = other.x;\n        this.y = other.y;\n\n        return this;\n    }\n\n    /**\n     * Create a new vector with the same coordinates as this on.\n     *\n     * @return {Vector} The new cloned vector\n     */\n    clone () {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     * Change this vector to be perpendicular to what it was before. (Effectively\n     * roatates it 90 degrees in a clockwise direction)\n     * @return {Vector} This for chaining.\n     */\n    perp () {\n        const x = this.x;\n\n        this.x = this.y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate this vector (counter-clockwise) by the specified angle (in radians).\n     * @param {number} angle The angle to rotate (in radians)\n     * @return {Vector} This for chaining.\n     */\n    rotate (angle) {\n        const x = this.x;\n        const y = this.y;\n\n        this.x = x * Math.cos(angle) - y * Math.sin(angle);\n        this.x = x * Math.sin(angle) + y * Math.cos(angle);\n\n        return this;\n    }\n\n    /**\n     * Reverse this vector.\n     *\n     * @return {Vector} This for chaining.\n     */\n    negate () {\n        this.x = -this.x;\n        this.y = -this.y;\n\n        return this;\n    }\n\n    /**\n     * Normalize this vector.  (make it have length of `1`)\n     *\n     * @return {Vector} This for chaining.\n     */\n    normalize () {\n        const d = this.len();\n\n        if (d > 0) {\n            this.x = this.x / d;\n            this.y = this.y / d;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add another vector to this one.\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaining.\n     */\n    add (other) {\n        this.x += other.x;\n        this.y += other.y;\n\n        return this;\n    }\n\n    /**\n     * Subtract another vector from this one.\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaiing.\n     */\n    sub (other) {\n        this.x -= other.x;\n        this.y -= other.y;\n\n        return this;\n    }\n\n    /**\n     * Scale this vector. An independant scaling factor can be provided\n     * for each axis, or a single scaling factor that will scale both `x` and `y`.\n     *\n     * @param {number} x The scaling factor in the x direction.\n     * @param {?number=} y The scaling factor in the y direction.  If this\n     *   is not specified, the x scaling factor will be used.\n     * @return {Vector} This for chaining.\n     */\n    scale (x, y) {\n        this.x *= x;\n        this.y *= y || x;\n\n        return this;\n    }\n\n    /**\n     * Project this vector on to another vector.\n     *\n     * @param {Vector} other The vector to project onto.\n     * @return {Vector} This for chaining.\n     */\n    project (other) {\n        const amt = this.dot(other) / other.len2();\n\n        this.x = amt * other.x;\n        this.y = amt * other.y;\n\n        return this;\n    }\n\n    /**\n     * Project this vector onto a vector of unit length. This is slightly more efficient\n     * than `project` when dealing with unit vectors.\n     *\n     * @param {Vector} other The unit vector to project onto.\n     * @return {Vector} This for chaining.\n     */\n    projectN (other) {\n        const amt = this.dot(other);\n\n        this.x = amt * other.x;\n        this.y = amt * other.y;\n\n        return this;\n    }\n\n    /**\n     * Reflect this vector on an arbitrary axis.\n     *\n     * @param {Vector} axis The vector representing the axis.\n     * @return {Vector} This for chaining.\n     */\n    reflect (axis) {\n        const x = this.x;\n        const y = this.y;\n\n        this.project(axis).scale(2);\n        this.x -= x;\n        this.y -= y;\n\n        return this;\n    }\n\n    /**\n     * Reflect this vector on an arbitrary axis (represented by a unit vector). This is\n     * slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\n     *\n     * @param {Vector} axis The unit vector representing the axis.\n     * @return {Vector} This for chaining.\n     */\n    reflectN (axis) {\n        const x = this.x;\n        const y = this.y;\n\n        this.projectN(axis).scale(2);\n        this.x -= x;\n        this.y -= y;\n\n        return this;\n    }\n\n    /**\n     * Get the dot product of this vector and another.\n     *\n     * @param {Vector}  other The vector to dot this one against.\n     * @return {number} The dot product.\n     */\n    dot (other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    /**\n     * Get the squared length of this vector.\n     * @return {number} The length^2 of this vector.\n     */\n    len2 () {\n        return this.dot(this);\n    }\n\n    /**\n     * Get the length of this vector.\n     * @return {number} The length of this vector.\n     */\n    len () {\n        return Math.sqrt(this.len2());\n    }\n}\n\nexport default Vector;\n","// Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>\n//\n// Released under the MIT License - https://github.com/jriecken/sat-js\n//\n// A simple library for determining intersections of circles and\n// polygons using the Separating Axis Theorem.\n/** @preserve SAT.js - Version 0.5.0 - Copyright 2012 - 2015 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */\n\nimport Vector from './Vector';\nimport Box from './Box';\nimport Response from './Response';\n\n// ## Object Pools\n\n// A pool of `Vector` objects that are used in calculations to avoid\n// allocating memory.\n/**\n * @type {Array.<Vector>}\n */\nconst T_VECTORS = [];\n\nfor (let i = 0; i < 10; i++) {\n    T_VECTORS.push(new Vector());\n}\n\n// A pool of arrays of numbers used in calculations to avoid allocating\n// memory.\n/**\n * @type {Array.<Array.<number>>}\n */\nconst T_ARRAYS = [];\n\nfor (let i = 0; i < 5; i++) {\n    T_ARRAYS.push([]);\n}\n\n// Temporary response used for polygon hit detection.\n/**\n * @type {Response}\n */\nconst T_RESPONSE = new Response();\n\n// Unit square polygon used for polygon hit detection.\n/**\n * @type {Polygon}\n */\nconst UNIT_SQUARE = new Box(new Vector(), 1, 1).toPolygon();\n\n// ## Helper Functions\n\n/**\n * Flattens the specified array of vertices onto a unit vector axis,\n * resulting in a one dimensional range of the minimum and\n * maximum value on that axis.\n * @param {Array.<Vector>} vertices The vertices to flatten.\n * @param {Vector} normal The unit vector axis to flatten on.\n * @param {Array.<number>} result An array.  After calling this function,\n *   result[0] will be the minimum value,\n *   result[1] will be the maximum value.\n *\n * @returns {void}\n */\nconst _flattenVerticesOn = function (vertices, normal, result) {\n    let min = Number.MAX_VALUE;\n    let max = -Number.MAX_VALUE;\n    const len = vertices.length;\n\n    for (let i = 0; i < len; i++) {\n        // The magnitude of the projection of the point onto the normal\n        const dot = vertices[i].dot(normal);\n\n        if (dot < min) {\n            min = dot;\n        }\n        if (dot > max) {\n            max = dot;\n        }\n    }\n\n    result[0] = min; result[1] = max;\n};\n\n/**\n * Check whether two convex polygons are separated by the specified\n * axis (must be a unit vector).\n *\n * @param {Vector} aPos The position of the first polygon.\n * @param {Vector} bPos The position of the second polygon.\n * @param {Array.<Vector>} aPoints The vertices in the first polygon.\n * @param {Array.<Vector>} bPoints The vertices in the second polygon.\n * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n *   will be projected onto this axis.\n * @param {Response=} response A Response object (optional) which will be populated\n *   if the axis is not a separating axis.\n * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n *   and a response is passed in, information about how much overlap and\n *   the direction of the overlap will be populated.\n */\nconst _isSeparatingAxis = function (aPos, bPos, aPoints, bPoints, axis, response) {\n    const rangeA = T_ARRAYS.pop();\n    const rangeB = T_ARRAYS.pop();\n\n    // The magnitude of the offset between the two polygons\n    const offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n    const projectedOffset = offsetV.dot(axis);\n\n    // Project the polygons onto the axis.\n    _flattenVerticesOn(aPoints, axis, rangeA);\n    _flattenVerticesOn(bPoints, axis, rangeB);\n\n    // Move B's range to its position relative to A.\n    rangeB[0] += projectedOffset;\n    rangeB[1] += projectedOffset;\n\n    // Check if there is a gap. If there is, this is a separating axis and we can stop\n    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n        T_VECTORS.push(offsetV);\n        T_ARRAYS.push(rangeA);\n        T_ARRAYS.push(rangeB);\n\n        return true;\n    }\n\n    // This is not a separating axis. If we're calculating a response, calculate the overlap.\n    if (response) {\n        let overlap = 0;\n\n        // A starts further left than B\n        if (rangeA[0] < rangeB[0]) {\n            response.aInB = false;\n\n            // A ends before B does. We have to pull A out of B\n            if (rangeA[1] < rangeB[1]) {\n                overlap = rangeA[1] - rangeB[0];\n                response.bInA = false;\n            } else {\n                // B is fully inside A.  Pick the shortest way out.\n                const option1 = rangeA[1] - rangeB[0];\n                const option2 = rangeB[1] - rangeA[0];\n\n                overlap = option1 < option2 ? option1 : -option2;\n            }\n        } else {\n            // B starts further left than A\n            response.bInA = false;\n\n            // B ends before A ends. We have to push A out of B\n            if (rangeA[1] > rangeB[1]) {\n                overlap = rangeA[0] - rangeB[1];\n                response.aInB = false;\n\n                // A is fully inside B.  Pick the shortest way out.\n            } else {\n                const option1 = rangeA[1] - rangeB[0];\n                const option2 = rangeB[1] - rangeA[0];\n\n                overlap = option1 < option2 ? option1 : -option2;\n            }\n        }\n\n        // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n        const absOverlap = Math.abs(overlap);\n\n        if (absOverlap < response.overlap) {\n            response.overlap = absOverlap;\n            response.overlapN.copy(axis);\n            if (overlap < 0) {\n                response.overlapN.negate();\n            }\n        }\n    }\n\n    T_VECTORS.push(offsetV);\n    T_ARRAYS.push(rangeA);\n    T_ARRAYS.push(rangeB);\n\n    return false;\n};\n\n// Calculates which Voronoi region a point is on a line segment.\n// It is assumed that both the line and the point are relative to `(0,0)`\n//\n//            |       (0)      |\n//     (-1)  [S]--------------[E]  (1)\n//            |       (0)      |\n/**\n * @param {Vector} line The line segment.\n * @param {Vector} point The point.\n * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n *          RIGHT_VORONOI_REGION (1) if it is the right region.\n */\nconst _vornoiRegion = function (line, point) {\n    const len2 = line.len2();\n    const dp = point.dot(line);\n\n    // If the point is beyond the start of the line, it is in the\n    // left voronoi region.\n    if (dp < 0) {\n        return LEFT_VORONOI_REGION;\n    } else if (dp > len2) {\n        // If the point is beyond the end of the line, it is in the\n        // right voronoi region.\n\n        return RIGHT_VORONOI_REGION;\n    } else {\n        // Otherwise, it's in the middle one.\n        return MIDDLE_VORONOI_REGION;\n    }\n};\n\n// Constants for Voronoi regions\n/**\n * @const\n */\nconst LEFT_VORONOI_REGION = -1;\n\n/**\n * @const\n */\nconst MIDDLE_VORONOI_REGION = 0;\n\n/**\n * @const\n */\nconst RIGHT_VORONOI_REGION = 1;\n\n// ## Collision Tests\n\n// Check if a point is inside a circle.\n/**\n * @param {Vector} p The point to test.\n * @param {Circle} c The circle to test.\n * @return {boolean} true if the point is inside the circle, false if it is not.\n */\nconst _pointInCircle = function (p, c) {\n    const differenceV = T_VECTORS.pop().copy(p).sub(c.position);\n    const radiusSq = c.radius * c.radius;\n    const distanceSq = differenceV.len2();\n\n    T_VECTORS.push(differenceV);\n\n    // If the distance between is smaller than the radius then the point is inside the circle.\n    return distanceSq <= radiusSq;\n};\n\n// Check if a point is inside a convex polygon.\n/**\n * @param {Vector} p The point to test.\n * @param {Polygon} poly The polygon to test.\n * @return {boolean} true if the point is inside the polygon, false if it is not.\n */\nconst _pointInPolygon = function (p, poly) {\n    UNIT_SQUARE.position.copy(p);\n    T_RESPONSE.clear();\n\n    let result = _testPolygonPolygon(UNIT_SQUARE, poly, T_RESPONSE);\n\n    if (result) {\n        result = T_RESPONSE.aInB;\n    }\n\n    return result;\n};\n\n// Check if two circles collide.\n/**\n * @param {Circle} a The first circle.\n * @param {Circle} b The second circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   the circles intersect.\n * @return {boolean} true if the circles intersect, false if they don't.\n */\nconst _testCircleCircle = function (a, b, response) {\n    // Check if the distance between the centers of the two\n    // circles is greater than their combined radius.\n    const differenceV = T_VECTORS.pop().copy(b.position).sub(a.position);\n    const totalRadius = a.radius + b.radius;\n    const totalRadiusSq = totalRadius * totalRadius;\n    const distanceSq = differenceV.len2();\n\n    // If the distance is bigger than the combined radius, they don't intersect.\n    if (distanceSq > totalRadiusSq) {\n        T_VECTORS.push(differenceV);\n\n        return false;\n    }\n\n    // They intersect.  If we're calculating a response, calculate the overlap.\n    if (response) {\n        const dist = Math.sqrt(distanceSq);\n\n        response.a = a;\n        response.b = b;\n        response.overlap = totalRadius - dist;\n        response.overlapN.copy(differenceV.normalize());\n        response.overlapV.copy(differenceV).scale(response.overlap);\n        response.aInB = a.radius <= b.radius && dist <= b.radius - a.radius;\n        response.bInA = b.radius <= a.radius && dist <= a.radius - b.radius;\n    }\n\n    T_VECTORS.push(differenceV);\n\n    return true;\n};\n\n// Check if a polygon and a circle collide.\n/**\n * @param {Polygon} polygon The polygon.\n * @param {Circle} circle The circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testPolygonCircle = function (polygon, circle, response) {\n    // Get the position of the circle relative to the polygon.\n    const circlePos = T_VECTORS.pop().copy(circle.position).sub(polygon.position);\n    const radius = circle.radius;\n    const radius2 = radius * radius;\n    const points = polygon.computedVertices;\n    const len = points.length;\n    const edge = T_VECTORS.pop();\n    const point = T_VECTORS.pop();\n\n    // For each edge in the polygon:\n    for (let i = 0; i < len; i++) {\n        const next = i === len - 1 ? 0 : i + 1;\n        const prev = i === 0 ? len - 1 : i - 1;\n        let overlap = 0;\n        let overlapN = null;\n\n        // Get the edge.\n        edge.copy(polygon.edges[i]);\n\n        // Calculate the center of the circle relative to the starting point of the edge.\n        point.copy(circlePos).sub(points[i]);\n\n        // If the distance between the center of the circle and the point\n        // is bigger than the radius, the polygon is definitely not fully in\n        // the circle.\n        if (response && point.len2() > radius2) {\n            response.aInB = false;\n        }\n\n        // Calculate which Voronoi region the center of the circle is in.\n        let region = _vornoiRegion(edge, point);\n\n        // If it's the left region:\n        if (region === LEFT_VORONOI_REGION) {\n            // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n            edge.copy(polygon.edges[prev]);\n\n            // Calculate the center of the circle relative the starting point of the previous edge\n            const point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n\n            region = _vornoiRegion(edge, point2);\n\n            if (region === RIGHT_VORONOI_REGION) {\n                // It's in the region we want.  Check if the circle intersects the point.\n                const dist = point.len();\n\n                if (dist > radius) {\n                    // No intersection\n                    T_VECTORS.push(circlePos);\n                    T_VECTORS.push(edge);\n                    T_VECTORS.push(point);\n                    T_VECTORS.push(point2);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    response.bInA = false;\n                    overlapN = point.normalize();\n                    overlap = radius - dist;\n                }\n            }\n\n            T_VECTORS.push(point2);\n\n        // If it's the right region:\n        } else if (region === RIGHT_VORONOI_REGION) {\n            // We need to make sure we're in the left region on the next edge\n            edge.copy(polygon.edges[next]);\n\n            // Calculate the center of the circle relative to the starting point of the next edge.\n            point.copy(circlePos).sub(points[next]);\n            region = _vornoiRegion(edge, point);\n            if (region === LEFT_VORONOI_REGION) {\n                // It's in the region we want.  Check if the circle intersects the point.\n                const dist = point.len();\n\n                if (dist > radius) {\n                    // No intersection\n                    T_VECTORS.push(circlePos);\n                    T_VECTORS.push(edge);\n                    T_VECTORS.push(point);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    response.bInA = false;\n                    overlapN = point.normalize();\n                    overlap = radius - dist;\n                }\n            }\n\n        // Otherwise, it's the middle region:\n        } else {\n            // Need to check if the circle is intersecting the edge,\n            // Change the edge into its \"edge normal\".\n            const normal = edge.perp().normalize();\n\n            // Find the perpendicular distance between the center of the\n            // circle and the edge.\n            const dist = point.dot(normal);\n            const distAbs = Math.abs(dist);\n\n            // If the circle is on the outside of the edge, there is no intersection.\n            if (dist > 0 && distAbs > radius) {\n                // No intersection\n                T_VECTORS.push(circlePos);\n                T_VECTORS.push(normal);\n                T_VECTORS.push(point);\n\n                return false;\n            } else if (response) {\n                // It intersects, calculate the overlap.\n                overlapN = normal;\n                overlap = radius - dist;\n\n                // If the center of the circle is on the outside of the edge, or part of the\n                // circle is on the outside, the circle is not fully inside the polygon.\n                if (dist >= 0 || overlap < 2 * radius) {\n                    response.bInA = false;\n                }\n            }\n        }\n\n        // If this is the smallest overlap we've seen, keep it.\n        // (overlapN may be null if the circle was in the wrong Voronoi region).\n        if (overlapN && response && Math.abs(overlap) < Math.abs(response.overlap)) {\n            response.overlap = overlap;\n            response.overlapN.copy(overlapN);\n        }\n    }\n\n    // Calculate the final overlap vector - based on the smallest overlap.\n    if (response) {\n        response.a = polygon;\n        response.b = circle;\n        response.overlapV.copy(response.overlapN).scale(response.overlap);\n    }\n\n    T_VECTORS.push(circlePos);\n    T_VECTORS.push(edge);\n    T_VECTORS.push(point);\n\n    return true;\n};\n\n// Check if a circle and a polygon collide.\n//\n// **NOTE:** This is slightly less efficient than polygonCircle as it just\n// runs polygonCircle and reverses everything at the end.\n/**\n * @param {Circle} circle The circle.\n * @param {Polygon} polygon The polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testCirclePolygon = function (circle, polygon, response) {\n    // Test the polygon against the circle.\n    const result = _testPolygonCircle(polygon, circle, response);\n\n    if (result && response) {\n        // Swap A and B in the response.\n        const a = response.a;\n        const aInB = response.aInB;\n\n        response.overlapN.negate();\n        response.overlapV.negate();\n        response.a = response.b;\n        response.b = a;\n        response.aInB = response.bInA;\n        response.bInA = aInB;\n    }\n\n    return result;\n};\n\n/**\n * Checks whether polygons collide.\n * @param {Polygon} a The first polygon.\n * @param {Polygon} b The second polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testPolygonPolygon = function (a, b, response) {\n    const aPoints = a.computedVertices;\n    const aLen = aPoints.length;\n    const bPoints = b.computedVertices;\n    const bLen = bPoints.length;\n\n    // If any of the edge normals of A is a separating axis, no intersection.\n    for (let i = 0; i < aLen; i++) {\n        if (_isSeparatingAxis(a.position, b.position, aPoints, bPoints, a.normals[i], response)) {\n            return false;\n        }\n    }\n\n    // If any of the edge normals of B is a separating axis, no intersection.\n    for (let i = 0; i < bLen; i++) {\n        if (_isSeparatingAxis(a.position, b.position, aPoints, bPoints, b.normals[i], response)) {\n            return false;\n        }\n    }\n\n    // Since none of the edge normals of A or B are a separating axis, there is an intersection\n    // and we've already calculated the smallest overlap (in _isSeparatingAxis).  Calculate the\n    // final overlap vector.\n    if (response) {\n        response.a = a;\n        response.b = b;\n        response.overlapV.copy(response.overlapN).scale(response.overlap);\n    }\n\n    return true;\n};\n\nconst SAT = {\n    testPolygonPolygon: _testPolygonPolygon,\n    testCirclePolygon: _testCirclePolygon,\n    testPolygonCircle: _testPolygonCircle,\n    testCircleCircle: _testCircleCircle,\n    pointInPolygon: _pointInPolygon,\n    pointInCircle: _pointInCircle\n};\n\nexport default SAT;\n","import Vector from './Vector';\n\nfunction boxToPolygon (position, width, height) {\n    return new Polygon(new Vector(position.x, position.y), [\n        new Vector(), new Vector(width, 0),\n        new Vector(width, height), new Vector(0, height)\n    ]);\n}\n\n// ## Polygon\n//\n// Represents a *convex* polygon with any number of vertices (specified in counter-clockwise order)\n//\n// Note: Do _not_ manually change the `vertices`, `angle`, or `offset` properties. Use the\n// provided setters. Otherwise the calculated properties will not be updated correctly.\n//\n// `pos` can be changed directly.\n\n// Create a new polygon, passing in a position vector, and an array of vertices (represented\n// by vectors relative to the position vector). If no position is passed in, the position\n// of the polygon will be `(0,0)`.\n/**\n * @param {Vector=} pos A vector representing the origin of the polygon. (all other\n *   vertices are relative to this one)\n * @param {Array.<Vector>=} vertices An array of vectors representing the vertices in the polygon,\n *   in counter-clockwise order.\n * @constructor\n */\nclass Polygon {\n    constructor (position = new Vector(), vertices = []) {\n        this.position = position;\n        this.angle = 0;\n        this.offset = new Vector();\n\n        this.setVertices(vertices);\n    }\n\n    /**\n     * Set the vertices of the polygon.\n     * Note: The vertices are counter-clockwise *with respect to the coordinate system*.\n     * If you directly draw the vertices on a screen that has the origin at the top-left corner\n     * it will _appear_ visually that the vertices are being specified clockwise. This is just\n     * because of the inversion of the Y-axis when being displayed.\n     *\n     * @param {Array.<Vector>=} vertices An array of vectors representing the vertices in the polygon,\n     *   in counter-clockwise order.\n     * @return {Polygon} This for chaining.\n     */\n    setVertices (vertices) {\n        // Only re-allocate if this is a new polygon or the number of vertices has changed.\n        const lengthChanged = !this.vertices || this.vertices.length !== vertices.length;\n\n        if (lengthChanged) {\n            const computedVertices = this.computedVertices = [];\n            const edges = this.edges = [];\n            const normals = this.normals = [];\n\n            // Allocate the vector arrays for the calculated properties\n            for (let i = 0; i < vertices.length; i++) {\n                computedVertices.push(new Vector());\n                edges.push(new Vector());\n                normals.push(new Vector());\n            }\n        }\n        this.vertices = vertices;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current rotation angle of the polygon.\n     *\n     * @param {number} angle The current rotation angle (in radians).\n     * @return {Polygon} This for chaining.\n     */\n    setAngle (angle) {\n        this.angle = angle;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current offset to apply to the `vertices` before applying the `angle` rotation.\n     *\n     * @param {Vector} offset The new offset vector.\n     * @return {Polygon} This for chaining.\n     */\n    setOffset (offset) {\n        this.offset = offset;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n     * Note: This changes the **original** vertices (so any `angle` will be applied on top of this rotation).\n     * @param {number} angle The angle to rotate (in radians)\n     * @return {Polygon} This for chaining.\n     */\n    rotate (angle) {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].rotate(angle);\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Translates the vertices of this polygon by a specified amount relative to the origin of *its own coordinate\n     * system* (i.e. `pos`).\n     *\n     * This is most useful to change the \"center vertex\" of a polygon. If you just want to move the whole polygon, change\n     * the coordinates of `pos`.\n     *\n     * Note: This changes the **original** vertices (so any `offset` will be applied on top of this translation)\n     *\n     * @param {number} x The horizontal amount to translate.\n     * @param {number} y The vertical amount to translate.\n     * @return {Polygon} This for chaining.\n     */\n    translate (x, y) {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].x += x;\n            vertices[i].y += y;\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Computes the calculated collision polygon. Applies the `angle` and `offset` to the original vertices then recalculates the\n     * edges and normals of the collision polygon.\n     * @return {Polygon} This for chaining.\n     */\n    _compute () {\n        // Calculated vertices - this is what is used for underlying collisions and takes into account\n        // the angle/offset set on the polygon.\n        const computedVertices = this.computedVertices;\n\n        // The edges here are the direction of the `n`th edge of the polygon, relative to\n        // the `n`th vertex. If you want to draw a given edge from the edge value, you must\n        // first translate to the position of the starting vertex.\n        const edges = this.edges;\n\n        // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n        // to the position of the `n`th vertex. If you want to draw an edge normal, you must first\n        // translate to the position of the starting vertex.\n        const normals = this.normals;\n\n        // Copy the original vertices array and apply the offset/angle\n        const vertices = this.vertices;\n        const offset = this.offset;\n        const angle = this.angle;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            const computedVertex = computedVertices[i].copy(vertices[i]);\n\n            computedVertex.x += offset.x;\n            computedVertex.y += offset.y;\n\n            if (angle !== 0) {\n                computedVertex.rotate(angle);\n            }\n        }\n\n        // Calculate the edges/normals\n        for (let i = 0; i < len; i++) {\n            const p1 = computedVertices[i];\n            const p2 = i < len - 1 ? computedVertices[i + 1] : computedVertices[0];\n            const e = edges[i].copy(p2).sub(p1);\n\n            normals[i].copy(e).perp().normalize();\n        }\n\n        return this;\n    }\n\n    /**\n     * Compute the axis-aligned bounding box. Any current state\n     * (translations/rotations) will be applied before constructing the AABB.\n     *\n     *  Note: Returns a _new_ `Polygon` each time you call this.\n     *\n     * @return {Polygon} The AABB\n     */\n    getAABB () {\n        const vertices = this.computedVertices;\n        const len = vertices.length;\n        let xMin = vertices[0].x;\n        let yMin = vertices[0].y;\n        let xMax = vertices[0].x;\n        let yMax = vertices[0].y;\n\n        for (let i = 1; i < len; i++) {\n            const vertex = vertices[i];\n\n            if (vertex.x < xMin) {\n                xMin = vertex.x;\n            } else if (vertex.x > xMax) {\n                xMax = vertex.x;\n            }\n\n            if (vertex.y < yMin) {\n                yMin = vertex.y;\n            } else if (vertex.y > yMax) {\n                yMax = vertex.y;\n            }\n        }\n\n        return boxToPolygon(this.position.clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin);\n    }\n}\n\nexport default Polygon;\n","import Polygon from '../../engine/collision/Polygon';\nimport Vector from '../../engine/collision/Vector';\n\nconst DEFAULT_SPEED = 0.2;\nconst DEFAULT_ROTATION_SPEED = 0.3;\n\nclass Entity {\n    constructor (x, y, z = 0, width = 0, height = 0, depth = 0) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.previousPosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.speed = DEFAULT_SPEED;\n        this.rotationSpeed = DEFAULT_ROTATION_SPEED;\n\n        this.reset();\n\n        this._body = new Polygon(new Vector(this.x, this.y), [\n            new Vector(-this.halfWidth, -this.halfHeight),\n            new Vector(-this.halfWidth, this.halfHeight),\n            new Vector(this.halfWidth, this.halfHeight),\n            new Vector(this.halfWidth, 0)\n        ]);\n\n        this.options = {\n            physics: false,\n            bullets: false,\n            audio: false,\n            isBullet: false,\n            isPlayer: false,\n            isCharacter: false\n        };\n    }\n\n    get rotatedBody () {\n        const body = this._body;\n\n        body.setAngle(this.angle);\n\n        return body;\n    }\n\n    onWallCollision () {\n        return null;\n    }\n\n    get body () {\n        this._body.position.x = this.position.x;\n        this._body.position.y = this.position.y;\n\n        return this._body;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n\n    get halfWidth () {\n        return this.width / 2;\n    }\n\n    get halfHeight () {\n        return this.height / 2;\n    }\n\n    kill () {\n        this.dead = true;\n    }\n\n    get point () {\n        return new Vector(this.x, this.y);\n    }\n\n    reset () {\n        this.velocity = {\n            x: 0,\n            y: 0,\n            z: 0\n        };\n\n        this.dead = false;\n        this.reverse = false;\n        this.angle = Math.PI * 2;\n        this.angularVelocity = 0;\n\n        // If entity is moving backwards\n        this.reverse = false;\n\n        this.collidable = true;\n        this.shouldUpdate = true;\n\n        this.isMoving = false;\n\n        // Actions can trigger things that should happen in the next update.\n        this.actions = {};\n    }\n\n    respawn (position) {\n        this.reset();\n\n        this.position = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n\n        this.previousPosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n    }\n\n    moveUp () {\n        this.reverse = false;\n        this.isMoving = true;\n        this.velocity.x = -this.speed * Math.cos(this.angle);\n        this.velocity.y = -this.speed * Math.sin(this.angle);\n    }\n\n    moveDown () {\n        this.reverse = true;\n        this.isMoving = true;\n        this.velocity.x = this.speed * Math.cos(this.angle);\n        this.velocity.y = this.speed * Math.sin(this.angle);\n    }\n\n    turnLeft () {\n        this.angularVelocity = this.rotationSpeed * (Math.PI / 180);\n    }\n\n    turnRight () {\n        this.angularVelocity = -this.rotationSpeed * (Math.PI / 180);\n    }\n\n    stopMoving () {\n        this.isMoving = false;\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    }\n\n    stopTurning () {\n        this.angularVelocity = 0;\n    }\n\n    update (delta) {\n        if (!this.dead) {\n            this.angle += this.angularVelocity * delta;\n\n            if (this.angle < 0) {\n                this.angle = (Math.PI * 2) - this.angle;\n            }\n\n            this.previousPosition.x = this.position.x;\n            this.previousPosition.y = this.position.y;\n            this.previousPosition.z = this.position.z;\n\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n            this.position.z += this.velocity.z * delta;\n        }\n    }\n}\n\nexport default Entity;\n","import Entity from './Entity';\n\nconst GRAVITY = -0.2;\n\n/**\n * Entitiess that walk, run, jump, die and get hit by bullets.\n *\n * @class\n */\nclass Character extends Entity {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        this.maxHealth = 100;\n        this.walkingSpeed = 0.1;\n        this.runningSpeed = 0.2;\n\n        this.reset();\n\n        this.options.physics = true;\n        this.options.bullets = true;\n        this.options.isCharacter = true;\n    }\n\n    set isRunning (running) {\n        if (running) {\n            this._isRunning = true;\n            this.speed = this.runningSpeed;\n        } else {\n            this._isRunning = false;\n            this.speed = this.walkingSpeed;\n        }\n    }\n\n    get isRunning () {\n        return this._isRunning;\n    }\n\n    fall () {\n        this.velocity.z = GRAVITY;\n    }\n\n    hitByBullet (bullet) {\n        this.health -= bullet.damage;\n\n        if (this.health === 0) {\n            this.kill();\n        }\n    }\n\n    stopFalling () {\n        this.velocity.z = 0;\n    }\n\n    reset () {\n        super.reset();\n\n        this._isRunning = false;\n        this.speed = this.walkingSpeed;\n        this.health = 100;\n\n        this.health = this.maxHealth;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.position.z <= 0) {\n            this.kill();\n        }\n    }\n}\n\nexport default Character;\n","class Gun {\n    constructor (name, options = {}) {\n        this.name = name;\n        this.maxMagazine = options.maxMagazine || 10;\n        this.magazine = options.magazine || this.maxMagazine;\n\n        this.maxAmmo = options.maxAmmo || 10;\n        this.ammo = (options.ammo || this.maxAmmo) - this.magazine;\n\n        this.fireRate = options.fireRate || 150;\n        this.damage = options.damage || 10;\n        this.reloadTime = options.reloadTime || 500;\n\n        this._reloadingTime = 0;\n        this._firedTime = 0;\n        this._canFire = true;\n\n        this.isReloading = false;\n        this.fired = false;\n    }\n\n    fire () {\n        if (!this.isReloading && this._canFire && this.magazine > 0) {\n            this.fired = true;\n            this._canFire = false;\n            this.magazine -= 1;\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    reload () {\n        if (!this.isReloading) {\n            this.isReloading = true;\n\n            let refill = this.maxMagazine - this.magazine;\n\n            const newAmmo = this.ammo - refill;\n\n            if (newAmmo < 0) {\n                refill = this.ammo;\n\n                this.ammo = 0;\n            } else {\n                this.ammo -= refill;\n            }\n\n            this.magazine += refill;\n        }\n    }\n\n    get magazines () {\n        return Math.floor(this.ammo / this.maxMagazine);\n    }\n\n    update (delta) {\n        if (this._fired) {\n            this._fired = false;\n        }\n\n        if (this.isReloading) {\n            this._reloadingTime += delta;\n\n            if (this._reloadingTime > this.reloadTime) {\n                this._reloadingTime = 0;\n                this.isReloading = false;\n            }\n        } else if (!this._canFire) {\n            this._firedTime += delta;\n\n            if (this._firedTime > this.fireRate) {\n                this._firedTime = 0;\n                this._canFire = true;\n            }\n        }\n    }\n}\n\nexport default Gun;\n","import Gun from './Gun';\n\nexport default {\n    mp44: function () {\n        const mp44 = new Gun('mp44', {\n            maxAmmo: 120,\n            maxMagazine: 30\n        });\n\n        return mp44;\n    },\n    thompson: function () {\n        const thompson = new Gun('thompson', {\n            maxAmmo: 90,\n            maxMagazine: 25,\n            fireRate: 90\n        });\n\n        return thompson;\n    }\n};\n","import Character from './Character';\nimport WeaponFactory from '../weapons/WeaponFactory';\n\nclass Soldier extends Character {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        // FIXME make configurable\n        this.name = 'cpu';\n\n        this.weapons = [];\n        this.currentWeaponIndex = 0;\n        this.currentWeapon = null;\n\n        this.team = team;\n\n        // TODO remove this hardcoded stuff\n        this.addWeapon(WeaponFactory.mp44());\n        this.addWeapon(WeaponFactory.thompson());\n        this.currentWeapon = this.weapons[0];\n\n        this.maxHealth = 100;\n        this.walkingSpeed = 0.1;\n        this.runningSpeed = 0.2;\n\n        // Contains the character killed, and the count\n        this.kills = new Map();\n\n        // Contains the characters killed by, and the count\n        this.deaths = new Map();\n\n        this.reset();\n\n        this.options.isSoldier = true;\n    }\n\n    addWeapon (weapon) {\n        // TODO increase ammo if weapon is the same\n        this.weapons.push(weapon);\n    }\n\n    scrollWeapons (direction) {\n        if (direction === 'up') {\n            if (this.currentWeaponIndex === this.weapons.length - 1) {\n                this.currentWeaponIndex = 0;\n            } else {\n                this.currentWeaponIndex += 1;\n            }\n        } else if (direction === 'down') {\n            if (this.currentWeaponIndex === 0) {\n                this.currentWeaponIndex = this.weapons.length - 1;\n            } else {\n                this.currentWeaponIndex -= 1;\n            }\n        } else {\n            throw new Error('direction is not \"up\" or \"down\"');\n        }\n\n        this.currentWeapon = this.weapons[this.currentWeaponIndex];\n    }\n\n    reload () {\n        if (!this.dead && this.currentWeapon) {\n            this.currentWeapon.reload();\n        }\n    }\n\n    hitByBullet (bullet) {\n        super.hitByBullet(bullet);\n\n        // TODO prevent team killing / make configurable\n        if (this.health === 0) {\n            let deathCount = this.deaths.get(bullet.firedBy);\n\n            if (deathCount) {\n                deathCount += 1;\n            } else {\n                deathCount = 1;\n            }\n\n            this.deaths.set(bullet.firedBy, deathCount);\n\n            let killedByCount = bullet.firedBy.kills.get(this);\n\n            if (killedByCount) {\n                killedByCount += 1;\n            } else {\n                killedByCount = 1;\n            }\n\n            bullet.firedBy.kills.set(this, killedByCount);\n        }\n    }\n\n    kill () {\n        super.kill();\n        const suicides = this.deaths.get(this);\n\n        if (suicides) {\n            this.deaths.set(this, suicides + 1);\n        } else {\n            this.deaths.set(this, 1);\n        }\n    }\n\n    get totalKills () {\n        let total = 0;\n\n        for (const kill of this.kills.values()) {\n            total += kill;\n        }\n\n        return total;\n    }\n\n    get totalDeaths () {\n        let total = 0;\n\n        for (const death of this.deaths.values()) {\n            total += death;\n        }\n\n        return total;\n    }\n\n    fireBullet () {\n        if (!this.dead && this.currentWeapon) {\n            const fired = this.currentWeapon.fire();\n\n            if (fired) {\n                this.actions.firedBullet = true;\n            }\n        }\n    }\n\n    reset () {\n        super.reset();\n\n        this.actions.firedBullet = false;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.actions.firedBullet) {\n            this.actions.firedBullet = false;\n        }\n\n        if (this.currentWeapon) {\n            this.currentWeapon.update(delta);\n        }\n    }\n}\n\nexport default Soldier;\n","import Soldier from './Soldier';\n\nclass Player extends Soldier {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth, team);\n\n        // FIXME make configurable\n        this.name = 'player';\n\n        this.options.isPlayer = true;\n        this.options.audio = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n    }\n}\n\nexport default Player;\n","import StateAudio from '../StateAudio';\n\nclass PlayAudio extends StateAudio {\n    constructor (state, effectsSpriteName, backgroundSpriteName) {\n        super(state, effectsSpriteName, backgroundSpriteName);\n        this.entities = state.soldiers;\n        this.player = state.player;\n    }\n\n    update (delta) {\n        for (const entity of this.entities) {\n            if (entity === this.player && entity.actions.firedBullet) {\n                this.effects.play(entity.currentWeapon.name);\n            }\n        }\n    }\n}\n\nexport default PlayAudio;\n","import Polygon from '../../engine/collision/Polygon';\nimport Vector from '../../engine/collision/Vector';\n\nclass Block {\n    constructor (position, width, height, depth, options = {}) {\n        this._position = position;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.options = options;\n        this.type = options.type || 'wall';\n        this._walls = options.walls || {};\n        this.collidable = options.collidable || true;\n\n        this._computeBodies();\n    }\n\n    set walls (walls) {\n        this._walls = walls;\n        this._computeBodies();\n    }\n\n    get walls () {\n        return this._walls;\n    }\n\n    set position (position) {\n        this._position = position;\n        this._computeBodies();\n    }\n\n    get position () {\n        return this._position;\n    }\n\n    _computeBodies () {\n         // If fully closed block (nothing should be inside it)\n        if (this._walls.top && this._walls.west && this._walls.east && this._walls.south && this._walls.north) {\n            this.bodies = [\n                new Polygon(new Vector(this.x, this.y), [\n                    new Vector(0, 0),\n                    new Vector(this.width, 0),\n                    new Vector(this.width, this.height),\n                    new Vector(0, this.height)\n                ])\n            ];\n        }\n\n        const bodies = [];\n\n        if (this._walls.west) {\n            bodies.push(new Polygon(new Vector(this.x, this.y), [\n                new Vector(0, 0),\n                new Vector(this.width, 0),\n                new Vector(this.width, 2),\n                new Vector(0, 2)\n            ]));\n        }\n\n        if (this._walls.east) {\n            bodies.push(new Polygon(new Vector(this.x, this.y + this.height), [\n                new Vector(0, 0),\n                new Vector(this.width, 0),\n                new Vector(this.width, -2),\n                new Vector(0, -2)\n            ]));\n        }\n\n        if (this._walls.south) {\n            bodies.push(new Polygon(new Vector(this.x + this.width, this.y), [\n                new Vector(0, 0),\n                new Vector(0, this.height),\n                new Vector(-2, this.height),\n                new Vector(-2, 0)\n            ]));\n        }\n\n        if (this._walls.north) {\n            bodies.push(new Polygon(new Vector(this.x, this.y), [\n                new Vector(0, 0),\n                new Vector(0, this.height),\n                new Vector(2, this.height),\n                new Vector(2, 0)\n            ]));\n        }\n\n        this.bodies = bodies;\n    }\n\n    get x () {\n        return this._position.x;\n    }\n\n    get y () {\n        return this._position.y;\n    }\n\n    get z () {\n        return this._position.z;\n    }\n}\n\nexport default Block;\n","class Light {\n    constructor (x, y, z, color) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n        this.color = color;\n        this.sourcePosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.angle = Math.PI * 2;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n}\n\nexport default Light;\n","class WorldMap {\n    constructor (layers, width, height, depth, blockWidth, blockHeight, blockDepth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.blockWidth = blockWidth;\n        this.blockHeight = blockHeight;\n        this.blockDepth = blockDepth;\n\n        this.lights = [];\n        this.layers = layers;\n        this.name = null;\n    }\n\n    blocks (types) {\n        return this.blocksBetweenIndexes({\n            x: 0, y: 0, z: 0\n        }, {\n            x: this.width - 1,\n            y: this.height - 1,\n            z: this.depth - 1\n        }, types);\n    }\n\n    get totalWidth () {\n        return this.width * this.blockWidth;\n    }\n\n    get totalHeight () {\n        return this.height * this.blockHeight;\n    }\n\n    get totalDepth () {\n        return this.depth * this.blockDepth;\n    }\n\n    indexToPosition (index) {\n        return {\n            x: index.x * this.blockWidth,\n            y: index.y * this.blockHeight,\n            z: index.z * this.blockDepth\n        };\n    }\n\n    positionToIndex (position) {\n        const x = position.x;\n        const y = position.y;\n        const z = position.z;\n\n        const index = {};\n\n        index.x = Math.floor(x / this.blockWidth);\n        index.y = Math.floor(y / this.blockHeight);\n        index.z = Math.floor(z / this.blockDepth);\n\n        return index;\n    }\n\n    randomRespawnPosition () {\n        const respawn = this.respawns[Math.round(Math.random() * (this.respawns.length - 1))];\n        const position = this.indexToPosition(respawn.position);\n\n        return position;\n    }\n\n    blockAtIndex (index) {\n        if (index.z < 0 || index.z >= this.depth) {\n            return null;\n        }\n\n        if (index.y < 0 || index.y >= this.height) {\n            return null;\n        }\n\n        if (index.x < 0 || index.x >= this.width) {\n            return null;\n        }\n\n        return this.layers[index.z][index.y][index.x];\n    }\n\n    blockAtPosition (position) {\n        const indexes = this.positionToIndex(position);\n\n        return this.blockAtIndex(indexes);\n    }\n\n    blocksAtPositions (positions, types = []) {\n        const blocks = [];\n\n        for (const position of positions) {\n            const block = this.blockAtPosition(position);\n\n            if (block && types.indexOf(block.type) !== -1) {\n                blocks.push(block);\n            }\n        }\n\n        return blocks;\n    }\n\n    /**\n     * Get all blocks within two index positions in the map.\n     *\n     * @param {object} start - contains x, y, z index positions for start.\n     * @param {object} end - contains x, y, z index positions for end.\n     *\n     * @returns {array} All blocks within the box\n     */\n    blocksBetweenIndexes (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types = []) {\n        const blocks = [];\n\n        const min = start;\n        const max = end;\n\n        for (let z = 0; z < this.layers.length; z++) {\n            if ((z >= min.z && z <= max.z)) {\n                for (let y = 0; y < this.layers[z].length; y++) {\n                    if ((y >= min.y && y <= max.y)) {\n                        for (let x = 0; x < this.layers[z][y].length; x++) {\n                            if ((x >= min.x && x <= max.x)) {\n                                const index = { x, y, z };\n\n                                const block = this.blockAtIndex(index);\n\n                                if (block && types.indexOf(block.type) !== -1) {\n                                    blocks.push(block);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return blocks;\n    }\n\n    blocksBetweenPositions (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types) {\n        return this.blocksBetweenIndexes(this.positionToIndex(start), this.positionToIndex(end), types);\n    }\n\n    toString () {\n        let finalString = '';\n\n        for (const layer of this.layers) {\n            const layerStrings = [];\n\n            for (const layerRow of layer) {\n                const blocks = layerRow.map(v => v ? v.id : 0);\n\n                layerStrings.push(blocks.join(', '));\n            }\n\n            finalString = finalString.concat(layerStrings.join('\\n'));\n            finalString = finalString.concat('\\n---------------\\n');\n        }\n\n        return finalString;\n    }\n}\n\nexport default WorldMap;\n","import Block from './Block';\nimport Light from './Light';\nimport WorldMap from './WorldMap';\n\nconst _parseBlock = function (rawBlock, blockWidth, blockHeight, blockDepth) {\n    const position = {\n        x: rawBlock.position.x * blockWidth,\n        y: rawBlock.position.y * blockHeight,\n        z: rawBlock.position.z * blockDepth\n    };\n\n    const blockOptions = {\n        walls: rawBlock.walls,\n        type: rawBlock.type,\n        collidable: rawBlock.collidable\n    };\n\n    const block = new Block(position, blockWidth, blockHeight, blockDepth, blockOptions);\n\n    block.collidable = rawBlock.collidable || false;\n\n    return block;\n};\n\nconst _createEmptyLayers = function (mapWidth, mapHeight, mapDepth) {\n    const layers = [];\n\n    for (let z = 0; z < mapDepth; z++) {\n        const layer = [];\n\n        for (let y = 0; y < mapHeight; y++) {\n            const row = [];\n\n            for (let x = 0; x < mapDepth; x++) {\n                row.push(null);\n            }\n\n            layer.push(row);\n        }\n\n        layers.push(layer);\n    }\n\n    return layers;\n};\n\nconst parseLight = function (rawLight, blockWidth, blockHeight, blockDepth) {\n    const rawPosition = rawLight.position;\n    const sourcePosition = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    const position = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    let angle = Math.PI * 2;\n\n    if (rawLight.align === 'west') {\n        sourcePosition.x -= blockWidth / 2;\n    } else if (rawLight.align === 'east') {\n        sourcePosition.x += blockWidth / 2;\n        angle = 180 * (Math.PI / 180);\n    } else if (rawLight.align === 'north') {\n        sourcePosition.y += blockHeight / 2;\n        angle = 90 * (Math.PI / 180);\n    } else if (rawLight.align === 'south') {\n        sourcePosition.y -= blockHeight / 2;\n        angle = 270 * (Math.PI / 180);\n    }\n\n    const light = new Light(position.x, position.y, position.z, rawLight.color);\n\n    light.angle = angle;\n    light.sourcePosition = sourcePosition;\n\n    return light;\n};\n\nconst _parseRawMap = function (rawMap) {\n    // TODO validate map\n    const rawBlocks = rawMap.blocks;\n\n    const blockWidth = rawMap.blockWidth;\n    const blockHeight = rawMap.blockHeight;\n    const blockDepth = rawMap.blockDepth;\n\n    const mapWidth = rawMap.width;\n    const mapHeight = rawMap.height;\n    const mapDepth = rawMap.depth;\n\n    const layers = _createEmptyLayers(mapWidth, mapHeight, mapDepth);\n\n    for (const rawBlock of rawBlocks) {\n        const block = _parseBlock(rawBlock, blockWidth, blockHeight, blockDepth);\n\n        const position = rawBlock.position;\n\n        // TODO check for out of bounds\n        layers[position.z][position.y][position.x] = block;\n    }\n\n    const worldMap = new WorldMap(layers, mapWidth, mapHeight, mapDepth, blockWidth, blockHeight, blockDepth);\n\n    if (rawMap.lights) {\n        for (const rawLight of rawMap.lights) {\n            worldMap.lights.push(parseLight(rawLight, blockWidth, blockHeight, blockDepth));\n        }\n    }\n\n    worldMap.name = rawMap.name;\n    worldMap.respawns = [];\n\n    for (const respawn of rawMap.respawns) {\n        worldMap.respawns.push(respawn);\n    }\n\n    return worldMap;\n};\n\nconst MapParser = {\n    parse: function (rawMap) {\n        return _parseRawMap(rawMap);\n    }\n};\n\nexport default MapParser;\n","import Vector from './Vector';\nimport Polygon from './Polygon';\n\n// ## Box\n//\n// Represents an axis-aligned box, with a width and height.\n// Create a new box, with the specified position, width, and height. If no position\n// is given, the position will be `(0,0)`. If no width or height are given, they will\n// be set to `0`.\n/**\n * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n * @param {?number=} w The width of the box.\n * @param {?number=} h The height of the box.\n * @constructor\n */\nclass Box {\n    constructor (position = new Vector(), width = 0, height = 0) {\n        this.position = position;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * Returns a polygon whose edges are the same as this box.\n     * @return {Polygon} A new Polygon that represents this box.\n     */\n    toPolygon () {\n        const pos = this.position;\n        const w = this.width;\n        const h = this.height;\n\n        return new Polygon(new Vector(pos.x, pos.y), [\n            new Vector(), new Vector(w, 0),\n            new Vector(w, h), new Vector(0, h)\n        ]);\n    }\n}\n\nexport default Box;\n","import Vector from './Vector';\n\n// ## Response\n//\n// An object representing the result of an intersection. Contains:\n//  - The two objects participating in the intersection\n//  - The vector representing the minimum change necessary to extract the first object\n//    from the second one (as well as a unit vector in that direction and the magnitude\n//    of the overlap)\n//  - Whether the first object is entirely inside the second, and vice versa.\n/**\n * @constructor\n */\nclass Response {\n    constructor () {\n        this.a = null;\n        this.b = null;\n        this.overlapN = new Vector();\n        this.overlapV = new Vector();\n\n        this.clear();\n    }\n\n    /**\n     * Set some values of the response back to their defaults.  Call this between tests if\n     * you are going to reuse a single Response object for multiple intersection tests (recommented\n     * as it will avoid allcating extra memory)\n     *\n     * @return {Response} This for chaining\n     */\n    clear () {\n        this.aInB = true;\n        this.bInA = true;\n        this.overlap = Number.MAX_VALUE;\n\n        return this;\n    }\n}\n\nexport default Response;\n","import SAT from '../engine/collision/SAT';\nimport Response from '../engine/collision/Response';\n\nconst rayPositions = function (entity, rayDistance) {\n    let x = entity.position.x;\n    let y = entity.position.y;\n    const angle = entity.angle;\n\n    const reverse = entity.reverse ? -1 : 1;\n\n    const start = {};\n    const end = {};\n\n    if (Math.abs(entity.velocity.x) > 0) {\n        x -= rayDistance * Math.cos(angle) * reverse;\n    } else {\n        x -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.x < 0) {\n        start.x = x;\n        end.x = entity.position.x;\n    } else {\n        start.x = entity.position.x;\n        end.x = x;\n    }\n\n    if (Math.abs(entity.velocity.y) > 0) {\n        y -= rayDistance * Math.sin(angle) * reverse;\n    } else {\n        y -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.y < 0) {\n        start.y = y;\n        end.y = entity.position.y;\n    } else {\n        start.y = entity.position.y;\n        end.y = y;\n    }\n\n    start.z = entity.position.z;\n    end.z = entity.position.z;\n\n    return { min: start, max: end };\n};\n\nconst CollisionUtils = {\n    wallCollision (map, entity, onCollision) {\n        const rayDistance = (map.blockWidth + map.blockHeight) / 2;\n        const ray = rayPositions(entity, rayDistance);\n\n        if (!(ray.min.x === ray.max.x && ray.min.y === ray.max.y)) {\n            const blocks = map.blocksBetweenPositions(ray.min, ray.max, ['wall']);\n\n            for (const block of blocks) {\n                if (block.collidable) {\n                    const polygons = block.bodies;\n\n                    for (const polygon of polygons) {\n                        const response = new Response();\n\n                        if (SAT.testPolygonPolygon(entity.body, polygon, response)) {\n                            onCollision(response);\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    floorCollision (map, entity, delta, onCollision = () => {}) {\n        const nextEntityPosition = {\n            x: entity.position.x + (entity.velocity.x * delta),\n            y: entity.position.y + (entity.velocity.y * delta),\n            z: entity.position.z + (entity.velocity.z * delta)\n        };\n\n        const floorBlockIndex = map.positionToIndex(entity.position);\n\n        floorBlockIndex.z -= 1;\n\n        const block = map.blockAtIndex(floorBlockIndex);\n\n        if (block && block.collidable && block.walls.top) {\n            if (nextEntityPosition.z <= block.position.z + block.depth) {\n                onCollision(block);\n            }\n        } else {\n            entity.fall();\n        }\n    }\n};\n\nexport default CollisionUtils;\n","import CollisionUtils from './CollisionUtils';\n\nclass CollisionSystem {\n    constructor (state) {\n        this.state = state;\n        this.entities = state.soldiers;\n        this.map = this.state.map;\n    }\n\n    update (delta) {\n        for (const entity of this.entities) {\n            CollisionUtils.wallCollision(this.map, entity, (response) => {\n                entity.position.x -= response.overlapV.x;\n                entity.position.y -= response.overlapV.y;\n            });\n\n            CollisionUtils.floorCollision(this.map, entity, delta, (block) => {\n                if (block.type === 'water') {\n                    entity.fall();\n                    entity.kill();\n                } else {\n                    entity.position.z = block.position.z + block.depth;\n                    entity.stopFalling();\n                }\n            });\n        }\n    }\n}\n\nexport default CollisionSystem;\n","import Entity from './Entity';\n\nclass Bullet extends Entity {\n    constructor (x, y, z, width, height) {\n        super(x, y, z, width, height);\n\n        this.dead = true;\n        this.firedBy = null;\n        this.firedByWeapon = null;\n        this.speed = 0.3;\n\n        this.maxDistance = 500;\n        this.traveledDistance = 0;\n\n        this.options.isBullet = true;\n    }\n\n    get damage () {\n        if (this.firedByWeapon) {\n            return this.firedByWeapon.damage;\n        }\n\n        return 0;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        this.traveledDistance += this.speed * delta;\n\n        if (this.traveledDistance > this.maxDistance) {\n            this.dead = true;\n            this.traveledDistance = 0;\n        } else {\n            this.moveUp();\n        }\n    }\n}\n\nexport default Bullet;\n","import ObjectPool from '../engine/ObjectPool';\nimport Bullet from './entities/Bullet';\nimport SAT from '../engine/collision/SAT';\nimport CollisionUtils from './CollisionUtils';\n\nclass BulletSystem {\n    constructor (state, options = {}) {\n        this.state = state;\n        this.soldiers = this.state.soldiers;\n        this.map = this.state.map;\n\n        this.bulletPool = new ObjectPool(() => {\n            const bullet = new Bullet(0, 0, 0, 4, 10);\n\n            return bullet;\n        }, 10, 10, options.poolLimit || 200);\n\n        // Bullets that died last turn\n        this.deadBullets = new Set();\n\n        // Bullets currently flying around\n        this.activeBullets = new Set();\n    }\n\n    get poolSize () {\n        return this.bulletPool.size;\n    }\n\n    _fireBullet (firedBy) {\n        let bullet = this.bulletPool.get();\n\n        // If the pool is full, reused the first item.\n        if (!bullet) {\n            const firstBullet = this.activeBullets.values().next().value;\n\n            this.bulletPool.free(firstBullet);\n            bullet = this.bulletPool.get();\n        }\n\n        bullet.firedBy = firedBy;\n        bullet.firedByWeapon = firedBy.currentWeapon;\n        bullet.respawn(firedBy.position);\n        bullet.angle = firedBy.angle;\n        this.activeBullets.add(bullet);\n\n        return bullet;\n    }\n\n    killBullet (bullet) {\n        bullet.kill();\n        this.bulletPool.free(bullet());\n    }\n\n    update (delta) {\n        for (const soldier of this.soldiers) {\n            if (soldier.actions.firedBullet) {\n                this._fireBullet(soldier);\n            }\n        }\n\n        for (const bullet of this.activeBullets) {\n            bullet.update(delta);\n            CollisionUtils.wallCollision(this.map, bullet, () => bullet.kill());\n\n            if (bullet.dead) {\n                this.deadBullets.add(bullet);\n                this.activeBullets.delete(bullet);\n                this.bulletPool.free(bullet);\n            } else {\n                for (const soldier of this.soldiers) {\n                    if (!soldier.dead) {\n                        // Can't kill itself\n                        if (bullet.firedBy !== soldier) {\n                            // Check if on same level\n                            if ((bullet.position.z >= soldier.position.z) && (bullet.position.z < soldier.position.z + 50)) {\n                                if (SAT.pointInPolygon(bullet.point, soldier.body)) {\n                                    soldier.hitByBullet(bullet);\n                                    bullet.kill();\n                                    this.bulletPool.free(bullet);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default BulletSystem;\n","import PlayState from './PlayState';\nimport { ViewBuilder } from './ViewBuilder';\n\nimport Match from '../../core/Match';\nimport PlayerInput from './input/PlayerInput';\nimport UiInput from './input/UiInput';\nimport ComputerInput from './input/ComputerInput';\nimport Player from '../../core/entities/Player';\n\nimport PlayAudio from './PlayAudio';\nimport MapParser from '../../core/maps/MapParser';\nimport AssetManager from '../../engine/AssetManager';\n\nimport Soldier from '../../core/entities/Soldier';\nimport CollisionSystem from '../../core/CollisionSystem';\nimport BulletSystem from '../../core/BulletSystem';\n\n/**\n * Create CPU soldiers.\n *\n * @param {PlayState} state The play state.\n * @param {number} count Number of CPU soldiers.\n *\n * @return {void}\n */\nfunction createCpuSoldiers (state, count) {\n    for (let i = 0; i < count; i++) {\n        const { x, y, z } = state.map.randomRespawnPosition();\n        const soldier = new Soldier(x, y, z, 48, 48, 1, 'american');\n\n        state.inputs.add(new ComputerInput(soldier));\n        state.match.addSoldier(soldier);\n    }\n}\n\n/**\n * Create the player entity and add it to the play state.\n *\n * @param {PlayState} state The play state.\n * @param {string} name Name of the player.\n *\n * @return {void}\n */\nfunction createPlayer (state, name, dead = false) {\n    const { x, y, z } = state.map.randomRespawnPosition();\n    const player = new Player(x, y, z, 48, 48, 1, 'american');\n    const playerInput = new PlayerInput(player);\n\n    state.player = player;\n    state.inputs.add(playerInput);\n\n    player.kill();\n\n    state.match.addSoldier(player, 'american');\n}\n\n/**\n * Create the views for the play state.\n *\n * @param {PlayState} state The play state.\n *\n * @return {void}\n */\nfunction createViews (state) {\n    state.addView(ViewBuilder.playView(state));\n    state.addView(ViewBuilder.uiView(state));\n}\n\nconst PlayBuilder = {\n    createSingleplayer (engine, options) {\n        const map = MapParser.parse(AssetManager.getMap(options.map));\n        const match = new Match(options.teams);\n        const state = new PlayState(match, map);\n\n        createCpuSoldiers(state, options.cpuCount);\n        createPlayer(state, options.playerName);\n\n        const collisionSystem = new CollisionSystem(state);\n        const bulletSystem = new BulletSystem(state, {\n            poolLimit: options.poolLimit || 200\n        });\n\n        state.bulletSystem = bulletSystem;\n        state.collisionSystem = collisionSystem;\n        state.audio = new PlayAudio(state, 'guns', 'background');\n\n        const uiInput = new UiInput(state);\n\n        state.inputs.add(uiInput);\n\n        createViews(state);\n\n        return state;\n    },\n\n    createMultiplayer (engine, options) {\n        // const networkManager = new NetworkManager();\n        //\n        // networkManager.connect('http://' + options.url);\n        // networkManager.register(options.playerName);\n        //\n        // return networkManager.waitForReady().then((serverState) => {\n        //     let match = new Match(serverState.teams);\n        //     let map = MapParser.parse(AssetManager.getMap(serverState.map));\n        //\n        //     // TODO\n        //\n        //     return state;\n        // }).catch((err) => {\n        //     console.error('Error connecting to server');\n        //     console.error(err);\n        // });\n    }\n};\n\nexport default PlayBuilder;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport MenuInputItem from '../../../engine/menu-system/MenuInputItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\nimport PlayBuilder from '../../play/PlayBuilder';\n\nconst Multiplayer = {\n    create (engine, menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuInputItem('server', 'Server', 'localhost:3000', function (value) {\n            menuState.changeOption('server', value);\n        }));\n\n        menu.addMenuItem(new MenuItem('connect', 'Connect', function () {\n            // Do not allow navigation in the menu while loading\n            menu.freeze = true;\n\n            const options = {\n                url: menuState.options.get('server'),\n                playerName: menuState.options.get('name'),\n                poolSize: 200\n            };\n\n            PlayBuilder.createMultiplayer(engine, options).then((multiplayerState) => {\n                menu.freeze = false;\n                engine.addState('multiplayer', multiplayerState);\n\n                engine.changeState('multiplayer');\n            }).catch((err) => {\n                console.error('Error creating multiplayer game');\n                console.error(err);\n            });\n        }));\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('front', 'ui');\n\n        background.lightness = 0.8;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default Multiplayer;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst HelpMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default HelpMenu;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\nimport PlayBuilder from '../../play/PlayBuilder';\nimport LogoView from '../../menu/views/LogoView';\n\n/**\n * Create the play state.\n *\n * @param {Engine} engine Game engine.\n * @param {object} options Options for the play state.\n *\n * @return {PlayState} The created play state.\n */\nfunction createPlayState (engine, options) {\n    const playOptions = Object.assign({\n        poolLimit: 200,\n        teams: ['american', 'german'],\n        cpuCount: 7,\n        map: 'level2',\n        playerName: 'unknown soldier'\n    }, options);\n\n    const playState = PlayBuilder.createSingleplayer(engine, playOptions);\n\n    engine.addState('play', playState);\n\n    return playState;\n}\n\n/**\n * Create the menu and add items to it.\n *\n * @param {Engine} engine Game engine instance.\n * @param {MenuState} menuState The menu state.\n *\n * @return {Menu} Menu instance.\n */\nfunction createMenu (engine, menuState) {\n    const menu = new Menu();\n\n    menu.addMenuItem(new MenuItem('createGame', 'Singleplayer', (menuItem) => {\n        let playState = engine.states.get('play');\n\n        if (!playState) {\n            playState = createPlayState(engine, {\n                playerName: menuState.options.get('name')\n            });\n\n            menuItem.text = 'Create game';\n        } else {\n            menuState.gamePlaying = true;\n\n            playState.player.name = menuState.options.get('name');\n            menuItem.text = 'Continue game';\n        }\n\n        playState.resume();\n\n        engine.changeState('play');\n    }));\n\n    menu.addMenuItem(new MenuItem('createMultiplayerGame', 'Multiplayer', (menuItem) => {\n        menuState.currentMenu = 'multiplayer';\n    }));\n\n    menu.addMenuItem(new MenuItem('options', 'Options', () => {\n        menuState.currentMenu = 'options';\n    }));\n\n    menu.addMenuItem(new MenuItem('help', 'Help', () => {\n        menuState.currentMenu = 'help';\n    }));\n\n    return menu;\n}\n\n/**\n * Create the ViewContainer for this menu.\n *\n * @param {Menu} menu Menu instance.\n *\n * @return {ViewContainer} ViewContainer for the menu.\n */\nfunction createView (menu) {\n    const viewContainer = new ViewContainer();\n    const background = new BackgroundView('normandy', 'ui');\n\n    viewContainer.addDynamicView(new MenuItemsView(menu), { x: 500, y: 200, z: 0 });\n    viewContainer.addStaticView(new LogoView('logo', 'ui'), { x: 300, y: 300, z: 0 });\n\n    background.lightness = 0.5;\n    viewContainer.backgroundView = background;\n\n    return viewContainer;\n}\n\nconst MainMenu = {\n    create (engine, menuState) {\n        const menu = createMenu(engine, menuState);\n        const viewContainer = createView(menu);\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default MainMenu;\n","import State from '../State';\n\nclass MenuState extends State {\n\n    constructor () {\n        super('menu');\n\n        this.menus = new Map();\n        this._currentMenu = null;\n        this.currentMenuName = null;\n        this.options = new Map([\n            ['name', 'Unknown Soldier'],\n            ['server', 'localhost:3000']\n        ]);\n        this.gamePlaying = false;\n        this.currentOptionsEdit = null;\n    }\n\n    addMenu (name, menu) {\n        this.menus.set(name, menu);\n    }\n\n    changeOption (optionName, value) {\n        this.options.set(optionName, value);\n    }\n\n    set currentMenu (name) {\n        this._currentMenu = this.menus.get(name);\n\n        if (!this._currentMenu) {\n            throw new Error('Menu \"' + name + '\" does not exist');\n        }\n\n        this.currentMenuName = name;\n    }\n\n    get currentMenu () {\n        return this._currentMenu;\n    }\n\n    init () {\n        super.init();\n    }\n\n    update (delta) {\n        super.updateInputs(delta);\n\n        super.updateAudio(delta);\n    }\n}\n\nexport default MenuState;\n","import MenuInput from './MenuInput';\nimport MenuRenderView from './views/MenuRenderView';\nimport MenuAudio from './MenuAudio';\nimport OptionsMenu from './menus/OptionsMenu';\nimport MultiplayerMenu from './menus/MultiplayerMenu';\nimport HelpMenu from './menus/HelpMenu';\nimport MainMenu from './menus/MainMenu';\nimport MenuState from './MenuState';\n\nconst MenuBuilder = {\n    create (engine) {\n        const state = new MenuState();\n        const menuInput = new MenuInput(state);\n\n        state.inputs.add(menuInput);\n\n        const subMenus = new Map([\n            ['main', MainMenu.create(engine, state)],\n            ['multiplayer', MultiplayerMenu.create(engine, state)],\n            ['options', OptionsMenu.create(state)],\n            ['help', HelpMenu.create(state)]\n        ]);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            state.addMenu(subMenuName, subMenu.menu);\n        }\n\n        const menuView = new MenuRenderView(state);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            menuView.addViewContainer(subMenuName, subMenu.viewContainer);\n        }\n\n        menuView.currentViewContainer = 'main';\n        state.addView(menuView);\n\n        state.currentMenu = 'main';\n        state.audio = new MenuAudio(state, 'menu_effects', 'background');\n\n        return state;\n    }\n};\n\nexport default MenuBuilder;\n","import DebugStats from './statsjs';\n\nconst _rendererStats = function () {\n    const container = document.createElement('div');\n\n    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n    const msDiv = document.createElement('div');\n\n    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#200;';\n    container.appendChild(msDiv);\n\n    const msText = document.createElement('div');\n\n    msText.style.cssText = 'color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n    msText.innerHTML = 'WebGLRenderer';\n    msDiv.appendChild(msText);\n\n    const msTexts = [];\n    const nLines = 9;\n\n    for (let i = 0; i < nLines; i++) {\n        msTexts[i] = document.createElement('div');\n        msTexts[i].style.cssText = 'color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        msDiv.appendChild(msTexts[i]);\n        msTexts[i].innerHTML = '-';\n    }\n\n    let lastTime = Date.now();\n\n    return {\n        domElement: container,\n\n        update: function (info) {\n            // refresh only 30time per second\n            if (Date.now() - lastTime < 1000 / 30) {\n                return;\n            }\n\n            lastTime = Date.now();\n\n            let i = 0;\n\n            if (info) {\n                msTexts[i++].textContent = '== Memory =====';\n                msTexts[i++].textContent = 'Programs: ' + info.memory.programs;\n                msTexts[i++].textContent = 'Geometries: ' + info.memory.geometries;\n                msTexts[i++].textContent = 'Textures: ' + info.memory.textures;\n\n                msTexts[i++].textContent = '== Render =====';\n                msTexts[i++].textContent = 'Calls: ' + info.render.calls;\n                msTexts[i++].textContent = 'Vertices: ' + info.render.vertices;\n                msTexts[i++].textContent = 'Faces: ' + info.render.faces;\n                msTexts[i++].textContent = 'Points: ' + info.render.points;\n            }\n        }\n    };\n};\n\nexport default class RenderDebug {\n    constructor (renderer) {\n        this.renderer = renderer;\n    }\n\n    init () {\n        this.statjs = new DebugStats();\n        this.statjs.setModes([0, 1, 2]);\n\n        // Stats.js\n        this.statjs.domElement.style.position = 'absolute';\n        this.statjs.domElement.style.right = '81px';\n        this.statjs.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.statjs.domElement);\n\n        this.rendererStats = _rendererStats();\n\n        // renderer-stats.js\n        this.rendererStats.domElement.style.position = 'absolute';\n\n        this.rendererStats.domElement.style.right = '0px';\n        this.rendererStats.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.rendererStats.domElement);\n    }\n\n    before () {\n        this.statjs.begin();\n    }\n\n    after () {\n        this.statjs.end();\n        this.rendererStats.update(this.renderer.info);\n    }\n}\n","import RenderDebug from './utils/debug/RenderDebug';\nimport Renderer from './graphics/Renderer';\nimport MainLoop from './utils/mainloop';\n\nclass Engine {\n    constructor (options = { debugMode: false }) {\n        this.debugMode = options.debugMode;\n        this.states = new Map();\n        this.currentState = null;\n        this._renderer = new Renderer();\n\n        if (this.debugMode) {\n            this._renderDebug = new RenderDebug(this._renderer);\n            this._renderDebug.init();\n        }\n    }\n\n    /**\n     * Add a State to the engine.\n     *\n     * @param {string} name - Name of the state.\n     * @param {State} state - Instance of the state.\n     *\n     * @returns {void}\n     */\n    addState (name, state) {\n        this.states.set(name, state);\n    }\n\n    /**\n     * Change the current state and change the renderer's view to the view of the state.\n     *\n     * @param {string} name - Name of the state to change to.\n     *\n     * @returns {void}\n     */\n    changeState (name) {\n        this.currentState = this.states.get(name);\n        this.currentState.init();\n        if (this.currentState.views.size > 0) {\n            this._renderer.views = this.currentState.views;\n        } else {\n            console.warn('currentState has no View');\n        }\n    }\n\n    /**\n     * Remove a state from the engine.\n     *\n     * @param {string} name - Name of the state to remove.\n     *\n     * @returns {void}\n     */\n    removeState (name) {\n        this.states.delete(name);\n    }\n\n    /**\n     * The game loop. Updates the current state and renders it's Views.\n     *\n     * @returns {void}\n     */\n    run () {\n        const render = (interpolationPercentage) => {\n            this.currentState.render(interpolationPercentage);\n            this._renderer.render(interpolationPercentage);\n        };\n\n        const update = (delta) => {\n            if (this.currentState) {\n                this.currentState.update(delta);\n            } else {\n                console.warn('no current State');\n            }\n        };\n\n        const before = () => {\n            if (this.debugMode) {\n                this._renderDebug.before();\n            }\n        };\n\n        const after = () => {\n            if (this.debugMode) {\n                this._renderDebug.after();\n            }\n        };\n\n        const loop = MainLoop.create().setUpdate(update).setDraw(render).setBegin(before).setEnd(after);\n\n        loop.start();\n    }\n}\n\nexport default Engine;\n","import { Game } from './client/Game'\n\nGame.start();\n"],"sourceRoot":""}