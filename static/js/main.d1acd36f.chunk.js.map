{"version":3,"sources":["engine/input/Keys.ts","engine/AssetManager.js","engine/input/KeyboardInputSource.ts","client/State.ts","client/Game.ts","engine/utils/debug/statsjs.js","engine/input/Keyboard.ts","client/menu/MenuInput.ts","engine/graphics/RenderView.js","client/menu/views/MenuRenderView.js","client/StateAudio.ts","client/menu/MenuAudio.ts","engine/menu-system/Menu.js","engine/menu-system/MenuItem.js","engine/menu-system/MenuInputItem.js","engine/graphics/TextureAtlas.js","engine/graphics/TextureManager.js","engine/graphics/TextureFrame.js","engine/graphics/View.js","engine/graphics/BackgroundView.js","engine/graphics/ViewContainer.js","client/menu/views/LogoView.js","engine/three-bmfont-text/lib/utils.js","engine/three-bmfont-text/lib/layout-bmfont-text.js","engine/three-bmfont-text/index.js","engine/three-bmfont-text/lib/vertices.js","engine/graphics/TextView.js","client/menu/views/MenuItemsView.js","client/menu/menus/OptionsMenu.js","client/menu/menus/HelpMenu.js","client/play/PlayState.js","client/play/ui/StatsRenderView.js","client/play/ui/AmmoView.js","client/play/ui/HealthView.js","client/play/ui/WeaponView.js","client/play/ui/ScoreView.js","engine/ObjectPool.js","client/play/views/BulletView.js","client/play/views/BulletSystemView.js","engine/graphics/Animation.js","client/play/views/world/WaterBlocksView.js","client/play/views/world/StaticBlocksView.js","client/play/views/lights/LightView.js","client/play/views/WorldMapView.js","client/play/views/SoldierView.js","client/play/views/SoldierViewPool.js","client/play/views/PlayRenderView.js","client/play/ViewBuilder.js","core/Match.js","client/play/input/PlayerInput.ts","client/play/input/UiInput.ts","engine/collision/Vector.js","engine/collision/SAT.js","engine/collision/Polygon.js","core/entities/Entity.js","core/entities/Character.js","core/weapons/Gun.js","core/weapons/WeaponFactory.js","core/entities/Soldier.js","core/entities/Player.js","client/play/PlayAudio.ts","core/maps/Block.js","core/maps/Light.js","core/maps/WorldMap.js","core/maps/MapParser.js","engine/collision/Box.js","engine/collision/Response.js","core/CollisionUtils.js","core/CollisionSystem.js","core/entities/Bullet.js","core/BulletSystem.js","client/play/input/ComputerInput.ts","client/play/PlayBuilder.js","client/menu/menus/MainMenu.js","client/menu/MenuState.js","client/menu/MenuBuilder.js","engine/graphics/ThreeRenderer.ts","engine/utils/debug/RenderDebug.js","engine/graphics/DebugThreeRenderer.ts","engine/state/NullState.ts","engine/Engine.ts","engine/input/utils/gamepad-micro.js","engine/input/Gamepad.ts","engine/input/GamepadInputSource.ts","index.ts"],"names":["Keys","BACKSPACE","CTRL","SPACE","ENTER","SHIFT","ESC","TAB","LEFT","UP","RIGHT","DOWN","SpecialKeysShift","_","SpecialKeys","'","NumberKeys","LetterKeys","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AllKeys","_assets","atlases","Map","textures","maps","fonts","audio","_loadAudioSprite","audioSpritePath","name","_loadJson","then","spriteJson","src","urls","fullSources","push","Promise","resolve","reject","onload","onloaderror","soundId","err","sound","Howler","Howl","mapping","set","_loadHowlerAudio","_loadFont","fontsPath","font","pages","fontJson","pageTextures","map","pageName","_loadTexture","all","page","get","url","_textureLoader","load","texture","progress","console","log","loaded","total","fileLoader","response","_loadXhr","JSON","parse","_loadAtlas","atlasesPath","atlas","meta","image","_loadMap","mapsPath","AssetLoader","init","assetConfig","TextureLoader","FileLoader","assetsToLoad","paths","textureAtlases","atlasName","mapName","fontName","audioSpriteName","getTexture","Error","cloneTexture","clone","this","needsUpdate","getMap","getAtlasMapping","getFont","getAudioSprite","audioSprite","KeyboardInputSource","keyboard","Keyboard","global","addEventListener","event","onKeyup","onKeydown","State","engine","inputs","views","_initialized","Set","undefined","view","add","input","values","delta","update","ASSET_PATH","path","__dirname","ASSET_CONFIG","Game","AssetManager","Engine","gamepad","GamepadInputSource","menuState","MenuBuilder","create","addState","changeState","run","Stats","now","performance","bind","Date","startTime","prevTime","frames","modes","createElement","tag","id","css","element","document","style","cssText","createPanel","fg","bg","div","text","innerHTML","toUpperCase","appendChild","graph","i","setModes","children","container","length","indexOf","display","updateGraph","dom","value","firstChild","height","Math","min","fps","fpsMin","Number","POSITIVE_INFINITY","fpsMax","fpsDiv","fpsText","fpsGraph","ms","msMin","msMax","msDiv","msText","msGraph","mem","memMin","memMax","memDiv","memText","memGraph","memory","REVISION","domElement","setMode","begin","end","time","max","textContent","round","heapSize","usedJSHeapSize","heapSizeLimit","jsHeapSizeLimit","keys","_previousKeyboardKeys","_pressed","shiftDown","lastPressed","charKeys","codes","charCodes","codesShift","Object","concat","entries","key","code","charKey","shiftKey","keyCode","isDown","shiftCode","toLowerCase","MenuInput","inputSources","state","keyboardInputSource","gamepadInputSource","selectedItem","currentMenu","isEditing","keyboardDownOnce","isStickDown","moveUp","moveDown","editable","slice","lastPressedIsChar","keyByCode","lastPressedChar","gamepadButtonDownOnce","selectCurrentItem","RenderView","width","clearColor","viewContainers","_currentViewContainer","currentViewContainerName","camera","scene","Scene","viewContainer","mesh","visible","warn","size","aspect","updateProjectionMatrix","newViewContainer","MenuRenderView","menu","menus","OrthographicCamera","currentMenuName","currentViewContainer","StateAudio","effectsSpriteName","backgroundSpriteName","effects","backgrounds","stop","MenuAudio","play","Menu","menuItems","menuItemKeys","selectedItemIndex","freeze","menuItem","action","MenuItem","onAction","MenuInputItem","label","defaultValue","_value","TextureAtlas","wrapS","RepeatWrapping","wrapT","w","h","frame","d","bounds","Vector2","x","y","filename","framePosition","frameSize","_atlases","TextureManager","TextureFrame","textureAtlas","geometry","initialFrame","fixed","getFrameSize","_changeSize","aw","ah","faceVertexUvs","uvsNeedUpdate","frameName","offset","getFrameOffset","View","initialPosition","position","z","initialized","BackgroundView","textureName","textureAtlasName","_width","_height","_lightness","getAtlas","PlaneGeometry","textureFrame","material","MeshBasicMaterial","transparent","hsl","color","getHSL","setHSL","s","Mesh","lightness","_initalized","scale","ViewContainer","staticViews","dynamicViews","_backgroundView","Object3D","renderOrder","staticView","backgroundView","remove","dynamicView","LogoView","logoSize","box","positions","count","X_HEIGHTS","M_WIDTHS","CAP_HEIGHTS","TAB_ID","charCodeAt","SPACE_ID","TextLayout","opt","glyphs","_measure","computeMetrics","wrapper","Function","join","getGlyphById","chars","glyphIdx","findChar","getKerning","left","right","kernings","table","kern","first","second","amount","array","start","prototype","xtend","measure","_opt","tabSize","number","_setupSpaceGlyphs","lines","wordWrap","minWidth","maxLineWidth","reduce","prev","line","lineHeight","common","baseline","base","descender","letterSpacing","align","getAlignType","_descender","_baseline","_xHeight","idx","getXHeight","_capHeight","getCapHeight","_lineHeight","_ascender","self","forEach","lineIndex","lastGlyph","lineWidth","glyph","getGlyph","tx","data","index","xadvance","_linesTotal","_fallbackSpaceGlyph","_fallbackTabGlyph","space","getMGlyph","tabWidth","xoffset","yoffset","curPen","curWidth","nextPen","nextWidth","defineProperty","configurable","TextGeometry","assign","TypeError","layout","createLayout","flipY","texWidth","scaleW","texHeight","scaleH","filter","bitmap","visibleGlyphs","Float32Array","vertices","uvs","bw","bh","u0","v1","u1","v0","indices","createIndices","clockwise","type","setIndex","addAttribute","BufferAttribute","multipage","attributes","removeAttribute","boundingSphere","Sphere","itemSize","radius","center","output","minX","minY","sqrt","utils","isNaN","error","boundingBox","Box3","bbox","makeEmpty","BufferGeometry","TextView","options","_text","aligh","_color","rotation","PI","setHex","toString","_updateGeometry","MenuItemsView","selectedTextColor","textColor","viewMenuItemPairs","selectedView","logoView","itemCount","textView","previousItem","currentView","previousView","OptionsMenu","addMenuItem","changeOption","addDynamicView","background","HelpMenu","PlayState","match","collisionSystem","bulletSystem","player","showScores","paused","onPause","soldiers","soldier","dead","randomRespawnPosition","respawn","StatsRenderView","AmmoView","ammoSize","ammoMesh","magazineText","ammoText","ammo","magazine","currentWeapon","weapon","HealthView","_healthScale","applyMatrix","Matrix4","makeTranslation","oldX","healthScale","health","maxHealth","WeaponView","_weapon","ScoreView","backgroundMaterial","MeshLambertMaterial","opacity","backgroundGeometry","scoreTextView","_scoreText","teams","resultText","teamName","teamData","kills","deaths","soldierText","totalKills","totalDeaths","converToText","sortedScores","ObjectPool","factoryFunction","firstAllocationNumber","allocationNumber","allocationLimit","totalInstances","availableInstances","allocate","pop","object","BulletView","bullet","angle","interpolationPercentage","previous","previousPosition","current","BulletSystemView","bulletViewPool","poolSize","poolLimit","bulletViewPairs","WeakMap","deadBullets","deadBullet","bulletView","delete","activeBullets","Animation","interval","framePrefix","currentFrameIndex","currentDisplayTime","_updateTexture","WATER_FRAMES","waterGeometry","block","geometries","walls","top","getBounds","topGeometry","translate","blockGeometry","Geometry","merge","WaterBlocksView","waterFrames","_textureAtlasName","_waterFrames","blocks","blockWidth","blockHeight","blockDepth","mergedGeometry","mergeVertices","createMergedBlockGeometry","animation","wallBlockGeometry","south","southGeometry","rotateY","north","northGeometry","west","westGeometry","rotateX","east","eastGeometry","StaticBlocksView","side","DoubleSide","LightView","light","lightGeometry","lightMaterial","lightMesh","sourcePosition","rotateZ","spotLight","SpotLight","target","translateX","translateY","translateZ","WorldMapView","wallsView","waterView","lights","lightView","WALK_FRAMES","RUN_FRAMES","IDLE_FRAMES","TEAM_COLORS","american","german","SoldierView","_team","team","animations","walk","idle","currentAnimation","offsetHSL","isMoving","isRunning","reset","zOffset","depth","_updateAnimation","SoldierViewPool","viewPool","viewPairs","has","free","PlayRenderView","cameraFollowView","PerspectiveCamera","ambientLight","AmbientLight","cameraFollowLight","exponent","setX","setY","setZ","ViewBuilder","playState","uiView","uiViewContainer","scoreView","weaponView","ammoView","healthView","addViewContainer","playView","playerView","soldierView","bulletSystemView","worldMapView","soldierStatsByTeam","stat","resultsByTeam","teamResult","Match","matchTime","matchDuration","teamNames","leastTeamName","minCount","MAX_VALUE","teamWithLeastPlayers","sort","a","b","teamA","teamB","PlayerInput","stopMoving","turnRight","turnLeft","stopTurning","fireBullet","reload","scrollWeapons","UiInput","resume","pause","Vector","other","constructor","cos","sin","len","amt","dot","len2","axis","project","projectN","Polygon","setVertices","computedVertices","edges","normals","_compute","rotate","computedVertex","copy","p1","p2","e","sub","perp","normalize","xMin","yMin","xMax","yMax","vertex","Entity","speed","rotationSpeed","_body","halfWidth","halfHeight","physics","bullets","isBullet","isPlayer","isCharacter","body","setAngle","velocity","reverse","angularVelocity","collidable","shouldUpdate","actions","Character","walkingSpeed","runningSpeed","_isRunning","running","damage","kill","Gun","maxMagazine","maxAmmo","fireRate","reloadTime","_reloadingTime","_firedTime","_canFire","isReloading","fired","refill","floor","_fired","mp44","thompson","Soldier","weapons","currentWeaponIndex","addWeapon","WeaponFactory","isSoldier","direction","deathCount","firedBy","killedByCount","suicides","fire","firedBullet","Player","PlayAudio","entities","entity","Block","_position","_walls","_computeBodies","bodies","Light","WorldMap","layers","types","blocksBetweenIndexes","respawns","random","indexToPosition","indexes","positionToIndex","blockAtIndex","blockAtPosition","finalString","layer","layerStrings","v","_parseBlock","rawBlock","blockOptions","parseLight","rawLight","rawPosition","MapParser","rawMap","rawBlocks","mapWidth","mapHeight","mapDepth","row","_createEmptyLayers","worldMap","_parseRawMap","Box","pos","Response","overlapN","overlapV","clear","aInB","bInA","overlap","T_VECTORS","T_ARRAYS","T_RESPONSE","UNIT_SQUARE","toPolygon","_flattenVerticesOn","normal","result","_isSeparatingAxis","aPos","bPos","aPoints","bPoints","rangeA","rangeB","offsetV","projectedOffset","option1","option2","absOverlap","abs","negate","_vornoiRegion","point","dp","LEFT_VORONOI_REGION","RIGHT_VORONOI_REGION","MIDDLE_VORONOI_REGION","_testPolygonCircle","polygon","circle","circlePos","radius2","points","edge","next","region","point2","dist","distAbs","_testPolygonPolygon","aLen","bLen","SAT","testPolygonPolygon","testCirclePolygon","testPolygonCircle","testCircleCircle","differenceV","totalRadius","totalRadiusSq","distanceSq","pointInPolygon","p","poly","pointInCircle","c","radiusSq","CollisionUtils","wallCollision","onCollision","ray","rayDistance","rayPositions","blocksBetweenPositions","polygons","floorCollision","nextEntityPosition","floorBlockIndex","fall","CollisionSystem","stopFalling","Bullet","firedByWeapon","maxDistance","traveledDistance","BulletSystem","bulletPool","firstBullet","_fireBullet","hitByBullet","ComputerInput","PlayBuilder","createSingleplayer","addInput","addSoldier","createCpuSoldiers","cpuCount","playerInput","createPlayer","playerName","uiInput","addView","createViews","createMenu","states","gamePlaying","playOptions","createPlayState","MainMenu","addStaticView","createView","MenuState","_currentMenu","currentOptionsEdit","optionName","menuInput","subMenus","subMenuName","subMenu","addMenu","menuView","ThreeRenderer","divName","_views","webglRenderer","WebGLRenderer","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","autoClear","getElementById","clearDepth","render","RenderDebug","renderer","statjs","DebugStats","bottom","rendererStats","msTexts","lastTime","info","programs","calls","faces","_rendererStats","DebugThreeRenderer","renderDebug","before","after","NullState","debugMode","currentState","inputSource","loop","Mainloop","setUpdate","setDraw","setBegin","preRender","setEnd","postRender","GamepadMicro","_buttonNames","_ticking","_prevTimestamps","_connectionListening","_updateCallback","_prevRawGamepadTypes","gamepadconnected","_getRawGamepads","gamepadConnected","Boolean","gamepadSupported","_gamepadSupported","gamepads","_heldButtonDelay","_heldTimestampByGamepad","onUpdate","callback","_checkForEvents","_setupPoll","offUpdate","_shouldRemoveEvents","_removePoll","_onGamepadConnected","_onGamepadDisconnected","removeEventListener","leftStick","rightStick","dPad","buttons","timestamp","disconnectedGamepad","splice","navigator","getGamepads","webkitGetGamepads","standardGamepads","gp","_buttonPressed","pressure","_checkForGamepadChange","rawGamepads","changed","changedRawGamepads","gamepadIndex","heldTimestamps","hasBeenHeld","_poll","currentGamepads","buttonNames","currentRawGamepad","currentGamepad","activeButtons","k","heldTimestamp","wasDown","released","held","gamepadTimestamp","browserTimestamp","axes","dPadLeft","dPadRight","dPadUp","dPadDown","_tick","tickFunc","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","webkitGamepads","Gamepad","_previousGamepadStick","_previousGamepadButton","gamepadsconnected","button","stick"],"mappings":"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","file":"static/js/main.d1acd36f.chunk.js","sourcesContent":["\nexport const Keys = {\n    BACKSPACE: 8,\n    CTRL: 17,\n    SPACE: 32,\n    ENTER: 13,\n    SHIFT: 16,\n    ESC: 27,\n    TAB: 9,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n}\n\nexport const SpecialKeysShift = {\n    ':': 186,\n    '+': 187,\n    '<': 188,\n    _: 189,\n    '>': 190,\n    '?': 191,\n    '~': 192,\n    '{': 219,\n    '|': 220,\n    '}': 221,\n    '\"': 222\n}\n\nexport const SpecialKeys = {\n    ';': 186,\n    '=': 187,\n    ',': 188,\n    '-': 189,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '[': 219,\n    '\\\\': 220,\n    ']': 221,\n    '\\'': 222\n}\n\nexport const NumberKeys = {\n   '0': 48,\n   '1': 49,\n   '2': 50,\n   '3': 51,\n   '4': 52,\n   '5': 53,\n   '6': 54,\n   '7': 55,\n   '8': 56,\n   '9': 57\n}\n\nexport const LetterKeys  = {\n    A: 65,\n    B: 66,\n    C: 67,\n    D: 68,\n    E: 69,\n    F: 70,\n    G: 71,\n    H: 72,\n    I: 73,\n    J: 74,\n    K: 75,\n    L: 76,\n    M: 77,\n    N: 78,\n    O: 79,\n    P: 80,\n    Q: 81,\n    R: 82,\n    S: 83,\n    T: 84,\n    U: 86,\n    V: 86,\n    W: 87,\n    X: 88,\n    Y: 89,\n    Z: 90\n}\nexport const AllKeys = {\n    ...Keys,\n    ...LetterKeys,\n    ...SpecialKeys,\n    ...NumberKeys\n}\n","import Howler from 'howler';\nimport { FileLoader, TextureLoader } from 'three';\n\nconst _assets = {\n    atlases: new Map(),\n    textures: new Map(),\n    maps: new Map(),\n    fonts: new Map(),\n    audio: new Map()\n};\n\nconst _loadHowlerAudio = function (name, spriteJson) {\n    return new Promise((resolve, reject) => {\n        spriteJson.onload = function () {\n            return resolve();\n        };\n\n        spriteJson.onloaderror = function (soundId, err) {\n            return reject(err);\n        };\n\n        const sound = new Howler.Howl(spriteJson);\n\n        const audio = {\n            mapping: spriteJson,\n            sound: sound\n        };\n\n        _assets.audio.set(name, audio);\n    });\n};\n\nconst _loadAudioSprite = function (audioSpritePath, name) {\n    return _loadJson(audioSpritePath + name + '.json').then(function (spriteJson) {\n        // FIXME change \"urls\" to \"src\" to work with Howler 2\n        spriteJson.src = spriteJson.urls;\n\n        const fullSources = [];\n\n        for (const src of spriteJson.src) {\n            fullSources.push(audioSpritePath + src);\n        }\n\n        spriteJson.src = fullSources;\n\n        return _loadHowlerAudio(name, spriteJson);\n    });\n};\n\nconst _loadFont = function (fontsPath, name) {\n    const font = {\n        mapping: null,\n        pages: [],\n        textures: []\n    };\n\n    return _loadJson(fontsPath + name + '.json').then((fontJson) => {\n        font.mapping = fontJson;\n\n        const pageTextures = fontJson.pages.map((pageName) => {\n            font.pages.push(pageName);\n\n            return _loadTexture(pageName, fontsPath + pageName);\n        });\n\n        return Promise.all(pageTextures);\n    }).then(() => {\n        for (const page of font.pages) {\n            font.textures.push(_assets.textures.get(page));\n        }\n\n        _assets.fonts.set(name, font);\n    });\n};\n\nconst _loadTexture = function (name, url) {\n    return new Promise(function (resolve, reject) {\n        _textureLoader.load(url, function (texture) {\n            _assets.textures.set(name, texture);\n\n            return resolve();\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadXhr = function (url) {\n    return new Promise(function (resolve, reject) {\n        fileLoader.load(url, function (response) {\n            return resolve(response);\n        }, function (progress) {\n            console.log((progress.loaded / progress.total * 100) + '% loaded');\n        }, function (err) {\n            return reject(err);\n        });\n    });\n};\n\nconst _loadJson = function (url) {\n    return _loadXhr(url).then(function (response) {\n        try {\n            return JSON.parse(response);\n        } catch (err) {\n            throw err;\n        }\n    });\n};\n\nconst _loadAtlas = function (atlasesPath, name) {\n    return _loadJson(atlasesPath + name + '.json').then(function (atlas) {\n        return atlas;\n    }).then(function (atlas) {\n        _assets.atlases.set(name, atlas);\n\n        return _loadTexture(name, atlasesPath + atlas.meta.image);\n    });\n};\n\nconst _loadMap = function (mapsPath, name) {\n    return _loadJson(mapsPath + name + '.json').then(function (atlas) {\n        _assets.maps.set(name, atlas);\n    });\n};\n\nlet _textureLoader = null;\nlet fileLoader = null;\n\nconst AssetLoader = {\n    init: function (assetConfig) {\n        _textureLoader = new TextureLoader();\n        fileLoader = new FileLoader();\n\n        const assetsToLoad = [];\n        const paths = assetConfig.paths;\n\n        for (const atlasName of assetConfig.textureAtlases) {\n            assetsToLoad.push(_loadAtlas(paths.atlases + '/', atlasName));\n        }\n\n        for (const mapName of assetConfig.maps) {\n            assetsToLoad.push(_loadMap(paths.maps + '/', mapName));\n        }\n\n        for (const fontName of assetConfig.fonts) {\n            assetsToLoad.push(_loadFont(paths.fonts + '/', fontName));\n        }\n\n        for (const audioSpriteName of assetConfig.audio) {\n            assetsToLoad.push(_loadAudioSprite(paths.audio + '/', audioSpriteName));\n        }\n\n        return Promise.all(assetsToLoad);\n    },\n\n    getTexture (name) {\n        const texture = _assets.textures.get(name);\n\n        if (!texture) {\n            throw new Error('Texture does not exist: ' + name);\n        }\n\n        return texture;\n    },\n\n    cloneTexture (name) {\n        const texture = this.getTexture(name);\n        const clone = texture.clone();\n\n        clone.needsUpdate = true;\n\n        return clone;\n    },\n\n    getMap (name) {\n        const map = _assets.maps.get(name);\n\n        if (!map) {\n            throw new Error('Map does not exist: ' + name);\n        }\n\n        return map;\n    },\n\n    getAtlasMapping (name) {\n        const mapping = _assets.atlases.get(name);\n\n        if (!mapping) {\n            throw new Error('Atlas mapping does not exist: ' + name);\n        }\n\n        return mapping;\n    },\n\n    getFont (name) {\n        const font = _assets.fonts.get(name);\n\n        if (!font) {\n            throw new Error('Font does not exist: ' + name);\n        }\n\n        return font;\n    },\n\n    getAudioSprite (name) {\n        const audioSprite = _assets.audio.get(name);\n\n        if (!audioSprite) {\n            throw new Error('Audio sprite does not exist: ' + name);\n        }\n\n        return audioSprite;\n    }\n};\n\nexport default AssetLoader;\n","import {Keyboard} from \"./Keyboard\";\nimport {InputSourceInterface} from \"./InputSourceInterface\";\n\nexport class KeyboardInputSource implements InputSourceInterface {\n    public readonly keyboard: Keyboard;\n\n    constructor() {\n        this.keyboard = new Keyboard();\n\n        global.addEventListener('keyup', (event) => {\n            this.keyboard.onKeyup(event);\n        }, false);\n\n        global.addEventListener('keydown', (event) => {\n            this.keyboard.onKeydown(event);\n        }, false);\n    }\n}\n","/**\n * Base class for all states.\n *\n * @class\n */\nimport Engine from \"../engine/Engine\";\nimport {StateInput} from \"../engine/state/StateInput\";\n\nexport abstract class State {\n    protected readonly name: string;\n    protected readonly engine: Engine;\n    protected audio?: any;\n    protected inputs: Set<StateInput>;\n    public readonly views: Set<any>;\n    protected _initialized = false;\n\n    protected constructor (name: string, engine: Engine) {\n        this.name = name;\n        this.engine = engine;\n        this.inputs = new Set();\n        this.views = new Set();\n        this.audio = undefined;\n    }\n\n    public addView (view: any): void {\n        this.views.add(view);\n    }\n\n    public addInput(input: any): void {\n        this.inputs.add(input);\n    }\n\n    public abstract update(delta: number);\n\n    init () {\n        if (!this._initialized) {\n            if (this.audio) {\n                this.audio.init();\n            }\n\n            for (const view of this.views.values()) {\n                view.init();\n            }\n\n            this._initialized = true;\n        }\n    }\n\n    updateInputs (delta) {\n        for (const input of this.inputs.values()) {\n            input.update(delta);\n        }\n    }\n\n    render (delta) {\n        for (const view of this.views.values()) {\n            view.update(delta);\n        }\n    }\n\n    updateAudio (delta) {\n        if (this.audio) {\n            this.audio.update(delta);\n        }\n    }\n}\n","import Engine from '../engine/Engine';\nimport AssetManager from '../engine/AssetManager';\nimport path from 'path';\n\nimport MenuBuilder from './menu/MenuBuilder';\nimport {KeyboardInputSource} from \"../engine/input/KeyboardInputSource\";\nimport {GamepadInputSource} from \"../engine/input/GamepadInputSource\";\n\nconst ASSET_PATH = path.resolve(__dirname, '../../assets/');\nconst ASSET_CONFIG = {\n    paths: {\n        maps: ASSET_PATH + '/maps',\n        atlases: ASSET_PATH + '/spritesheets',\n        fonts: ASSET_PATH + '/fonts',\n        audio: ASSET_PATH + '/audio/sprites'\n    },\n    textureAtlases: [\n        'soldier',\n        'tiles',\n        'world',\n        'ui'\n    ],\n    maps: [\n        'level1',\n        'level2'\n    ],\n    fonts: [\n        'keep_calm'\n    ],\n    audio: [\n        'guns',\n        'background',\n        'menu_effects'\n    ]\n};\n\nexport class Game {\n\n    /**\n     * Load assets and start the game.\n     *\n     * @returns {void}\n     */\n    public async start () {\n        await AssetManager.init(ASSET_CONFIG);\n\n        const engine = new Engine(\n            true,\n            {\n                keyboard: new KeyboardInputSource(),\n                gamepad: new GamepadInputSource()\n            }\n        );\n\n        const menuState = MenuBuilder.create(engine);\n\n        engine.addState('menu', menuState);\n\n        engine.changeState('menu');\n\n        engine.run();\n    }\n}\n","/**\n * View that shows FPS, memory usage and render time.\n *\n * @returns {object} statsjs object\n */\nconst Stats = function () {\n    const now = (global.performance && global.performance.now) ? global.performance.now.bind(performance) : Date.now;\n\n    let startTime = now();\n    let prevTime = startTime;\n    let frames = 0;\n    let modes = [0];\n\n    const createElement = function (tag, id, css) {\n        const element = document.createElement(tag);\n\n        element.id = id;\n        element.style.cssText = css;\n\n        return element;\n    };\n\n    const createPanel = function (id, fg, bg) {\n        const div = createElement('div', id, 'padding:0 0 3px 3px;text-align:left;background:' + bg);\n\n        const text = createElement('div', id + 'Text', 'font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px;color:' + fg);\n\n        text.innerHTML = id.toUpperCase();\n        div.appendChild(text);\n\n        const graph = createElement('div', id + 'Graph', 'width:74px;height:30px;background:' + fg);\n\n        div.appendChild(graph);\n\n        for (let i = 0; i < 74; i++) {\n            graph.appendChild(createElement('span', '', 'width:1px;height:30px;float:left;opacity:0.9;background:' + bg));\n        }\n\n        return div;\n    };\n\n    const setModes = function (values) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            if (values.indexOf(i) < 0) {\n                children[i].style.display = 'none';\n            } else {\n                children[i].style.display = 'block';\n            }\n        }\n\n        modes = values;\n    };\n\n    const setMode = function (value) {\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++) {\n            children[i].style.display = i === value ? 'block' : 'none';\n        }\n\n        modes = [value];\n    };\n\n    const updateGraph = function (dom, value) {\n        const child = dom.appendChild(dom.firstChild);\n\n        child.style.height = Math.min(30, 30 - value * 30) + 'px';\n    };\n\n    const container = createElement('div', 'stats', 'width:80px;opacity:0.9;cursor:pointer');\n\n    // FPS\n    let fps = 0;\n    let fpsMin = Number.POSITIVE_INFINITY;\n    let fpsMax = 0;\n\n    const fpsDiv = createPanel('fps', '#0ff', '#002');\n    const fpsText = fpsDiv.children[0];\n    const fpsGraph = fpsDiv.children[1];\n\n    container.appendChild(fpsDiv);\n\n    // MS\n    let ms = 0;\n    let msMin = Number.POSITIVE_INFINITY;\n    let msMax = 0;\n\n    const msDiv = createPanel('ms', '#0f0', '#020');\n    const msText = msDiv.children[0];\n    const msGraph = msDiv.children[1];\n\n    container.appendChild(msDiv);\n\n    let mem = 0;\n    let memMin = Number.POSITIVE_INFINITY;\n    let memMax = 0;\n    const memDiv = createPanel('mb', '#f08', '#201');\n    const memText = memDiv.children[0];\n    const memGraph = memDiv.children[1];\n\n    // MEM\n    if (global.performance && global.performance.memory) {\n        container.appendChild(memDiv);\n    }\n\n    setModes([modes]);\n\n    return {\n        REVISION: 14,\n        domElement: container,\n        setMode: setMode,\n        setModes: setModes,\n        begin: function () {\n            startTime = now();\n        },\n        end: function () {\n            const time = now();\n\n            ms = time - startTime;\n            msMin = Math.min(msMin, ms);\n            msMax = Math.max(msMax, ms);\n\n            msText.textContent = (ms | 0) + ' MS (' + (msMin | 0) + '-' + (msMax | 0) + ')';\n            updateGraph(msGraph, ms / 200);\n\n            frames++;\n\n            if (time > prevTime + 1000) {\n                fps = Math.round((frames * 1000) / (time - prevTime));\n                fpsMin = Math.min(fpsMin, fps);\n                fpsMax = Math.max(fpsMax, fps);\n\n                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n                updateGraph(fpsGraph, fps / 100);\n\n                prevTime = time;\n                frames = 0;\n\n                if (typeof mem !== 'undefined' && performance && performance.memory) {\n                    const heapSize = performance.memory.usedJSHeapSize;\n                    const heapSizeLimit = performance.memory.jsHeapSizeLimit;\n\n                    mem = Math.round(heapSize * 0.000000954);\n                    memMin = Math.min(memMin, mem);\n                    memMax = Math.max(memMax, mem);\n\n                    memText.textContent = mem + ' MB (' + memMin + '-' + memMax + ')';\n                    updateGraph(memGraph, heapSize / heapSizeLimit);\n                }\n            }\n\n            return time;\n        },\n\n        update: function () {\n            startTime = this.end();\n        }\n    };\n};\n\nexport default Stats;\n","import {Keys, LetterKeys, NumberKeys, SpecialKeys, SpecialKeysShift} from \"./Keys\";\n\nconst keys: {[key: string]: number} = {\n    ...Keys,\n    ...NumberKeys,\n    ...LetterKeys,\n    ...SpecialKeys\n};\n\nexport class Keyboard {\n    private readonly _previousKeyboardKeys: {[key: number]: boolean} = {};\n    private _pressed: {[key: string]: boolean} = {};\n    private shiftDown: boolean = false;\n    public lastPressed?: number;\n    private readonly charKeys: string[];\n    private readonly codes: { [key: number]: string} = {};\n    private readonly charCodes: number[] = [];\n    private readonly codesShift: { [key: number]: string} = {};\n\n    constructor() {\n        this.charKeys = Object.keys(SpecialKeys).concat(Object.keys(NumberKeys)).concat(Object.keys(LetterKeys));\n\n        for (const [key, code] of Object.entries(keys)) {\n            this.codes[code] = key;\n        }\n\n        for (const charKey of this.charKeys) {\n            this.charCodes.push(keys[charKey]);\n        }\n\n        for (const shiftKey of Object.keys(SpecialKeysShift)) {\n            const code = SpecialKeysShift[shiftKey];\n\n            this.codesShift[code] = shiftKey;\n        }\n\n    }\n\n    keyboardDownOnce (keyCode) {\n        if (!this._previousKeyboardKeys[keyCode] && this.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = true;\n\n            return true;\n        } else if (this._previousKeyboardKeys[keyCode] && !this.isDown(keyCode)) {\n            this._previousKeyboardKeys[keyCode] = false;\n        }\n\n        return false;\n    }\n\n    lastPressedIsChar () {\n        const lastPressed = this.lastPressed;\n\n        if (lastPressed && this.charCodes.indexOf(lastPressed) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    lastPressedChar () {\n        const lastPressed = this.lastPressed;\n\n        if (!lastPressed) {\n            return undefined;\n        }\n\n        if (this.shiftDown) {\n            const shiftCode = this.codesShift[lastPressed];\n\n            if (shiftCode && Object.keys(SpecialKeysShift).indexOf(shiftCode) !== -1) {\n                return this.codesShift[lastPressed];\n            }\n\n            return this.codes[lastPressed].toUpperCase();\n        }\n\n        return this.codes[lastPressed].toLowerCase();\n    }\n\n    public isDown (keyCode) {\n        return this._pressed[keyCode];\n    }\n\n    public onKeydown (event) {\n        this.shiftDown = event.shiftKey;\n        this.lastPressed = event.keyCode;\n        this._pressed[event.keyCode] = true;\n    }\n\n    onKeyup (event) {\n        this._pressed[event.keyCode] = false;\n    }\n\n    keyByCode (code) {\n        return this.codes[code];\n    }\n\n    get pressedCodes () {\n        return this._pressed;\n    }\n}\n","import Gamepad from '../../engine/input/Gamepad';\nimport MenuState from \"./MenuState\";\nimport {AllKeys, Keys} from \"../../engine/input/Keys\";\nimport {StateInput} from \"../../engine/state/StateInput\";\nimport {InputSourceInterface} from \"../../engine/input/InputSourceInterface\";\nimport {Keyboard} from \"../../engine/input/Keyboard\";\nimport {KeyboardInputSource} from \"../../engine/input/KeyboardInputSource\";\nimport {GamepadInputSource} from \"../../engine/input/GamepadInputSource\";\n\nclass MenuInput implements StateInput {\n    private state: MenuState;\n    private gamepad?: Gamepad;\n    private keyboard: Keyboard;\n\n    constructor (inputSources: Map<string, InputSourceInterface>, state: MenuState) {\n        this.state = state;\n\n        const keyboardInputSource = inputSources.get('keyboard');\n        const gamepadInputSource = inputSources.get('gamepad') as GamepadInputSource|undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error('No keyboard input');\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n    }\n\n    update () {\n        const state = this.state;\n        const selectedItem = state.currentMenu.selectedItem;\n\n        // Do not change selection while editing\n        if (!selectedItem.isEditing) {\n            if (this.keyboard.keyboardDownOnce(Keys.UP) || this.gamepad?.isStickDown('left', 'up')) {\n                state.currentMenu.moveUp();\n            } else if (this.keyboard.keyboardDownOnce(Keys.DOWN) || this.gamepad?.isStickDown('left', 'down')) {\n                state.currentMenu.moveDown();\n            }\n        }\n\n        if (selectedItem.editable && selectedItem.isEditing) {\n            if (this.keyboard.keyboardDownOnce(Keys.BACKSPACE)) {\n                selectedItem.value = selectedItem.value.slice(0, -1);\n            } else if (this.keyboard.lastPressedIsChar()) {\n                if (this.keyboard.keyboardDownOnce(AllKeys[this.keyboard.keyByCode(this.keyboard.lastPressed)])) {\n                    selectedItem.value += this.keyboard.lastPressedChar();\n                }\n            }\n        }\n\n        if (this.keyboard.keyboardDownOnce(Keys.ENTER) || this.keyboard.keyboardDownOnce(Keys.SPACE) ||\n                this.gamepad?.gamepadButtonDownOnce('actionSouth')) {\n            state.currentMenu.selectCurrentItem();\n        }\n    }\n}\n\nexport default MenuInput;\n","import { Scene } from 'three';\n\nclass RenderView {\n    constructor () {\n        this.width = 800;\n        this.height = 600;\n        this._initialized = false;\n        this.clearColor = 0x000000;\n        this.viewContainers = new Map();\n        this._currentViewContainer = null;\n        this.currentViewContainerName = null;\n        this.camera = null;\n    }\n\n    init () {\n        this.scene = new Scene();\n\n        for (let [name, viewContainer] of this.viewContainers.entries()) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n\n            if (name === this.currentViewContainerName) {\n                viewContainer.visible = true;\n                this._currentViewContainer = viewContainer;\n            } else {\n                viewContainer.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this._currentViewContainer) {\n            this._currentViewContainer.update(delta);\n        } else {\n            console.warn('no current ViewContainer');\n        }\n    }\n\n    set size (size) {\n        this.width = size.width;\n        this.height = size.height;\n\n        if (this.camera) {\n            this.camera.aspect = this.width / this.height;\n            this.camera.updateProjectionMatrix();\n        }\n\n        if (this._initialized) {\n            for (const viewContainer of this.viewContainers.values()) {\n                viewContainer.width = this.width;\n                viewContainer.height = this.height;\n            }\n        }\n    }\n\n    set currentViewContainer (name) {\n        const newViewContainer = this.viewContainers.get(name);\n\n        if (this._initialized) {\n            if (this._currentViewContainer) {\n                this._currentViewContainer.visible = false;\n            }\n\n            newViewContainer.visible = true;\n        }\n\n        this.currentViewContainerName = name;\n        this._currentViewContainer = newViewContainer;\n    }\n\n    get currentViewContainer () {\n        return this._currentViewContainer;\n    }\n\n    addViewContainer (name, viewContainer) {\n        if (this._initialized) {\n            viewContainer.init();\n            viewContainer.width = this.width;\n            viewContainer.height = this.height;\n\n            this.scene.add(viewContainer.mesh);\n        }\n        this.viewContainers.set(name, viewContainer);\n    }\n}\n\nexport default RenderView;\n","import { OrthographicCamera } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\nclass MenuRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.menu = state.menus;\n        this.clearColor = 0x000000;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new OrthographicCamera(0, this.width,\n            this.height, 0, 0, 1);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.currentViewContainerName !== this.state.currentMenuName) {\n            this.currentViewContainer = this.state.currentMenuName;\n        }\n    }\n}\n\nexport default MenuRenderView;\n","import AssetManager from '../engine/AssetManager';\n\nexport class StateAudio {\n    protected effectsSpriteName?: string;\n    protected backgroundSpriteName?: string;\n    protected effects?: any;\n    protected backgrounds?: any;\n    protected _initialized: boolean;\n\n    constructor (effectsSpriteName?: string, backgroundSpriteName?: string) {\n        this.effectsSpriteName = effectsSpriteName;\n        this.backgroundSpriteName = backgroundSpriteName;\n\n        this.effects = null;\n        this.backgrounds = null;\n\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.effectsSpriteName) {\n            this.effects = AssetManager.getAudioSprite(this.effectsSpriteName).sound;\n        }\n\n        if (this.backgroundSpriteName) {\n            this.backgrounds = AssetManager.getAudioSprite(this.backgroundSpriteName).sound;\n        }\n\n        this._initialized = true;\n    }\n\n    stopEffects () {\n        if (this.effects) {\n            this.effects.stop();\n        }\n    }\n\n    stopBackground () {\n        if (this.backgrounds) {\n            this.backgrounds.stop();\n        }\n    }\n}\n","import { StateAudio } from '../StateAudio';\nimport MenuState from \"./MenuState\";\n\nclass MenuAudio extends StateAudio {\n    private selectedItem: any;\n    private state: MenuState;\n\n    constructor (state: MenuState, effectsSpriteName: string, backgroundSpriteName: string) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.state = state;\n        this.selectedItem = state.currentMenu.selectedItem;\n    }\n\n    update (delta) {\n        // Selected item changed\n        if (this.selectedItem !== this.state.currentMenu.selectedItem) {\n            this.selectedItem = this.state.currentMenu.selectedItem;\n            this.effects.play('select');\n        }\n    }\n}\n\nexport default MenuAudio;\n","class Menu {\n    constructor () {\n        this.menuItems = new Map();\n        this.menuItemKeys = [];\n        this.selectedItemIndex = 0;\n        this.freeze = false;\n    }\n\n    addMenuItem (menuItem) {\n        this.menuItemKeys.push(menuItem.name);\n        this.menuItems.set(menuItem.name, menuItem);\n    }\n\n    get selectedItem () {\n        return this.menuItems.get(this.menuItemKeys[this.selectedItemIndex]);\n    }\n\n    moveUp () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex > 0) {\n                this.selectedItemIndex -= 1;\n            } else {\n                this.selectedItemIndex = 0;\n            }\n        }\n    }\n\n    moveDown () {\n        if (!this.freeze) {\n            if (this.selectedItemIndex < this.menuItemKeys.length - 1) {\n                this.selectedItemIndex += 1;\n            } else {\n                this.selectedItemIndex = this.menuItemKeys.length - 1;\n            }\n        }\n    }\n\n    selectCurrentItem () {\n        this.selectedItem.action();\n    }\n}\n\nexport default Menu;\n","class MenuItem {\n    constructor (name, text, onAction = null) {\n        this.name = name;\n        this.text = text;\n        this.onAction = onAction;\n        this.editable = false;\n    }\n\n    action () {\n        if (this.onAction) {\n            this.onAction(this);\n        }\n    }\n}\n\nexport default MenuItem;\n","import MenuItem from './MenuItem';\n\nclass MenuInputItem extends MenuItem {\n    constructor (name, label, defaultValue, onAction) {\n        super(name, label + ': ' + defaultValue, onAction);\n\n        this.label = label;\n        this.defaultValue = defaultValue;\n        this.isEditing = false;\n        this._value = defaultValue;\n        this.editable = true;\n    }\n\n    action () {\n        this.isEditing = !this.isEditing;\n\n        if (!this.isEditing && this.onAction) {\n            this.onAction(this._value);\n        }\n    }\n\n    set value (value) {\n        this._value = value;\n        this.text = this.label + ': ' + value;\n    }\n\n    get value () {\n        return this._value;\n    }\n}\n\nexport default MenuInputItem;\n","import { RepeatWrapping, Vector2 } from 'three';\nimport AssetManager from '../AssetManager';\n\nclass TextureAtlas {\n    constructor (name, clone, filter = {}) {\n        this.mapping = AssetManager.getAtlasMapping(name);\n\n        if (!this.mapping) {\n            throw new Error('TextureAtlas does not exists', name);\n        }\n\n        if (clone) {\n            this.texture = AssetManager.cloneTexture(name);\n        } else {\n            this.texture = AssetManager.getTexture(name);\n        }\n\n        this.texture.wrapS = RepeatWrapping;\n        this.texture.wrapT = RepeatWrapping;\n\n        this.width = this.mapping.meta.size.w;\n        this.height = this.mapping.meta.size.h;\n\n        this.frames = new Map();\n\n        for (const frame of this.mapping.frames) {\n            const d = frame.frame;\n\n            // Origin image is y-inverted compared to what THREE wants\n            const bounds = [\n                new Vector2(d.x / this.width, (this.height - (d.y)) / this.height), // lower left\n                new Vector2(d.x / this.width, (this.height - (d.y + d.h)) / this.height), // upper left\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y + d.h)) / this.height), // upper right\n                new Vector2((d.x + d.w) / this.width, (this.height - (d.y)) / this.height) // lower right\n            ];\n\n            this.frames.set(frame.filename, {\n                bounds: bounds,\n                frame: frame,\n                framePosition: {\n                    x: d.x,\n                    y: d.y\n                },\n                frameSize: {\n                    width: d.w,\n                    height: d.h\n                }\n            });\n        }\n    }\n\n    getFrameOffset (name) {\n        const d = this.frames.get(name + '.png').framePosition;\n\n        return new Vector2(d.x / this.width, (this.height - d.y) / this.height);\n    }\n\n    getFrameSize (name) {\n        return this.frames.get(name + '.png').frameSize;\n    }\n\n    getBounds (name) {\n        return this.frames.get(name + '.png').bounds;\n    }\n}\n\nexport default TextureAtlas;\n","import TextureAtlas from './TextureAtlas';\nconst _atlases = new Map();\n\nexport class TextureManager {\n    static getAtlas (name, clone) {\n        if (clone) {\n            return new TextureAtlas(name, clone);\n        }\n\n        let atlas = _atlases.get(name);\n\n        if (!atlas) {\n            atlas = new TextureAtlas(name);\n\n            _atlases.set(name, atlas);\n        }\n\n        return atlas;\n    }\n}\n","import { Vector2 } from 'three';\n\nexport class TextureFrame {\n    constructor (textureAtlas, geometry, initialFrame, fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n        this.fixed = fixed;\n\n        if (initialFrame) {\n            this.frame = initialFrame;\n\n            if (fixed) {\n                const size = this.textureAtlas.getFrameSize(initialFrame);\n\n                this._changeSize(size.width, size.height);\n            }\n        }\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _changeSize (width, height) {\n        this.width = width;\n        this.height = height;\n        const aw = this.textureAtlas.width;\n        const ah = this.textureAtlas.height;\n\n        if (this.geometry) {\n            // TODO make this more efficient (no new instances necessary)\n            const bounds = [\n                new Vector2(0, ah / ah), // lower left\n                new Vector2(0, (ah - height) / ah), // upper left\n                new Vector2(width / aw, (ah - height) / ah), // upper right\n                new Vector2(width / aw, ah / ah) // lower right\n            ];\n\n            // If a geometry is merged, for example multiple planes\n            for (let i = 1; i < this.geometry.faceVertexUvs[0].length; i += 2) {\n                this.geometry.faceVertexUvs[0][i - 1] = [bounds[0], bounds[1], bounds[3]];\n                this.geometry.faceVertexUvs[0][i] = [bounds[1], bounds[2], bounds[3]];\n            }\n\n            this.geometry.uvsNeedUpdate = true;\n        }\n    }\n\n    set frame (frameName) {\n        const offset = this.textureAtlas.getFrameOffset(frameName);\n        const size = this.textureAtlas.getFrameSize(frameName);\n\n        // Size changed\n        if (!this.fixed) {\n            if (size.width !== this.width || size.height !== this.height) {\n                this._changeSize(size.width, size.height);\n            }\n        }\n\n        this.texture.offset = offset;\n    }\n}\n","export class View {\n    constructor () {\n        this.mesh = null;\n        this.initialPosition = null;\n        this._initialized = false;\n    }\n\n    init () {\n        if (this.initialPosition) {\n            if (!this.mesh) {\n                throw new Error('No mesh initialized!');\n            }\n\n            this.mesh.position.x = this.initialPosition.x;\n            this.mesh.position.y = this.initialPosition.y;\n            this.mesh.position.z = this.initialPosition.z;\n        }\n\n        this._initialized = true;\n    }\n\n    get position () {\n        return this.mesh.position;\n    }\n\n    set position ({ x, y, z }) {\n        if (this.mesh && this.initialized) {\n            if (x) {\n                this.mesh.position.x = x;\n            }\n\n            if (y) {\n                this.mesh.position.y = y;\n            }\n\n            if (z) {\n                this.mesh.position.z = z;\n            }\n        } else {\n            this.initialPosition = {\n                x: x,\n                y: y,\n                z: z\n            };\n        }\n    }\n}\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from './TextureManager';\nimport {TextureFrame} from './TextureFrame';\nimport {View} from './View';\n\nclass BackgroundView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n        this._width = null;\n        this._height = null;\n        this._lightness = 1;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const size = textureAtlas.getFrameSize(this.textureName);\n\n        this._width = size.width;\n        this._height = size.height;\n\n        this.geometry = new PlaneGeometry(size.width, size.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n\n        this.material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        const hsl = this.material.color.getHSL();\n\n        this.material.color.setHSL(hsl.h, hsl.s, this._lightness);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set lightness (lightness) {\n        if (this._initalized) {\n            const hsl = this.material.color.getHSL();\n\n            this.material.color.setHSL(hsl.h, hsl.s, lightness);\n        }\n\n        this._lightness = lightness;\n    }\n\n    get lightness () {\n        return this._lightness;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this.mesh.scale.x = scale;\n        this.mesh.position.x = width / 2;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this.mesh.scale.y = scale;\n        this.mesh.position.y = height / 2;\n    }\n}\n\nexport default BackgroundView;\n","import { Object3D } from 'three';\n\nclass ViewContainer {\n    constructor () {\n        this.staticViews = new Set();\n        this.dynamicViews = new Set();\n        this._backgroundView = null;\n        this._width = 800;\n        this._height = 600;\n\n        this._initialized = false;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        if (this._backgroundView) {\n            this._backgroundView.init();\n            this._backgroundView.width = this._width;\n            this._backgroundView.height = this._height;\n            this._backgroundView.mesh.renderOrder = -1;\n            this.mesh.add(this._backgroundView.mesh);\n        }\n\n        for (const staticView of this.staticViews) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        for (const view of this.dynamicViews) {\n            view.init();\n            this.mesh.add(view.mesh);\n        }\n\n        this._initialized = true;\n    }\n\n    set backgroundView (backgroundView) {\n        if (backgroundView !== this._backgroundView) {\n            if (this._initialized) {\n                this._backgroundView.init();\n                this._backgroundView.width = this._width;\n                this._backgroundView.height = this._height;\n                this._backgroundView.mesh.renderOrder = -1;\n                this.mesh.remove(this._backgroundView);\n            }\n\n            this._backgroundView = backgroundView;\n        } else {\n            console.warn('backgroundView is the same');\n        }\n    }\n\n    update (delta) {\n        if (!this._initialized) {\n            throw new Error('View not initialized.');\n        }\n\n        for (const view of this.dynamicViews) {\n            view.update(delta);\n        }\n    }\n\n    addStaticView (staticView, position) {\n        if (this._initialized) {\n            staticView.init();\n            this.mesh.add(staticView.mesh);\n        }\n\n        if (position) {\n            staticView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.staticViews.add(staticView);\n    }\n\n    addDynamicView (dynamicView, position) {\n        if (this._initialized) {\n            dynamicView.init();\n            this.mesh.add(dynamicView.mesh);\n        }\n\n        if (position) {\n            dynamicView.position = { x: position.x, y: position.y, z: position.z };\n        }\n\n        this.dynamicViews.add(dynamicView);\n    }\n\n    set visible (visible) {\n        this.mesh.visible = visible;\n    }\n\n    get visible () {\n        return this.mesh.visible;\n    }\n\n    set width (width) {\n        const scale = width / this._width;\n\n        this._width = width;\n\n        if (this._backgroundView) {\n            this._backgroundView.width = this._width;\n        }\n\n        this.mesh.scale.x = scale;\n    }\n\n    set height (height) {\n        const scale = height / this._height;\n\n        this._height = height;\n\n        if (this._backgroundView) {\n            this._backgroundView.height = this._height;\n        }\n\n        this.mesh.scale.y = scale;\n    }\n}\n\nexport default ViewContainer;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {View} from \"../../../engine/graphics/View\";\n\nclass LogoView extends View {\n    constructor (textureName, textureAtlasName) {\n        super();\n\n        this.textureName = textureName;\n        this.textureAtlasName = textureAtlasName;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas(this.textureAtlasName, true);\n        const logoSize = textureAtlas.getFrameSize(this.textureName);\n\n        this.geometry = new PlaneGeometry(logoSize.width, logoSize.height);\n\n        const textureFrame = new TextureFrame(textureAtlas, this.geometry, this.textureName);\n        const material = new MeshBasicMaterial({\n            map: textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n}\n\nexport default LogoView;\n","var itemSize = 2\nvar box = { min: [0, 0], max: [0, 0] }\n\nfunction bounds (positions) {\n  var count = positions.length / itemSize\n  box.min[0] = positions[0]\n  box.min[1] = positions[1]\n  box.max[0] = positions[0]\n  box.max[1] = positions[1]\n\n  for (var i = 0; i < count; i++) {\n    var x = positions[i * itemSize + 0]\n    var y = positions[i * itemSize + 1]\n    box.min[0] = Math.min(x, box.min[0])\n    box.min[1] = Math.min(y, box.min[1])\n    box.max[0] = Math.max(x, box.max[0])\n    box.max[1] = Math.max(y, box.max[1])\n  }\n}\n\nexport function computeBox (positions, output) {\n  bounds(positions)\n  output.min.set(box.min[0], box.min[1], 0)\n  output.max.set(box.max[0], box.max[1], 0)\n}\n\nexport function computeSphere (positions, output) {\n  bounds(positions)\n  var minX = box.min[0]\n  var minY = box.min[1]\n  var maxX = box.max[0]\n  var maxY = box.max[1]\n  var width = maxX - minX\n  var height = maxY - minY\n  var length = Math.sqrt(width * width + height * height)\n  output.center.set(minX + width / 2, minY + height / 2, 0)\n  output.radius = length / 2\n}\n","import * as wordWrap from 'word-wrapper';\nimport * as xtend from 'xtend';\nimport * as number from 'as-number';\n\nvar X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z']\nvar M_WIDTHS = ['m', 'w']\nvar CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\nvar TAB_ID = '\\t'.charCodeAt(0)\nvar SPACE_ID = ' '.charCodeAt(0)\nvar ALIGN_LEFT = 0,\n    ALIGN_CENTER = 1,\n    ALIGN_RIGHT = 2\n\nexport function createLayout(opt) {\n    return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n    this.glyphs = []\n    this._measure = this.computeMetrics.bind(this)\n    this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n    opt = xtend({\n        measure: this._measure\n    }, opt)\n    this._opt = opt\n    this._opt.tabSize = number(this._opt.tabSize, 4)\n\n    if (!opt.font)\n        throw new Error('must provide a valid bitmap font')\n\n    var glyphs = this.glyphs\n    var text = opt.text||''\n    var font = opt.font\n    this._setupSpaceGlyphs(font)\n\n    var lines = wordWrap.lines(text, opt)\n    var minWidth = opt.width || 0\n\n    //clear glyphs\n    glyphs.length = 0\n\n    //get max line width\n    var maxLineWidth = lines.reduce(function(prev, line) {\n        return Math.max(prev, line.width, minWidth)\n    }, 0)\n\n    //the pen position\n    var x = 0\n    var y = 0\n    var lineHeight = number(opt.lineHeight, font.common.lineHeight)\n    var baseline = font.common.base\n    var descender = lineHeight-baseline\n    var letterSpacing = opt.letterSpacing || 0\n    var height = lineHeight * lines.length - descender\n    var align = getAlignType(this._opt.align)\n\n    //draw text along baseline\n    y -= height\n\n    //the metrics for this text layout\n    this._width = maxLineWidth\n    this._height = height\n    this._descender = lineHeight - baseline\n    this._baseline = baseline\n    this._xHeight = getXHeight(font)\n    this._capHeight = getCapHeight(font)\n    this._lineHeight = lineHeight\n    this._ascender = lineHeight - descender - this._xHeight\n\n    //layout each glyph\n    var self = this\n    lines.forEach(function(line, lineIndex) {\n        var start = line.start\n        var end = line.end\n        var lineWidth = line.width\n        var lastGlyph\n\n        //for each glyph in that line...\n        for (var i=start; i<end; i++) {\n            var id = text.charCodeAt(i)\n            var glyph = self.getGlyph(font, id)\n            if (glyph) {\n                if (lastGlyph)\n                    x += getKerning(font, lastGlyph.id, glyph.id)\n\n                var tx = x\n                if (align === ALIGN_CENTER)\n                    tx += (maxLineWidth-lineWidth)/2\n                else if (align === ALIGN_RIGHT)\n                    tx += (maxLineWidth-lineWidth)\n\n                glyphs.push({\n                    position: [tx, y],\n                    data: glyph,\n                    index: i,\n                    line: lineIndex\n                })\n\n                //move pen forward\n                x += glyph.xadvance + letterSpacing\n                lastGlyph = glyph\n            }\n        }\n\n        //next line down\n        y += lineHeight\n        x = 0\n    })\n    this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n    //These are fallbacks, when the font doesn't include\n    //' ' or '\\t' glyphs\n    this._fallbackSpaceGlyph = null\n    this._fallbackTabGlyph = null\n\n    if (!font.chars || font.chars.length === 0)\n        return\n\n    //try to get space glyph\n    //then fall back to the 'm' or 'w' glyphs\n    //then fall back to the first glyph available\n    var space = getGlyphById(font, SPACE_ID)\n        || getMGlyph(font)\n        || font.chars[0]\n\n    //and create a fallback for tab\n    var tabWidth = this._opt.tabSize * space.xadvance\n    this._fallbackSpaceGlyph = space\n    this._fallbackTabGlyph = xtend(space, {\n        x: 0, y: 0, xadvance: tabWidth, id: TAB_ID,\n        xoffset: 0, yoffset: 0, width: 0, height: 0\n    })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n    var glyph = getGlyphById(font, id)\n    if (glyph)\n        return glyph\n    else if (id === TAB_ID)\n        return this._fallbackTabGlyph\n    else if (id === SPACE_ID)\n        return this._fallbackSpaceGlyph\n    return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n    var letterSpacing = this._opt.letterSpacing || 0\n    var font = this._opt.font\n    var curPen = 0\n    var curWidth = 0\n    var count = 0\n    var glyph\n    var lastGlyph\n\n    if (!font.chars || font.chars.length === 0) {\n        return {\n            start: start,\n            end: start,\n            width: 0\n        }\n    }\n\n    end = Math.min(text.length, end)\n    for (var i=start; i < end; i++) {\n        var id = text.charCodeAt(i)\n        var glyph = this.getGlyph(font, id)\n\n        if (glyph) {\n            //move pen forward\n            var xoff = glyph.xoffset\n            var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0\n            curPen += kern\n\n            var nextPen = curPen + glyph.xadvance + letterSpacing\n            var nextWidth = curPen + glyph.width\n\n            //we've hit our limit; we can't move onto the next glyph\n            if (nextWidth >= width || nextPen >= width)\n                break\n\n            //otherwise continue along our line\n            curPen = nextPen\n            curWidth = nextWidth\n            lastGlyph = glyph\n        }\n        count++\n    }\n\n    //make sure rightmost edge lines up with rendered glyphs\n    if (lastGlyph)\n        curWidth += lastGlyph.xoffset\n\n    return {\n        start: start,\n        end: start + count,\n        width: curWidth\n    }\n}\n\n//getters for the private vars\n;['width', 'height',\n    'descender', 'ascender',\n    'xHeight', 'baseline',\n    'capHeight',\n    'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n    Object.defineProperty(TextLayout.prototype, name, {\n        get: wrapper(name),\n        configurable: true\n    })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n    return (new Function([\n        'return function '+name+'() {',\n        '  return this._'+name,\n        '}'\n    ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n    if (!font.chars || font.chars.length === 0)\n        return null\n\n    var glyphIdx = findChar(font.chars, id)\n    if (glyphIdx >= 0)\n        return font.chars[glyphIdx]\n    return null\n}\n\nfunction getXHeight(font) {\n    for (var i=0; i<X_HEIGHTS.length; i++) {\n        var id = X_HEIGHTS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getMGlyph(font) {\n    for (var i=0; i<M_WIDTHS.length; i++) {\n        var id = M_WIDTHS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx]\n    }\n    return 0\n}\n\nfunction getCapHeight(font) {\n    for (var i=0; i<CAP_HEIGHTS.length; i++) {\n        var id = CAP_HEIGHTS[i].charCodeAt(0)\n        var idx = findChar(font.chars, id)\n        if (idx >= 0)\n            return font.chars[idx].height\n    }\n    return 0\n}\n\nfunction getKerning(font, left, right) {\n    if (!font.kernings || font.kernings.length === 0)\n        return 0\n\n    var table = font.kernings\n    for (var i=0; i<table.length; i++) {\n        var kern = table[i]\n        if (kern.first === left && kern.second === right)\n            return kern.amount\n    }\n    return 0\n}\n\nfunction getAlignType(align) {\n    if (align === 'center')\n        return ALIGN_CENTER\n    else if (align === 'right')\n        return ALIGN_RIGHT\n    return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n    start = start || 0\n    for (var i = start; i < array.length; i++) {\n        if (array[i].id === value) {\n            return i\n        }\n    }\n    return -1\n}\n","import { BufferGeometry, Box3, BufferAttribute, Sphere } from 'three';\nimport * as createIndices from 'quad-indices';\nimport * as vertices from './lib/vertices'\nimport * as utils from './lib/utils'\n\nimport {createLayout} from \"./lib/layout-bmfont-text\";\n\nexport class TextGeometry extends BufferGeometry {\n  constructor(opt) {\n    super();\n\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use these as default values for any subsequent\n    // calls to update()\n    this._opt = Object.assign({}, opt)\n\n    // also do an initial setup...\n    if (opt) this.update(opt)\n  }\n\n  update(opt) {\n    if (typeof opt === 'string') {\n      opt = { text: opt }\n    }\n\n    // use constructor defaults\n    opt = Object.assign({}, this._opt, opt)\n\n    if (!opt.font) {\n      throw new TypeError('must specify a { font } in options')\n    }\n\n    this.layout = createLayout(opt)\n\n    // get vec2 texcoords\n    var flipY = opt.flipY !== false\n\n    // the desired BMFont data\n    var font = opt.font\n\n    // determine texture size from font file\n    var texWidth = font.common.scaleW\n    var texHeight = font.common.scaleH\n\n    // get visible glyphs\n    var glyphs = this.layout.glyphs.filter(function (glyph) {\n      var bitmap = glyph.data\n      return bitmap.width * bitmap.height > 0\n    })\n\n    // provide visible glyphs for convenience\n    this.visibleGlyphs = glyphs\n\n    // get common vertex data\n    var positions = vertices.positions(glyphs)\n    var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY)\n    var indices = createIndices([], {\n      clockwise: true,\n      type: 'uint16',\n      count: glyphs.length\n    })\n\n    // update vertex data\n    this.setIndex(indices)\n    this.addAttribute('position', new BufferAttribute(positions, 2))\n    this.addAttribute('uv', new BufferAttribute(uvs, 2))\n\n    // update multipage data\n    if (!opt.multipage && 'page' in this.attributes) {\n      // disable multipage rendering\n      this.removeAttribute('page')\n    } else if (opt.multipage) {\n      // enable multipage rendering\n      var pages = vertices.pages(glyphs)\n      this.addAttribute('page', new BufferAttribute(pages, 1))\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere()\n    }\n\n    var positions = this.attributes.position.array\n    var itemSize = this.attributes.position.itemSize\n    if (!positions || !itemSize || positions.length < 2) {\n      this.boundingSphere.radius = 0\n      this.boundingSphere.center.set(0, 0, 0)\n      return\n    }\n    utils.computeSphere(positions, this.boundingSphere)\n    if (isNaN(this.boundingSphere.radius)) {\n      console.error('BufferGeometry.computeBoundingSphere(): ' +\n          'Computed radius is NaN. The ' +\n          '\"position\" attribute is likely to have NaN values.')\n    }\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3()\n    }\n\n    var bbox = this.boundingBox\n    var positions = this.attributes.position.array\n    var itemSize = this.attributes.position.itemSize\n    if (!positions || !itemSize || positions.length < 2) {\n      bbox.makeEmpty()\n      return\n    }\n    utils.computeBox(positions, bbox)\n  }\n}\n","export function pages (glyphs) {\n  var pages = new Float32Array(glyphs.length * 4 * 1)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var id = glyph.data.page || 0\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n  })\n  return pages\n}\n\nexport function uvs (glyphs, texWidth, texHeight, flipY) {\n  var uvs = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n    var bw = (bitmap.x + bitmap.width)\n    var bh = (bitmap.y + bitmap.height)\n\n    // top left position\n    var u0 = bitmap.x / texWidth\n    var v1 = bitmap.y / texHeight\n    var u1 = bw / texWidth\n    var v0 = bh / texHeight\n\n    if (flipY) {\n      v1 = (texHeight - bitmap.y) / texHeight\n      v0 = (texHeight - bh) / texHeight\n    }\n\n    // BL\n    uvs[i++] = u0\n    uvs[i++] = v1\n    // TL\n    uvs[i++] = u0\n    uvs[i++] = v0\n    // TR\n    uvs[i++] = u1\n    uvs[i++] = v0\n    // BR\n    uvs[i++] = u1\n    uvs[i++] = v1\n  })\n  return uvs\n}\n\nexport function positions (glyphs) {\n  var positions = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n\n    // bottom left position\n    var x = glyph.position[0] + bitmap.xoffset\n    var y = glyph.position[1] + bitmap.yoffset\n\n    // quad size\n    var w = bitmap.width\n    var h = bitmap.height\n\n    // BL\n    positions[i++] = x\n    positions[i++] = y\n    // TL\n    positions[i++] = x\n    positions[i++] = y + h\n    // TR\n    positions[i++] = x + w\n    positions[i++] = y + h\n    // BR\n    positions[i++] = x + w\n    positions[i++] = y\n  })\n  return positions\n}\n","import AssetManager from '../AssetManager';\nimport { Mesh, MeshBasicMaterial } from 'three';\nimport { TextGeometry } from '../three-bmfont-text/index';\nimport {View} from \"./View\";\n\nexport class TextView extends View {\n    constructor (text, options = {}) {\n        super();\n\n        const fontName = options.font || 'keep_calm';\n\n        this._text = text;\n        this.font = AssetManager.getFont(fontName);\n        this.width = options.width || 100;\n        this.align = options.aligh || 'left';\n        this._color = options.color || 0xff0000;\n    }\n\n    init () {\n        this.geometry = new TextGeometry({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping,\n            multipage: true\n        });\n\n        this.material = new MeshBasicMaterial({\n            map: this.font.textures[0],\n            transparent: true,\n            color: this._color\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.rotation.y = 180 * (Math.PI / 180);\n        this.mesh.rotation.z = 180 * (Math.PI / 180);\n\n        super.init();\n    }\n\n    get color () {\n        return this._color;\n    }\n\n    set color (color) {\n        this.material.color.setHex(color);\n    }\n\n    get text () {\n        return this._text;\n    }\n\n    get height () {\n        return this.geometry.layout.height;\n    }\n\n    _updateGeometry () {\n        this.geometry.update({\n            text: this._text,\n            width: this.width,\n            align: this.align,\n            font: this.font.mapping\n        });\n\n        this.geometry.uvsNeedUpdate = true;\n    }\n\n    set text (text) {\n        text = text.toString();\n\n        // Check if text is not the same\n        if (text !== this._text) {\n            this._text = text;\n            this._updateGeometry();\n        }\n    }\n}\n","import { Object3D } from 'three';\nimport LogoView from './LogoView';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass MenuItemsView extends View {\n    constructor (menu, options = {\n        selectedTextColor: 0x00ff00,\n        textColor: 0xffdddd\n    }) {\n        super();\n\n        this.menu = menu;\n        this.options = options;\n        this.viewMenuItemPairs = new Map();\n        this.selectedItem = null;\n        this.selectedView = null;\n        this.logoView = new LogoView('logo', 'ui');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const distance = 100;\n        const startY = 200;\n        let itemCount = 0;\n\n        this.selectedItem = this.menu.selectedItem;\n\n        for (const menuItem of this.menu.menuItems.values()) {\n            const textView = new TextView(menuItem.text, {\n                width: 300\n            });\n\n            textView.init();\n            textView.mesh.position.y = startY - (distance * itemCount);\n            textView.mesh.position.x += 100;\n\n            if (this.selectedItem === menuItem) {\n                textView.color = this.options.selectedTextColor;\n            } else {\n                textView.color = this.options.textColor;\n            }\n\n            this.viewMenuItemPairs.set(menuItem, textView);\n\n            this.mesh.add(textView.mesh);\n            itemCount += 1;\n        }\n\n        super.init();\n    }\n\n    update () {\n        // Selected item changed\n        if (this.selectedItem !== this.menu.selectedItem) {\n            const previousItem = this.selectedItem;\n\n            this.selectedItem = this.menu.selectedItem;\n\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n            const previousView = this.viewMenuItemPairs.get(previousItem);\n\n            currentView.text = this.selectedItem.text;\n\n            previousView.color = this.options.textColor;\n            currentView.color = this.options.selectedTextColor;\n        }\n\n        if (this.menu.selectedItem.editable && this.menu.selectedItem.isEditing) {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text + '-';\n        } else {\n            const currentView = this.viewMenuItemPairs.get(this.selectedItem);\n\n            currentView.text = this.selectedItem.text;\n        }\n    }\n}\n\nexport default MenuItemsView;\n\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport MenuInputItem from '../../../engine/menu-system/MenuInputItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst OptionsMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuInputItem('name', 'Name', 'Unknown Soldier', function (value) {\n            menuState.changeOption('name', value);\n        }));\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default OptionsMenu;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\n\nconst HelpMenu = {\n    create (menuState) {\n        const menu = new Menu();\n        const viewContainer = new ViewContainer();\n\n        menu.addMenuItem(new MenuItem('back', '- back', function () {\n            menuState.currentMenu = 'main';\n        }));\n\n        viewContainer.addDynamicView(new MenuItemsView(menu), { x: 300, y: 100, z: 0 });\n\n        const background = new BackgroundView('iwo_jima', 'ui');\n\n        background.lightness = 0.5;\n\n        viewContainer.backgroundView = background;\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default HelpMenu;\n","import {State} from '../State';\n\n/**\n * State of playing the game.\n *\n * @class\n * @extends State\n */\nclass PlayState extends State {\n\n    constructor (engine, match, map) {\n        super('play', engine);\n\n        this.collisionSystem = null;\n        this.bulletSystem = null;\n        this.player = null;\n        this.map = map;\n        this.match = match;\n\n        // FIXME get this out of here\n        this.showScores = false;\n        this.paused = false;\n        this.onPause = null;\n    }\n\n    init () {\n        super.init();\n    }\n\n    get soldiers () {\n        return this.match.soldiers;\n    }\n\n    pause () {\n        if (this.onPause) {\n            this.onPause();\n        }\n\n        this.paused = true;\n    }\n\n    resume () {\n        this.paused = false;\n    }\n\n    /**\n     * Update the state. Logic and views are updated.\n     *\n     * @param {float} delta - delta time.\n     *\n     * @returns {void}\n     */\n    update (delta) {\n        super.updateInputs(delta);\n\n        if (this.paused) {\n            return;\n        }\n\n        super.updateAudio(delta);\n\n        // Relies on previous turn\n        if (this.bulletSystem) {\n            this.bulletSystem.update(delta);\n        }\n\n        for (const soldier of this.soldiers) {\n            soldier.update(delta);\n\n            if (soldier.dead) {\n                const position = this.map.randomRespawnPosition();\n\n                soldier.respawn(position);\n            }\n        }\n\n        this.match.update(delta);\n\n        if (this.collisionSystem) {\n            this.collisionSystem.update(delta);\n        }\n    }\n}\n\nexport default PlayState;\n","import { OrthographicCamera } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\n// TODO fix duplicate code of subviews\nclass StatsRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new OrthographicCamera(0, this.width,\n            this.height, 0, 0, 1);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n    }\n\n}\n\nexport default StatsRenderView;\n","import { Mesh, MeshBasicMaterial, Object3D, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\nimport {TextView} from \"../../../engine/graphics/TextView\";\n\nclass AmmoView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('ui', false);\n\n        const material = new MeshBasicMaterial({\n            map: textureAtlas.texture,\n            transparent: true\n        });\n\n        const ammoSize = textureAtlas.getFrameSize('ammo');\n\n        this.geometry = new PlaneGeometry(ammoSize.width, ammoSize.height);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'ammo');\n\n        const ammoMesh = new Mesh(this.geometry, material);\n\n        ammoMesh.scale.set(0.5, 0.5, 1);\n\n        this.magazineText = new TextView('0', {\n            color: 0xffffcc\n        });\n\n        this.magazineText.init();\n\n        this.magazineText.mesh.scale.set(2, 2, 1);\n\n        this.magazineText.position = {\n            x: ammoSize.width + 10,\n            y: -this.magazineText.height\n        };\n\n        this.mesh.add(this.magazineText.mesh);\n\n        this.ammoText = new TextView('0', {\n            color: 0xffff99\n        });\n\n        this.ammoText.init();\n\n        this.ammoText.mesh.scale.set(1, 1, 1);\n\n        this.ammoText.position = {\n            x: ammoSize.width + 64,\n            y: -this.ammoText.height\n        };\n\n        ammoMesh.position.x = 20;\n        this.magazineText.position.x = 40;\n        this.ammoText.position.x = 120;\n\n        this.mesh.add(this.ammoText.mesh);\n        this.mesh.add(ammoMesh);\n\n        super.init();\n    }\n\n    set ammo (ammo) {\n        if (ammo === null) {\n            this.ammoText.text = '-';\n        }\n        this.ammoText.text = ammo;\n    }\n\n    set magazine (magazine) {\n        if (magazine === null) {\n            this.magazineText.text = '-';\n        }\n        this.magazineText.text = magazine;\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.ammo = weapon.ammo;\n            this.magazine = weapon.magazine;\n        } else {\n            this.ammo = null;\n            this.magazine = null;\n        }\n    }\n}\n\nexport default AmmoView;\n","import { Matrix4, Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from '../../../engine/graphics/View';\n\nclass HealthView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._healthScale = 1;\n    }\n\n    init () {\n        const material = new MeshBasicMaterial({\n            color: 0xcc0000\n        });\n\n        this.geometry = new PlaneGeometry(200, 20);\n\n        // Change originX to left side\n        this.geometry.applyMatrix(new Matrix4().makeTranslation(100, 0, 0));\n\n        this.mesh = new Mesh(this.geometry, material);\n\n        super.init();\n    }\n\n    set healthScale (value) {\n        if (value !== this._healthScale) {\n            this._healthScale = value;\n\n            if (value <= 0) {\n                this.mesh.visible = false;\n            } else {\n                if (!this.mesh.visible) {\n                    this.mesh.visible = true;\n                }\n\n                const oldX = this.mesh.position.x;\n\n                this.mesh.scale.set(value, 1, 1);\n                this.mesh.position.x = oldX;\n            }\n        }\n    }\n\n    update () {\n        this.healthScale = this.player.health / this.player.maxHealth;\n    }\n}\n\nexport default HealthView;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass WeaponView extends View {\n    constructor (state) {\n        super();\n\n        this.player = state.player;\n        this._weapon = null;\n    }\n\n    init () {\n        const textureAtlas = TextureManager.getAtlas('ui', true);\n\n        this.geometry = new PlaneGeometry(196, 64);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry);\n\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        super.init();\n    }\n\n    set weapon (weapon) {\n        if (this._weapon !== weapon) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            this._weapon = weapon;\n            this.textureFrame.frame = weapon;\n        } else if (weapon === null) {\n            if (this.mesh.visible) {\n                this.mesh.visible = false;\n            }\n        }\n    }\n\n    update (delta) {\n        if (this.player.currentWeapon) {\n            const weapon = this.player.currentWeapon;\n\n            this.weapon = weapon.name;\n        } else {\n            this.weapon = null;\n        }\n    }\n}\n\nexport default WeaponView;\n","import {Mesh, MeshLambertMaterial, Object3D, PlaneGeometry} from 'three';\nimport {TextView} from \"../../../engine/graphics/TextView\";\nimport {View} from \"../../../engine/graphics/View\";\n\nfunction converToText (teams) {\n    let resultText = '';\n\n    for (const [teamName, teamData] of teams.entries()) {\n        resultText += `${teamName} - k: ${teamData.kills} - d: ${teamData.deaths} \\n`;\n\n        const soldierText = [];\n\n        for (const soldier of teamData.soldiers) {\n            const text = `${soldier.name} - k: ${soldier.totalKills} - d: ${soldier.totalDeaths}`;\n\n            soldierText.push(text);\n        }\n\n        resultText += soldierText.join('\\n');\n        resultText += '\\n----------------------\\n';\n    }\n\n    return resultText;\n}\n\nclass ScoreView extends View {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.match = state.match;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const backgroundMaterial = new MeshLambertMaterial({\n            color: 0x00000,\n            transparent: true,\n            opacity: 0.5\n        });\n\n        const backgroundGeometry = new PlaneGeometry(600, 800);\n\n        this.mesh.add(new Mesh(backgroundGeometry, backgroundMaterial));\n\n        this.scoreTextView = new TextView(this._scoreText, {\n            color: 0xfeff80,\n            width: 600,\n            align: 'left'\n        });\n\n        this.scoreTextView.init();\n\n        this.mesh.visible = false;\n        this.mesh.add(this.scoreTextView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        if (this.state.showScores) {\n            if (!this.mesh.visible) {\n                this.mesh.visible = true;\n            }\n\n            // Scores have changed\n            this.scoreTextView.text = converToText(this.match.sortedScores());\n        } else if (this.mesh.visible) {\n            this.mesh.visible = false;\n        }\n    }\n}\n\nexport default ScoreView;\n","// https://github.com/kchapelier/migl-pool/blob/master/src/pool.js\nclass ObjectPool {\n\n    /**\n     * @constructor\n     * @param {function} factoryFunction Function that creates the object to pool.\n     * @param {number} firstAllocationNumber Initial amount of objects to allocate.\n     * @param {number} allocationNumber Number to increase the pool by when it is full.\n     * @param {number} allocationLimit Size limit of the pool.\n     */\n    constructor (factoryFunction, firstAllocationNumber, allocationNumber, allocationLimit) {\n        this.factoryFunction = factoryFunction;\n        this.totalInstances = 0;\n        this.allocationLimit = allocationLimit;\n        this.allocationNumber = allocationNumber;\n        this.availableInstances = [];\n        this.allocate(firstAllocationNumber);\n    }\n\n    get size () {\n        return this.totalInstances;\n    }\n\n    /**\n     * Instantiate a given number of elements and add them to the collection of available instances\n     * @param {number} number Number of elements to allocate\n     * @private\n     * @returns {Pool} Own instance for fluent interface\n     */\n    allocate (number) {\n        if (this.totalInstances + number < this.allocationLimit) {\n            this.totalInstances += number;\n\n            for (let i = 0; i < number; i++) {\n                this.availableInstances.push(this.factoryFunction());\n            }\n        } else {\n            throw new Error('ObjectPool allocation limit reached');\n        }\n\n        return this;\n    }\n\n    /**\n     * Retrieve an element for the collection of available instances, (re)initialize and return it.\n     * @returns {function} initializeFunction Function used to initialize a new instance.\n     */\n    get () {\n        // check if we still have enough available instances, instantiate new ones\n        if (this.availableInstances.length < 1) {\n            this.allocate(this.allocationNumber);\n        }\n\n        const object = this.availableInstances.pop();\n\n        return object;\n    }\n\n    /**\n     * Add a given element to the pool.\n     * @param {Object} object Element to add to the pool\n     * @returns {Pool} Own instance for fluent interface\n     */\n    free (object) {\n        if (this.availableInstances.indexOf(object) === -1) {\n            this.availableInstances.push(object);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clear all references.\n     * @returns {Pool} Own instance for fluent interface\n     */\n    clear () {\n        while (this.availableInstances.length) {\n            this.availableInstances.pop();\n        }\n\n        this.totalInstances = 0;\n\n        return this;\n    }\n}\n\nexport default ObjectPool;\n","import { Mesh, MeshBasicMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\nimport {TextureFrame} from \"../../../engine/graphics/TextureFrame\";\n\nclass BulletView extends View {\n    constructor (bullet) {\n        super();\n\n        this.bullet = bullet;\n    }\n\n    init () {\n        const bullet = this.bullet;\n\n        const textureAtlas = TextureManager.getAtlas('world', false);\n\n        this.geometry = new PlaneGeometry(2, 8);\n        this.textureFrame = new TextureFrame(textureAtlas, this.geometry, 'bullet1');\n        this.material = new MeshBasicMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n        this.mesh = new Mesh(this.geometry, this.material);\n        this.mesh.position.set(bullet.position.x, bullet.position.y, bullet.position.z);\n        this.mesh.rotation.z = bullet.angle + (90 * (Math.PI / 180));\n\n        super.init();\n    }\n\n    update (interpolationPercentage) {\n        const previous = this.bullet.previousPosition;\n        const current = this.bullet.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n        this.mesh.rotation.z = this.bullet.angle + (90 * (Math.PI / 180));\n\n        if (this.bullet.dead) {\n            this.mesh.visible = false;\n        } else {\n            this.mesh.visible = true;\n        }\n    }\n}\n\nexport default BulletView;\n","import { Object3D } from 'three';\nimport ObjectPool from '../../../engine/ObjectPool';\nimport {View} from '../../../engine/graphics/View';\nimport BulletView from './BulletView';\n\nclass BulletSystemView extends View {\n    constructor (bulletSystem, options = {}) {\n        super();\n        this.bulletSystem = bulletSystem;\n        this.bulletViewPool = new ObjectPool(() => {\n            return new BulletView(null);\n        }, this.bulletSystem.poolSize, 10, options.poolLimit || 200);\n\n        this.bulletViewPairs = new WeakMap();\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        super.init();\n    }\n\n    update (delta) {\n        // Keep viewPool in sync with bullet pool\n        if (this.bulletSystem.poolSize > this.bulletViewPool.size) {\n            this.bulletViewPool.allocate(this.bulletSystem.poolSize - this.bulletViewPool.size);\n        }\n\n        // Clear previously killed bullets\n        for (const deadBullet of this.bulletSystem.deadBullets) {\n            const bulletView = this.bulletViewPairs.get(deadBullet);\n\n            if (bulletView) {\n                bulletView.update(delta);\n            }\n\n            this.bulletSystem.deadBullets.delete(deadBullet);\n        }\n\n        for (const bullet of this.bulletSystem.activeBullets) {\n            let bulletView = this.bulletViewPairs.get(bullet);\n\n            if (!bulletView) {\n                bulletView = this.bulletViewPool.get();\n\n                bulletView.bullet = bullet;\n                bulletView.init();\n\n                this.mesh.add(bulletView.mesh);\n\n                this.bulletViewPairs.set(bullet, bulletView);\n            }\n\n            bulletView.update(delta);\n        }\n    }\n}\n\nexport default BulletSystemView;\n","import {TextureFrame} from './TextureFrame';\n\nexport class Animation {\n    constructor (textureAtlas, geometry, interval = 10, repeat = true, frames = [],\n            framePrefix = '', fixed = false) {\n        this.textureAtlas = textureAtlas;\n        this.geometry = geometry;\n\n        // Use the first frame as a size reference\n        this.textureFrame = new TextureFrame(this.textureAtlas, geometry, framePrefix + frames[0], fixed);\n\n        this.interval = interval;\n        this.frames = frames;\n        this.framePrefix = framePrefix;\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n\n        this._updateTexture();\n    }\n\n    get texture () {\n        return this.textureAtlas.texture;\n    }\n\n    _updateTexture () {\n        this.textureFrame.frame = this.framePrefix + this.frames[this.currentFrameIndex];\n    }\n\n    reset () {\n        this.currentFrameIndex = 0;\n        this.currentDisplayTime = 0;\n    }\n\n    update (delta) {\n        this.currentDisplayTime += 1;\n\n        if (this.currentDisplayTime > this.interval) {\n            this.currentDisplayTime = 0;\n\n            this.currentFrameIndex++;\n\n            if (this.currentFrameIndex >= this.frames.length) {\n                this.currentFrameIndex = 0;\n            }\n\n            this._updateTexture();\n        }\n    }\n\n    get currentFrame () {\n        return this.frames[this.currentFrameIndex];\n    }\n}\n","import { Matrix4, Geometry, Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {Animation} from \"../../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nconst WATER_FRAMES = [\n    'animation_water_0001',\n    'animation_water_0002',\n    'animation_water_0003',\n    'animation_water_0004',\n    'animation_water_0005',\n    'animation_water_0006',\n    'animation_water_0007',\n    'animation_water_0008',\n    'animation_water_0009'\n];\n\nfunction waterGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = waterGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass WaterBlocksView extends View {\n    constructor (map, textureAtlasName, waterFrames = WATER_FRAMES) {\n        super();\n\n        this.map = map;\n        this._textureAtlasName = textureAtlasName;\n        this._waterFrames = waterFrames;\n        this.blocks = map.blocks(['water']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        // Do not clone, since all water animates in sync\n        this.textureAtlas = TextureManager.getAtlas(this._textureAtlasName, true);\n\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.animation = new Animation(this.textureAtlas, this.geometry, 9, true, this._waterFrames, '', true);\n        this.animation.textureFrame.width = 100;\n        this.animation.textureFrame.height = 100;\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: false\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n\n    update () {\n        this.animation.update();\n    }\n}\n\nexport default WaterBlocksView;\n","import { DoubleSide, Matrix4, Mesh, MeshLambertMaterial, Geometry, PlaneGeometry } from 'three';\nimport {View} from \"../../../../engine/graphics/View\";\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\n\nfunction wallBlockGeometry (block, textureAtlas) {\n    const geometries = [];\n\n    if (block.walls.south) {\n        const south = textureAtlas.getBounds(block.walls.south);\n\n        const southGeometry = new PlaneGeometry(block.width, block.height);\n\n        southGeometry.faceVertexUvs[0][0] = [south[0], south[1], south[3]];\n        southGeometry.faceVertexUvs[0][1] = [south[1], south[2], south[3]];\n        southGeometry.rotateY(Math.PI / 2);\n        southGeometry.translate(block.width / 2, 0, 0);\n\n        geometries.push(southGeometry);\n    }\n\n    if (block.walls.north) {\n        const north = textureAtlas.getBounds(block.walls.north);\n\n        const northGeometry = new PlaneGeometry(block.width, block.height);\n\n        northGeometry.faceVertexUvs[0][0] = [north[0], north[1], north[3]];\n        northGeometry.faceVertexUvs[0][1] = [north[1], north[2], north[3]];\n        northGeometry.rotateY(-(Math.PI / 2));\n        northGeometry.translate(-(block.width / 2), 0, 0);\n\n        geometries.push(northGeometry);\n    }\n\n    if (block.walls.west) {\n        const west = textureAtlas.getBounds(block.walls.west);\n\n        const westGeometry = new PlaneGeometry(block.width, block.height);\n\n        westGeometry.faceVertexUvs[0][0] = [west[0], west[1], west[3]];\n        westGeometry.faceVertexUvs[0][1] = [west[1], west[2], west[3]];\n        westGeometry.rotateX((Math.PI / 2));\n        westGeometry.translate(0, -(block.height / 2), 0);\n\n        geometries.push(westGeometry);\n    }\n\n    if (block.walls.east) {\n        const east = textureAtlas.getBounds(block.walls.east);\n\n        const eastGeometry = new PlaneGeometry(block.width, block.height);\n\n        eastGeometry.faceVertexUvs[0][0] = [east[0], east[1], east[3]];\n        eastGeometry.faceVertexUvs[0][1] = [east[1], east[2], east[3]];\n        eastGeometry.rotateX(-(Math.PI / 2));\n        eastGeometry.rotateY((Math.PI / 2));\n        eastGeometry.translate(0, (block.height / 2), 0);\n\n        geometries.push(eastGeometry);\n    }\n\n    if (block.walls.top) {\n        const top = textureAtlas.getBounds(block.walls.top);\n\n        const topGeometry = new PlaneGeometry(block.width, block.height);\n\n        topGeometry.faceVertexUvs[0][0] = [top[0], top[1], top[3]];\n        topGeometry.faceVertexUvs[0][1] = [top[1], top[2], top[3]];\n        topGeometry.translate(0, 0, (block.height / 2));\n\n        geometries.push(topGeometry);\n    }\n\n    const blockGeometry = new Geometry();\n\n    for (const geometry of geometries) {\n        blockGeometry.merge(geometry);\n    }\n\n    return blockGeometry;\n}\n\nfunction createMergedBlockGeometry (blocks, textureAtlas) {\n    const mergedGeometry = new Geometry();\n\n    for (const block of blocks) {\n        const geometry = wallBlockGeometry(block, textureAtlas);\n\n        geometry.translate(block.position.x, block.position.y, block.position.z);\n\n        mergedGeometry.merge(geometry);\n    }\n\n    mergedGeometry.mergeVertices();\n\n    return mergedGeometry;\n}\n\nclass StaticBlocksView extends View {\n    constructor (map, textureAtlasName) {\n        super();\n\n        this.map = map;\n        this.textureAtlasName = textureAtlasName;\n        this.blocks = map.blocks(['wall']);\n\n        this.blockWidth = map.blockWidth;\n        this.blockHeight = map.blockHeight;\n        this.blockDepth = map.blockDepth;\n    }\n\n    init () {\n        this.textureAtlas = TextureManager.getAtlas(this.textureAtlasName, false);\n        this.geometry = createMergedBlockGeometry(this.blocks, this.textureAtlas);\n\n        this.material = new MeshLambertMaterial({\n            map: this.textureAtlas.texture,\n            transparent: true,\n            side: DoubleSide\n        });\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.applyMatrix(new Matrix4().makeTranslation(this.blockWidth / 2, this.blockHeight / 2, this.blockDepth / 2));\n\n        super.init();\n    }\n}\n\nexport default StaticBlocksView;\n","import { Mesh, MeshLambertMaterial, Object3D, PlaneGeometry, SpotLight } from 'three';\nimport { TextureFrame } from '../../../../engine/graphics/TextureFrame';\nimport {TextureManager} from \"../../../../engine/graphics/TextureManager\";\nimport {View} from \"../../../../engine/graphics/View\";\n\nclass LightView extends View {\n    constructor (light) {\n        super();\n        this.light = light;\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        const textureAtlas = TextureManager.getAtlas('world', true);\n        const lightGeometry = new PlaneGeometry(32, 32);\n\n        this.textureFrame = new TextureFrame(textureAtlas, lightGeometry, 'light1');\n\n        const lightMaterial = new MeshLambertMaterial({\n            map: this.textureFrame.texture,\n            transparent: true\n        });\n\n        const lightMesh = new Mesh(lightGeometry, lightMaterial);\n\n        lightMesh.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        lightMesh.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(lightMesh);\n\n        const spotLight = new SpotLight(0xff00000, 1);\n\n        const target = new Object3D();\n\n        target.position.set(this.light.x, this.light.y, -this.light.z);\n        target.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(target);\n\n        spotLight.target = target;\n        spotLight.angle = 45 * (Math.PI / 180);\n        spotLight.position.set(this.light.sourcePosition.x, this.light.sourcePosition.y, this.light.sourcePosition.z);\n        spotLight.rotateZ(this.light.angle + (90 * (Math.PI / 180)));\n\n        this.mesh.add(spotLight);\n\n        // Set the center of the blocks to bottom left (instead of center)\n        this.mesh.translateX(100 / 2);\n        this.mesh.translateY(100 / 2);\n        this.mesh.translateZ(100);\n\n        super.init();\n    }\n}\n\nexport default LightView;\n","import { Object3D } from 'three';\nimport WaterBlocksView from './world/WaterBlocksView';\nimport StaticBlocksView from './world/StaticBlocksView';\nimport LightView from './lights/LightView';\nimport {View} from '../../../engine/graphics/View';\n\nclass WorldMapView extends View {\n    constructor (map) {\n        super();\n\n        this.map = map;\n        this.wallsView = new StaticBlocksView(map, 'tiles');\n        this.waterView = new WaterBlocksView(map, 'tiles');\n    }\n\n    init () {\n        this.mesh = new Object3D();\n\n        for (const light of this.map.lights) {\n            const lightView = new LightView(light);\n\n            lightView.init();\n\n            this.mesh.add(lightView.mesh);\n        }\n\n        this.wallsView.init();\n        this.waterView.init();\n\n        this.mesh.add(this.wallsView.mesh);\n        this.mesh.add(this.waterView.mesh);\n\n        super.init();\n    }\n\n    update () {\n        this.waterView.update();\n    }\n}\n\nexport default WorldMapView;\n","import { Mesh, MeshLambertMaterial, PlaneGeometry } from 'three';\nimport {View} from \"../../../engine/graphics/View\";\nimport {Animation} from \"../../../engine/graphics/Animation\";\nimport {TextureManager} from \"../../../engine/graphics/TextureManager\";\n\nconst WALK_FRAMES = [\n    'walk_0001',\n    'walk_0002',\n    'walk_0003',\n    'walk_0004',\n    'walk_0005',\n    'walk_0006',\n    'walk_0007',\n    'walk_0008'\n];\n\nconst RUN_FRAMES = [\n    'run_0001',\n    'run_0002',\n    'run_0003',\n    'run_0004',\n    'run_0005',\n    'run_0006',\n    'run_0007',\n    'run_0008'\n];\n\nconst IDLE_FRAMES = ['idle_0001'];\n\nconst TEAM_COLORS = {\n    american: 0x006D02,\n    german: 0xcccc00\n};\n\nclass SoldierView extends View {\n    constructor (soldier) {\n        super();\n\n        this.soldier = soldier;\n        this._team = soldier ? soldier.team : 'american';\n    }\n\n    set team (team) {\n        if (team !== this._team) {\n            this._team = team;\n            this.material.color.setHex(TEAM_COLORS[team]);\n        }\n    }\n\n    init () {\n        const soldier = this.soldier;\n\n        this.geometry = new PlaneGeometry(soldier.height * 2, soldier.width * 2);\n\n        this.geometry.rotateZ(Math.PI);\n\n        const textureAtlas = TextureManager.getAtlas('soldier', true);\n\n        this.animations = {\n            walk: new Animation(textureAtlas, this.geometry, 9, true, WALK_FRAMES, 'soldier_weapon_'),\n            run: new Animation(textureAtlas, this.geometry, 5, true, RUN_FRAMES, 'soldier_weapon_'),\n            idle: new Animation(textureAtlas, this.geometry, 8, true, IDLE_FRAMES, 'soldier_weapon_')\n        };\n\n        this.currentAnimation = this.animations.idle;\n\n        this.material = new MeshLambertMaterial({\n            map: textureAtlas.texture,\n            transparent: true,\n            color: TEAM_COLORS[this._team]\n        });\n\n        this.material.color.offsetHSL(0.1, 0.8, 0.4);\n\n        this.mesh = new Mesh(this.geometry, this.material);\n\n        this.mesh.position.set(soldier.position.x, soldier.position.y, soldier.position.z);\n        this.mesh.rotation.z = soldier.angle;\n\n        super.init();\n    }\n\n    _updateAnimation () {\n        let animation = this.currentAnimation;\n\n        if (this.soldier.isMoving) {\n            if (this.soldier.isRunning) {\n                animation = this.animations.run;\n            } else {\n                animation = this.animations.walk;\n            }\n        } else {\n            animation = this.animations.idle;\n        }\n\n        // Animation changed\n        if (animation !== this.currentAnimation) {\n            this.currentAnimation = animation;\n            this.currentAnimation.reset();\n        }\n\n        this.currentAnimation.update();\n    }\n\n    update (interpolationPercentage) {\n        let zOffset = this.soldier.depth;\n\n        if (this.soldier.dead) {\n            this.mesh.visible = false;\n            zOffset = 0;\n        } else if (!this.mesh.visible) {\n            this.mesh.visible = true;\n        }\n\n        const previous = this.soldier.previousPosition;\n        const current = this.soldier.position;\n\n        this.mesh.position.x = previous.x + (current.x - previous.x) * interpolationPercentage;\n        this.mesh.position.y = previous.y + (current.y - previous.y) * interpolationPercentage;\n        this.mesh.position.z = previous.z + (current.z - previous.z) * interpolationPercentage;\n\n        this.mesh.position.z += zOffset;\n\n        this.mesh.rotation.z = this.soldier.angle + (90 * (Math.PI / 180));\n\n        this._updateAnimation();\n    }\n}\n\nexport default SoldierView;\n","import { Object3D } from 'three';\nimport ObjectPool from '../../../engine/ObjectPool';\nimport {View} from '../../../engine/graphics/View';\nimport SoldierView from './SoldierView';\n\nclass SoldierViewPool extends View {\n    constructor (soldiers, options = {}) {\n        super();\n\n        this.soldiers = soldiers;\n\n        this.viewPool = new ObjectPool(() => {\n            return new SoldierView(null);\n        }, this.soldiers.size, 10, options.poolLimit || 200);\n\n        this.viewPairs = new WeakMap();\n    }\n\n    init () {\n        this.mesh = new Object3D();\n        this._initialized = true;\n    }\n\n    update (interpolationPercentage) {\n        // Keep viewPool in sync with soldier pool\n        if (this.viewPool.poolSize > this.soldiers.length + 1) {\n            this.viewPool.allocate(this.soldiers.length + 1 - this.viewPool.size);\n        }\n\n        for (const soldier of this.soldiers) {\n            let view = this.viewPairs.get(soldier);\n\n            if (!view && !soldier.dead) {\n                view = this.viewPool.get();\n\n                view.soldier = soldier;\n                view.init();\n\n                // Team is set after, because it affects the material\n                view.team = soldier.team;\n\n                this.mesh.add(view.mesh);\n\n                this.viewPairs.set(soldier, view);\n            } else if (view) {\n                view.update(interpolationPercentage);\n\n                if (soldier.dead && this.viewPairs.has(soldier)) {\n                    this.viewPool.free(view);\n                    this.viewPairs.delete(soldier);\n                }\n            }\n        }\n    }\n}\n\nexport default SoldierViewPool;\n","import { AmbientLight, PerspectiveCamera, SpotLight } from 'three';\nimport RenderView from '../../../engine/graphics/RenderView';\n\nexport class PlayRenderView extends RenderView {\n    constructor (state) {\n        super();\n\n        this.state = state;\n        this.map = this.state.map;\n\n        this.cameraFollowView = null;\n        this.clearColor = 0x000000;\n    }\n\n    init () {\n        super.init();\n\n        this.camera = new PerspectiveCamera(75, this.map.width / this.map.height, 100, 1000);\n\n        this.camera.position.x = (this.map.width / 2) * this.map.blockWidth;\n        this.camera.position.y = (this.map.height / 2) * this.map.blockHeight;\n        this.camera.position.z = this.map.blockDepth * 6;\n\n        const ambientLight = new AmbientLight(0x030303);\n\n        this.scene.add(ambientLight);\n\n        this.cameraFollowLight = new SpotLight(0xfffffff, 2, 800);\n        this.cameraFollowLight.angle = 135 * (Math.PI / 180);\n        this.cameraFollowLight.exponent = 10;\n        this.cameraFollowLight.target = this.cameraFollowView.mesh;\n\n        this.scene.add(this.cameraFollowLight);\n\n        this._initialized = true;\n    }\n\n    update (delta) {\n        if (this.state.paused) {\n            return;\n        }\n\n        super.update(delta);\n\n        if (this.cameraFollowView) {\n            this.camera.position.setX(this.cameraFollowView.position.x);\n            this.camera.position.setY(this.cameraFollowView.position.y);\n\n            this.cameraFollowLight.position.setX(this.cameraFollowView.position.x);\n            this.cameraFollowLight.position.setY(this.cameraFollowView.position.y);\n            this.cameraFollowLight.position.setZ(this.cameraFollowView.position.z + 400);\n        }\n    }\n}\n","import ViewContainer from '../../engine/graphics/ViewContainer';\n\nimport StatsRenderView from './ui/StatsRenderView';\nimport AmmoView from './ui/AmmoView';\nimport HealthView from './ui/HealthView';\nimport WeaponView from './ui/WeaponView';\nimport ScoreView from './ui/ScoreView';\n\nimport BulletSystemView from './views/BulletSystemView';\nimport WorldMapView from './views/WorldMapView';\nimport SoldierView from './views/SoldierView';\nimport SoldierViewPool from './views/SoldierViewPool';\nimport {PlayRenderView} from './views/PlayRenderView';\n\nexport const ViewBuilder = {\n    uiView (playState) {\n        const uiView = new StatsRenderView(playState);\n        const uiViewContainer = new ViewContainer();\n\n        const scoreView = new ScoreView(playState);\n        const weaponView = new WeaponView(playState);\n        const ammoView = new AmmoView(playState);\n        const healthView = new HealthView(playState);\n\n        uiViewContainer.addDynamicView(scoreView, { x: 100, y: 100, z: 0 });\n        uiViewContainer.addDynamicView(weaponView, { x: 280, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(ammoView, { x: 10, y: 540, z: 0 });\n        uiViewContainer.addDynamicView(healthView, { x: 600, y: 540, z: 0 });\n        uiView.addViewContainer('main', uiViewContainer);\n        uiView.currentViewContainer = 'main';\n\n        return uiView;\n    },\n\n    playView (playState) {\n        const playView = new PlayRenderView(playState);\n\n        const playerView = new SoldierView(playState.player);\n        const soldierView = new SoldierViewPool(playState.soldiers);\n        const bulletSystemView = new BulletSystemView(playState.bulletSystem);\n        const worldMapView = new WorldMapView(playState.map);\n\n        const viewContainer = new ViewContainer();\n\n        viewContainer.addDynamicView(playerView);\n        viewContainer.addDynamicView(soldierView);\n        viewContainer.addDynamicView(bulletSystemView);\n        viewContainer.addDynamicView(worldMapView);\n\n        playView.addViewContainer('main', viewContainer);\n        playView.currentViewContainer = 'main';\n\n        // Camera follow\n        playView.cameraFollowView = playerView;\n\n        return playView;\n    }\n};\n","/**\n * Get a given statistic of a all soldiers per team.\n *\n * @param {string} stat Stat to get.\n *\n * @return {Map} Stats per team\n */\nfunction soldierStatsByTeam (stat) {\n    const resultsByTeam = new Map();\n\n    for (let [teamName, soldiers] of this.teams.entries()) {\n        for (const soldier of soldiers) {\n            const teamResult = resultsByTeam.get(teamName);\n\n            if (teamResult) {\n                resultsByTeam.set(teamName, teamResult + soldier[stat]);\n            } else {\n                resultsByTeam.set(teamName, soldier[stat]);\n            }\n        }\n    }\n}\n\nclass Match {\n    constructor (teams) {\n        this.matchTime = 0;\n        this.matchDuration = 300000;\n        this.soldiers = new Set();\n        this.teamNames = [];\n        this.teams = new Map();\n\n        for (const teamName of teams) {\n            this.teamNames.push(teamName);\n            this.teams.set(teamName, new Set());\n        }\n    }\n\n    teamWithLeastPlayers () {\n        let leastTeamName = null;\n        let minCount = Number.MAX_VALUE;\n\n        for (const teamName of this.teamNames) {\n            const count = this.teams.get(teamName).size;\n\n            if (count < minCount) {\n                leastTeamName = teamName;\n                minCount = count;\n            }\n        }\n\n        return leastTeamName;\n    }\n\n    addSoldier (soldier, teamName) {\n        if (!teamName) {\n            teamName = this.teamWithLeastPlayers();\n        }\n\n        // FIXME get this out of here?\n        soldier.team = teamName;\n\n        const team = this.teams.get(teamName);\n\n        if (team) {\n            team.add(soldier);\n            this.soldiers.add(soldier);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    sortedScores () {\n        const teams = new Map();\n\n        for (const soldier of new Set([...this.soldiers])) {\n            const team = teams.get(soldier.team);\n\n            if (team) {\n                team.kills += soldier.totalKills;\n                team.deaths += soldier.totalDeaths;\n                team.soldiers.push(soldier);\n            } else {\n                teams.set(soldier.team, {\n                    kills: soldier.totalKills,\n                    deaths: soldier.totalDeaths,\n                    soldiers: [soldier]\n                });\n            }\n        }\n\n        for (const team of teams.values()) {\n            team.soldiers.sort((a, b) => b.kills - a.kills);\n        }\n\n        return new Map([...teams.entries()].sort((teamA, teamB) => {\n            return teamB[1].kills - teamA[1].kills;\n        }));\n    }\n\n    removeSoldier (soldier) {\n        for (const team of this.teams.values()) {\n            if (team.has(soldier)) {\n                team.delete(soldier);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    killsByTeam () {\n        return soldierStatsByTeam('kills');\n    }\n\n    deathsByTeam () {\n        return soldierStatsByTeam('deaths');\n    }\n\n    start () {\n\n    }\n\n    end () {\n\n    }\n\n    update (delta) {\n        this.matchTime += delta;\n\n        if (this.matchTime >= this.matchDuration) {\n            this.end();\n        }\n    }\n}\n\nexport default Match;\n","import Gamepad from '../../../engine/input/Gamepad';\nimport Player from \"../../../core/entities/Player\";\nimport {Keys, LetterKeys} from \"../../../engine/input/Keys\";\nimport {StateInput} from \"../../../engine/state/StateInput\";\nimport {InputSourceInterface} from \"../../../engine/input/InputSourceInterface\";\nimport {KeyboardInputSource} from \"../../../engine/input/KeyboardInputSource\";\nimport {Keyboard} from \"../../../engine/input/Keyboard\";\nimport {GamepadInputSource} from \"../../../engine/input/GamepadInputSource\";\n\nexport class PlayerInput implements StateInput {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private player: Player;\n\n    constructor (inputSources: Map<string, InputSourceInterface>, player) {\n        const keyboardInputSource = inputSources.get('keyboard');\n        const gamepadInputSource = inputSources.get('gamepad') as GamepadInputSource|undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error('No keyboard input');\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n        this.player = player;\n    }\n\n    update (delta) {\n        if (this.keyboard.isDown(Keys.UP) || this.gamepad?.isStickDown( 'left', 'up')) {\n            this.player.moveUp();\n        } else if (this.keyboard.isDown(Keys.DOWN) || this.gamepad?.isStickDown( 'left', 'down')) {\n            this.player.moveDown();\n        } else {\n            this.player.stopMoving();\n        }\n\n        if (this.keyboard.isDown(Keys.RIGHT) || this.gamepad?.isStickDown( 'right', 'right')) {\n            this.player.turnRight();\n        } else if (this.keyboard.isDown(Keys.LEFT) || this.gamepad?.isStickDown( 'right', 'left')) {\n            this.player.turnLeft();\n        } else {\n            this.player.stopTurning();\n        }\n\n        if (!this.player.isRunning && (this.keyboard.isDown(Keys.CTRL) ||\n                this.gamepad?.isDown('rightTrigger'))) {\n            this.player.fireBullet();\n        }\n\n        if (this.keyboard.isDown(Keys.SHIFT) || this.gamepad?.isDown('actionSouth')) {\n            this.player.isRunning = true;\n        } else {\n            this.player.isRunning = false;\n        }\n\n        if (this.keyboard.keyboardDownOnce(LetterKeys.R) || this.gamepad?.gamepadButtonDownOnce('actionWest')) {\n            this.player.reload();\n        }\n\n        if (this.keyboard.keyboardDownOnce(LetterKeys.X) || this.gamepad?.gamepadButtonDownOnce('actionNorth')) {\n            this.player.scrollWeapons('down');\n        }\n\n        if (this.keyboard.keyboardDownOnce(LetterKeys.Z) || this.gamepad?.gamepadButtonDownOnce('actionEast')) {\n            this.player.scrollWeapons('up');\n        }\n    }\n}\n","import PlayState from \"../PlayState\";\nimport {Keys, LetterKeys} from \"../../../engine/input/Keys\";\nimport {StateInput} from \"../../../engine/state/StateInput\";\nimport {InputSourceInterface} from \"../../../engine/input/InputSourceInterface\";\nimport {KeyboardInputSource} from \"../../../engine/input/KeyboardInputSource\";\nimport {Keyboard} from \"../../../engine/input/Keyboard\";\nimport {GamepadInputSource} from \"../../../engine/input/GamepadInputSource\";\nimport Gamepad from \"../../../engine/input/Gamepad\";\n\nexport class UiInput implements StateInput  {\n    private keyboard: Keyboard;\n    private gamepad?: Gamepad;\n    private state: PlayState;\n\n    constructor (inputSources: Map<string, InputSourceInterface>, state) {\n        const keyboardInputSource = inputSources.get('keyboard');\n        const gamepadInputSource = inputSources.get('gamepad') as GamepadInputSource|undefined;\n\n        if (!(keyboardInputSource instanceof KeyboardInputSource)) {\n            throw new Error('No keyboard input');\n        }\n\n        this.keyboard = keyboardInputSource.keyboard;\n        this.gamepad = gamepadInputSource?.gamepad;\n\n        this.state = state;\n    }\n\n    update (delta) {\n        if (this.keyboard.isDown(LetterKeys.E) || this.gamepad?.gamepadButtonDownOnce('leftBumper')) {\n            this.state.showScores = true;\n        } else {\n            this.state.showScores = false;\n        }\n\n        if (this.keyboard.keyboardDownOnce(Keys.ESC)) {\n            if (this.state.paused) {\n                this.state.resume();\n            } else {\n                this.state.pause();\n            }\n        }\n    }\n}\n","class Vector {\n    constructor (x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Copy the values of another Vector into this one.\n     *\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaining.\n     */\n    copy (other) {\n        this.x = other.x;\n        this.y = other.y;\n\n        return this;\n    }\n\n    /**\n     * Create a new vector with the same coordinates as this on.\n     *\n     * @return {Vector} The new cloned vector\n     */\n    clone () {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     * Change this vector to be perpendicular to what it was before. (Effectively\n     * roatates it 90 degrees in a clockwise direction)\n     * @return {Vector} This for chaining.\n     */\n    perp () {\n        const x = this.x;\n\n        this.x = this.y;\n        this.y = -x;\n\n        return this;\n    }\n\n    /**\n     * Rotate this vector (counter-clockwise) by the specified angle (in radians).\n     * @param {number} angle The angle to rotate (in radians)\n     * @return {Vector} This for chaining.\n     */\n    rotate (angle) {\n        const x = this.x;\n        const y = this.y;\n\n        this.x = x * Math.cos(angle) - y * Math.sin(angle);\n        this.x = x * Math.sin(angle) + y * Math.cos(angle);\n\n        return this;\n    }\n\n    /**\n     * Reverse this vector.\n     *\n     * @return {Vector} This for chaining.\n     */\n    negate () {\n        this.x = -this.x;\n        this.y = -this.y;\n\n        return this;\n    }\n\n    /**\n     * Normalize this vector.  (make it have length of `1`)\n     *\n     * @return {Vector} This for chaining.\n     */\n    normalize () {\n        const d = this.len();\n\n        if (d > 0) {\n            this.x = this.x / d;\n            this.y = this.y / d;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add another vector to this one.\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaining.\n     */\n    add (other) {\n        this.x += other.x;\n        this.y += other.y;\n\n        return this;\n    }\n\n    /**\n     * Subtract another vector from this one.\n     * @param {Vector} other The other Vector.\n     * @return {Vector} This for chaiing.\n     */\n    sub (other) {\n        this.x -= other.x;\n        this.y -= other.y;\n\n        return this;\n    }\n\n    /**\n     * Scale this vector. An independant scaling factor can be provided\n     * for each axis, or a single scaling factor that will scale both `x` and `y`.\n     *\n     * @param {number} x The scaling factor in the x direction.\n     * @param {?number=} y The scaling factor in the y direction.  If this\n     *   is not specified, the x scaling factor will be used.\n     * @return {Vector} This for chaining.\n     */\n    scale (x, y) {\n        this.x *= x;\n        this.y *= y || x;\n\n        return this;\n    }\n\n    /**\n     * Project this vector on to another vector.\n     *\n     * @param {Vector} other The vector to project onto.\n     * @return {Vector} This for chaining.\n     */\n    project (other) {\n        const amt = this.dot(other) / other.len2();\n\n        this.x = amt * other.x;\n        this.y = amt * other.y;\n\n        return this;\n    }\n\n    /**\n     * Project this vector onto a vector of unit length. This is slightly more efficient\n     * than `project` when dealing with unit vectors.\n     *\n     * @param {Vector} other The unit vector to project onto.\n     * @return {Vector} This for chaining.\n     */\n    projectN (other) {\n        const amt = this.dot(other);\n\n        this.x = amt * other.x;\n        this.y = amt * other.y;\n\n        return this;\n    }\n\n    /**\n     * Reflect this vector on an arbitrary axis.\n     *\n     * @param {Vector} axis The vector representing the axis.\n     * @return {Vector} This for chaining.\n     */\n    reflect (axis) {\n        const x = this.x;\n        const y = this.y;\n\n        this.project(axis).scale(2);\n        this.x -= x;\n        this.y -= y;\n\n        return this;\n    }\n\n    /**\n     * Reflect this vector on an arbitrary axis (represented by a unit vector). This is\n     * slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\n     *\n     * @param {Vector} axis The unit vector representing the axis.\n     * @return {Vector} This for chaining.\n     */\n    reflectN (axis) {\n        const x = this.x;\n        const y = this.y;\n\n        this.projectN(axis).scale(2);\n        this.x -= x;\n        this.y -= y;\n\n        return this;\n    }\n\n    /**\n     * Get the dot product of this vector and another.\n     *\n     * @param {Vector}  other The vector to dot this one against.\n     * @return {number} The dot product.\n     */\n    dot (other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    /**\n     * Get the squared length of this vector.\n     * @return {number} The length^2 of this vector.\n     */\n    len2 () {\n        return this.dot(this);\n    }\n\n    /**\n     * Get the length of this vector.\n     * @return {number} The length of this vector.\n     */\n    len () {\n        return Math.sqrt(this.len2());\n    }\n}\n\nexport default Vector;\n","// Version 0.5.0 - Copyright 2012 - 2015 -  Jim Riecken <jimr@jimr.ca>\n//\n// Released under the MIT License - https://github.com/jriecken/sat-js\n//\n// A simple library for determining intersections of circles and\n// polygons using the Separating Axis Theorem.\n/** @preserve SAT.js - Version 0.5.0 - Copyright 2012 - 2015 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */\n\nimport Vector from './Vector';\nimport Box from './Box';\nimport Response from './Response';\n\n// ## Object Pools\n\n// A pool of `Vector` objects that are used in calculations to avoid\n// allocating memory.\n/**\n * @type {Array.<Vector>}\n */\nconst T_VECTORS = [];\n\nfor (let i = 0; i < 10; i++) {\n    T_VECTORS.push(new Vector());\n}\n\n// A pool of arrays of numbers used in calculations to avoid allocating\n// memory.\n/**\n * @type {Array.<Array.<number>>}\n */\nconst T_ARRAYS = [];\n\nfor (let i = 0; i < 5; i++) {\n    T_ARRAYS.push([]);\n}\n\n// Temporary response used for polygon hit detection.\n/**\n * @type {Response}\n */\nconst T_RESPONSE = new Response();\n\n// Unit square polygon used for polygon hit detection.\n/**\n * @type {Polygon}\n */\nconst UNIT_SQUARE = new Box(new Vector(), 1, 1).toPolygon();\n\n// ## Helper Functions\n\n/**\n * Flattens the specified array of vertices onto a unit vector axis,\n * resulting in a one dimensional range of the minimum and\n * maximum value on that axis.\n * @param {Array.<Vector>} vertices The vertices to flatten.\n * @param {Vector} normal The unit vector axis to flatten on.\n * @param {Array.<number>} result An array.  After calling this function,\n *   result[0] will be the minimum value,\n *   result[1] will be the maximum value.\n *\n * @returns {void}\n */\nconst _flattenVerticesOn = function (vertices, normal, result) {\n    let min = Number.MAX_VALUE;\n    let max = -Number.MAX_VALUE;\n    const len = vertices.length;\n\n    for (let i = 0; i < len; i++) {\n        // The magnitude of the projection of the point onto the normal\n        const dot = vertices[i].dot(normal);\n\n        if (dot < min) {\n            min = dot;\n        }\n        if (dot > max) {\n            max = dot;\n        }\n    }\n\n    result[0] = min; result[1] = max;\n};\n\n/**\n * Check whether two convex polygons are separated by the specified\n * axis (must be a unit vector).\n *\n * @param {Vector} aPos The position of the first polygon.\n * @param {Vector} bPos The position of the second polygon.\n * @param {Array.<Vector>} aPoints The vertices in the first polygon.\n * @param {Array.<Vector>} bPoints The vertices in the second polygon.\n * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n *   will be projected onto this axis.\n * @param {Response=} response A Response object (optional) which will be populated\n *   if the axis is not a separating axis.\n * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n *   and a response is passed in, information about how much overlap and\n *   the direction of the overlap will be populated.\n */\nconst _isSeparatingAxis = function (aPos, bPos, aPoints, bPoints, axis, response) {\n    const rangeA = T_ARRAYS.pop();\n    const rangeB = T_ARRAYS.pop();\n\n    // The magnitude of the offset between the two polygons\n    const offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n    const projectedOffset = offsetV.dot(axis);\n\n    // Project the polygons onto the axis.\n    _flattenVerticesOn(aPoints, axis, rangeA);\n    _flattenVerticesOn(bPoints, axis, rangeB);\n\n    // Move B's range to its position relative to A.\n    rangeB[0] += projectedOffset;\n    rangeB[1] += projectedOffset;\n\n    // Check if there is a gap. If there is, this is a separating axis and we can stop\n    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n        T_VECTORS.push(offsetV);\n        T_ARRAYS.push(rangeA);\n        T_ARRAYS.push(rangeB);\n\n        return true;\n    }\n\n    // This is not a separating axis. If we're calculating a response, calculate the overlap.\n    if (response) {\n        let overlap = 0;\n\n        // A starts further left than B\n        if (rangeA[0] < rangeB[0]) {\n            response.aInB = false;\n\n            // A ends before B does. We have to pull A out of B\n            if (rangeA[1] < rangeB[1]) {\n                overlap = rangeA[1] - rangeB[0];\n                response.bInA = false;\n            } else {\n                // B is fully inside A.  Pick the shortest way out.\n                const option1 = rangeA[1] - rangeB[0];\n                const option2 = rangeB[1] - rangeA[0];\n\n                overlap = option1 < option2 ? option1 : -option2;\n            }\n        } else {\n            // B starts further left than A\n            response.bInA = false;\n\n            // B ends before A ends. We have to push A out of B\n            if (rangeA[1] > rangeB[1]) {\n                overlap = rangeA[0] - rangeB[1];\n                response.aInB = false;\n\n                // A is fully inside B.  Pick the shortest way out.\n            } else {\n                const option1 = rangeA[1] - rangeB[0];\n                const option2 = rangeB[1] - rangeA[0];\n\n                overlap = option1 < option2 ? option1 : -option2;\n            }\n        }\n\n        // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n        const absOverlap = Math.abs(overlap);\n\n        if (absOverlap < response.overlap) {\n            response.overlap = absOverlap;\n            response.overlapN.copy(axis);\n            if (overlap < 0) {\n                response.overlapN.negate();\n            }\n        }\n    }\n\n    T_VECTORS.push(offsetV);\n    T_ARRAYS.push(rangeA);\n    T_ARRAYS.push(rangeB);\n\n    return false;\n};\n\n// Calculates which Voronoi region a point is on a line segment.\n// It is assumed that both the line and the point are relative to `(0,0)`\n//\n//            |       (0)      |\n//     (-1)  [S]--------------[E]  (1)\n//            |       (0)      |\n/**\n * @param {Vector} line The line segment.\n * @param {Vector} point The point.\n * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n *          RIGHT_VORONOI_REGION (1) if it is the right region.\n */\nconst _vornoiRegion = function (line, point) {\n    const len2 = line.len2();\n    const dp = point.dot(line);\n\n    // If the point is beyond the start of the line, it is in the\n    // left voronoi region.\n    if (dp < 0) {\n        return LEFT_VORONOI_REGION;\n    } else if (dp > len2) {\n        // If the point is beyond the end of the line, it is in the\n        // right voronoi region.\n\n        return RIGHT_VORONOI_REGION;\n    } else {\n        // Otherwise, it's in the middle one.\n        return MIDDLE_VORONOI_REGION;\n    }\n};\n\n// Constants for Voronoi regions\n/**\n * @const\n */\nconst LEFT_VORONOI_REGION = -1;\n\n/**\n * @const\n */\nconst MIDDLE_VORONOI_REGION = 0;\n\n/**\n * @const\n */\nconst RIGHT_VORONOI_REGION = 1;\n\n// ## Collision Tests\n\n// Check if a point is inside a circle.\n/**\n * @param {Vector} p The point to test.\n * @param {Circle} c The circle to test.\n * @return {boolean} true if the point is inside the circle, false if it is not.\n */\nconst _pointInCircle = function (p, c) {\n    const differenceV = T_VECTORS.pop().copy(p).sub(c.position);\n    const radiusSq = c.radius * c.radius;\n    const distanceSq = differenceV.len2();\n\n    T_VECTORS.push(differenceV);\n\n    // If the distance between is smaller than the radius then the point is inside the circle.\n    return distanceSq <= radiusSq;\n};\n\n// Check if a point is inside a convex polygon.\n/**\n * @param {Vector} p The point to test.\n * @param {Polygon} poly The polygon to test.\n * @return {boolean} true if the point is inside the polygon, false if it is not.\n */\nconst _pointInPolygon = function (p, poly) {\n    UNIT_SQUARE.position.copy(p);\n    T_RESPONSE.clear();\n\n    let result = _testPolygonPolygon(UNIT_SQUARE, poly, T_RESPONSE);\n\n    if (result) {\n        result = T_RESPONSE.aInB;\n    }\n\n    return result;\n};\n\n// Check if two circles collide.\n/**\n * @param {Circle} a The first circle.\n * @param {Circle} b The second circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   the circles intersect.\n * @return {boolean} true if the circles intersect, false if they don't.\n */\nconst _testCircleCircle = function (a, b, response) {\n    // Check if the distance between the centers of the two\n    // circles is greater than their combined radius.\n    const differenceV = T_VECTORS.pop().copy(b.position).sub(a.position);\n    const totalRadius = a.radius + b.radius;\n    const totalRadiusSq = totalRadius * totalRadius;\n    const distanceSq = differenceV.len2();\n\n    // If the distance is bigger than the combined radius, they don't intersect.\n    if (distanceSq > totalRadiusSq) {\n        T_VECTORS.push(differenceV);\n\n        return false;\n    }\n\n    // They intersect.  If we're calculating a response, calculate the overlap.\n    if (response) {\n        const dist = Math.sqrt(distanceSq);\n\n        response.a = a;\n        response.b = b;\n        response.overlap = totalRadius - dist;\n        response.overlapN.copy(differenceV.normalize());\n        response.overlapV.copy(differenceV).scale(response.overlap);\n        response.aInB = a.radius <= b.radius && dist <= b.radius - a.radius;\n        response.bInA = b.radius <= a.radius && dist <= a.radius - b.radius;\n    }\n\n    T_VECTORS.push(differenceV);\n\n    return true;\n};\n\n// Check if a polygon and a circle collide.\n/**\n * @param {Polygon} polygon The polygon.\n * @param {Circle} circle The circle.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testPolygonCircle = function (polygon, circle, response) {\n    // Get the position of the circle relative to the polygon.\n    const circlePos = T_VECTORS.pop().copy(circle.position).sub(polygon.position);\n    const radius = circle.radius;\n    const radius2 = radius * radius;\n    const points = polygon.computedVertices;\n    const len = points.length;\n    const edge = T_VECTORS.pop();\n    const point = T_VECTORS.pop();\n\n    // For each edge in the polygon:\n    for (let i = 0; i < len; i++) {\n        const next = i === len - 1 ? 0 : i + 1;\n        const prev = i === 0 ? len - 1 : i - 1;\n        let overlap = 0;\n        let overlapN = null;\n\n        // Get the edge.\n        edge.copy(polygon.edges[i]);\n\n        // Calculate the center of the circle relative to the starting point of the edge.\n        point.copy(circlePos).sub(points[i]);\n\n        // If the distance between the center of the circle and the point\n        // is bigger than the radius, the polygon is definitely not fully in\n        // the circle.\n        if (response && point.len2() > radius2) {\n            response.aInB = false;\n        }\n\n        // Calculate which Voronoi region the center of the circle is in.\n        let region = _vornoiRegion(edge, point);\n\n        // If it's the left region:\n        if (region === LEFT_VORONOI_REGION) {\n            // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n            edge.copy(polygon.edges[prev]);\n\n            // Calculate the center of the circle relative the starting point of the previous edge\n            const point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n\n            region = _vornoiRegion(edge, point2);\n\n            if (region === RIGHT_VORONOI_REGION) {\n                // It's in the region we want.  Check if the circle intersects the point.\n                const dist = point.len();\n\n                if (dist > radius) {\n                    // No intersection\n                    T_VECTORS.push(circlePos);\n                    T_VECTORS.push(edge);\n                    T_VECTORS.push(point);\n                    T_VECTORS.push(point2);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    response.bInA = false;\n                    overlapN = point.normalize();\n                    overlap = radius - dist;\n                }\n            }\n\n            T_VECTORS.push(point2);\n\n        // If it's the right region:\n        } else if (region === RIGHT_VORONOI_REGION) {\n            // We need to make sure we're in the left region on the next edge\n            edge.copy(polygon.edges[next]);\n\n            // Calculate the center of the circle relative to the starting point of the next edge.\n            point.copy(circlePos).sub(points[next]);\n            region = _vornoiRegion(edge, point);\n            if (region === LEFT_VORONOI_REGION) {\n                // It's in the region we want.  Check if the circle intersects the point.\n                const dist = point.len();\n\n                if (dist > radius) {\n                    // No intersection\n                    T_VECTORS.push(circlePos);\n                    T_VECTORS.push(edge);\n                    T_VECTORS.push(point);\n\n                    return false;\n                } else if (response) {\n                    // It intersects, calculate the overlap.\n                    response.bInA = false;\n                    overlapN = point.normalize();\n                    overlap = radius - dist;\n                }\n            }\n\n        // Otherwise, it's the middle region:\n        } else {\n            // Need to check if the circle is intersecting the edge,\n            // Change the edge into its \"edge normal\".\n            const normal = edge.perp().normalize();\n\n            // Find the perpendicular distance between the center of the\n            // circle and the edge.\n            const dist = point.dot(normal);\n            const distAbs = Math.abs(dist);\n\n            // If the circle is on the outside of the edge, there is no intersection.\n            if (dist > 0 && distAbs > radius) {\n                // No intersection\n                T_VECTORS.push(circlePos);\n                T_VECTORS.push(normal);\n                T_VECTORS.push(point);\n\n                return false;\n            } else if (response) {\n                // It intersects, calculate the overlap.\n                overlapN = normal;\n                overlap = radius - dist;\n\n                // If the center of the circle is on the outside of the edge, or part of the\n                // circle is on the outside, the circle is not fully inside the polygon.\n                if (dist >= 0 || overlap < 2 * radius) {\n                    response.bInA = false;\n                }\n            }\n        }\n\n        // If this is the smallest overlap we've seen, keep it.\n        // (overlapN may be null if the circle was in the wrong Voronoi region).\n        if (overlapN && response && Math.abs(overlap) < Math.abs(response.overlap)) {\n            response.overlap = overlap;\n            response.overlapN.copy(overlapN);\n        }\n    }\n\n    // Calculate the final overlap vector - based on the smallest overlap.\n    if (response) {\n        response.a = polygon;\n        response.b = circle;\n        response.overlapV.copy(response.overlapN).scale(response.overlap);\n    }\n\n    T_VECTORS.push(circlePos);\n    T_VECTORS.push(edge);\n    T_VECTORS.push(point);\n\n    return true;\n};\n\n// Check if a circle and a polygon collide.\n//\n// **NOTE:** This is slightly less efficient than polygonCircle as it just\n// runs polygonCircle and reverses everything at the end.\n/**\n * @param {Circle} circle The circle.\n * @param {Polygon} polygon The polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testCirclePolygon = function (circle, polygon, response) {\n    // Test the polygon against the circle.\n    const result = _testPolygonCircle(polygon, circle, response);\n\n    if (result && response) {\n        // Swap A and B in the response.\n        const a = response.a;\n        const aInB = response.aInB;\n\n        response.overlapN.negate();\n        response.overlapV.negate();\n        response.a = response.b;\n        response.b = a;\n        response.aInB = response.bInA;\n        response.bInA = aInB;\n    }\n\n    return result;\n};\n\n/**\n * Checks whether polygons collide.\n * @param {Polygon} a The first polygon.\n * @param {Polygon} b The second polygon.\n * @param {Response=} response Response object (optional) that will be populated if\n *   they interset.\n * @return {boolean} true if they intersect, false if they don't.\n */\nconst _testPolygonPolygon = function (a, b, response) {\n    const aPoints = a.computedVertices;\n    const aLen = aPoints.length;\n    const bPoints = b.computedVertices;\n    const bLen = bPoints.length;\n\n    // If any of the edge normals of A is a separating axis, no intersection.\n    for (let i = 0; i < aLen; i++) {\n        if (_isSeparatingAxis(a.position, b.position, aPoints, bPoints, a.normals[i], response)) {\n            return false;\n        }\n    }\n\n    // If any of the edge normals of B is a separating axis, no intersection.\n    for (let i = 0; i < bLen; i++) {\n        if (_isSeparatingAxis(a.position, b.position, aPoints, bPoints, b.normals[i], response)) {\n            return false;\n        }\n    }\n\n    // Since none of the edge normals of A or B are a separating axis, there is an intersection\n    // and we've already calculated the smallest overlap (in _isSeparatingAxis).  Calculate the\n    // final overlap vector.\n    if (response) {\n        response.a = a;\n        response.b = b;\n        response.overlapV.copy(response.overlapN).scale(response.overlap);\n    }\n\n    return true;\n};\n\nconst SAT = {\n    testPolygonPolygon: _testPolygonPolygon,\n    testCirclePolygon: _testCirclePolygon,\n    testPolygonCircle: _testPolygonCircle,\n    testCircleCircle: _testCircleCircle,\n    pointInPolygon: _pointInPolygon,\n    pointInCircle: _pointInCircle\n};\n\nexport default SAT;\n","import Vector from './Vector';\n\nfunction boxToPolygon (position, width, height) {\n    return new Polygon(new Vector(position.x, position.y), [\n        new Vector(), new Vector(width, 0),\n        new Vector(width, height), new Vector(0, height)\n    ]);\n}\n\n// ## Polygon\n//\n// Represents a *convex* polygon with any number of vertices (specified in counter-clockwise order)\n//\n// Note: Do _not_ manually change the `vertices`, `angle`, or `offset` properties. Use the\n// provided setters. Otherwise the calculated properties will not be updated correctly.\n//\n// `pos` can be changed directly.\n\n// Create a new polygon, passing in a position vector, and an array of vertices (represented\n// by vectors relative to the position vector). If no position is passed in, the position\n// of the polygon will be `(0,0)`.\n/**\n * @param {Vector=} pos A vector representing the origin of the polygon. (all other\n *   vertices are relative to this one)\n * @param {Array.<Vector>=} vertices An array of vectors representing the vertices in the polygon,\n *   in counter-clockwise order.\n * @constructor\n */\nclass Polygon {\n    constructor (position = new Vector(), vertices = []) {\n        this.position = position;\n        this.angle = 0;\n        this.offset = new Vector();\n\n        this.setVertices(vertices);\n    }\n\n    /**\n     * Set the vertices of the polygon.\n     * Note: The vertices are counter-clockwise *with respect to the coordinate system*.\n     * If you directly draw the vertices on a screen that has the origin at the top-left corner\n     * it will _appear_ visually that the vertices are being specified clockwise. This is just\n     * because of the inversion of the Y-axis when being displayed.\n     *\n     * @param {Array.<Vector>=} vertices An array of vectors representing the vertices in the polygon,\n     *   in counter-clockwise order.\n     * @return {Polygon} This for chaining.\n     */\n    setVertices (vertices) {\n        // Only re-allocate if this is a new polygon or the number of vertices has changed.\n        const lengthChanged = !this.vertices || this.vertices.length !== vertices.length;\n\n        if (lengthChanged) {\n            const computedVertices = this.computedVertices = [];\n            const edges = this.edges = [];\n            const normals = this.normals = [];\n\n            // Allocate the vector arrays for the calculated properties\n            for (let i = 0; i < vertices.length; i++) {\n                computedVertices.push(new Vector());\n                edges.push(new Vector());\n                normals.push(new Vector());\n            }\n        }\n        this.vertices = vertices;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current rotation angle of the polygon.\n     *\n     * @param {number} angle The current rotation angle (in radians).\n     * @return {Polygon} This for chaining.\n     */\n    setAngle (angle) {\n        this.angle = angle;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Set the current offset to apply to the `vertices` before applying the `angle` rotation.\n     *\n     * @param {Vector} offset The new offset vector.\n     * @return {Polygon} This for chaining.\n     */\n    setOffset (offset) {\n        this.offset = offset;\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n     * Note: This changes the **original** vertices (so any `angle` will be applied on top of this rotation).\n     * @param {number} angle The angle to rotate (in radians)\n     * @return {Polygon} This for chaining.\n     */\n    rotate (angle) {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].rotate(angle);\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Translates the vertices of this polygon by a specified amount relative to the origin of *its own coordinate\n     * system* (i.e. `pos`).\n     *\n     * This is most useful to change the \"center vertex\" of a polygon. If you just want to move the whole polygon, change\n     * the coordinates of `pos`.\n     *\n     * Note: This changes the **original** vertices (so any `offset` will be applied on top of this translation)\n     *\n     * @param {number} x The horizontal amount to translate.\n     * @param {number} y The vertical amount to translate.\n     * @return {Polygon} This for chaining.\n     */\n    translate (x, y) {\n        const vertices = this.vertices;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            vertices[i].x += x;\n            vertices[i].y += y;\n        }\n\n        this._compute();\n\n        return this;\n    }\n\n    /**\n     * Computes the calculated collision polygon. Applies the `angle` and `offset` to the original vertices then recalculates the\n     * edges and normals of the collision polygon.\n     * @return {Polygon} This for chaining.\n     */\n    _compute () {\n        // Calculated vertices - this is what is used for underlying collisions and takes into account\n        // the angle/offset set on the polygon.\n        const computedVertices = this.computedVertices;\n\n        // The edges here are the direction of the `n`th edge of the polygon, relative to\n        // the `n`th vertex. If you want to draw a given edge from the edge value, you must\n        // first translate to the position of the starting vertex.\n        const edges = this.edges;\n\n        // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n        // to the position of the `n`th vertex. If you want to draw an edge normal, you must first\n        // translate to the position of the starting vertex.\n        const normals = this.normals;\n\n        // Copy the original vertices array and apply the offset/angle\n        const vertices = this.vertices;\n        const offset = this.offset;\n        const angle = this.angle;\n        const len = vertices.length;\n\n        for (let i = 0; i < len; i++) {\n            const computedVertex = computedVertices[i].copy(vertices[i]);\n\n            computedVertex.x += offset.x;\n            computedVertex.y += offset.y;\n\n            if (angle !== 0) {\n                computedVertex.rotate(angle);\n            }\n        }\n\n        // Calculate the edges/normals\n        for (let i = 0; i < len; i++) {\n            const p1 = computedVertices[i];\n            const p2 = i < len - 1 ? computedVertices[i + 1] : computedVertices[0];\n            const e = edges[i].copy(p2).sub(p1);\n\n            normals[i].copy(e).perp().normalize();\n        }\n\n        return this;\n    }\n\n    /**\n     * Compute the axis-aligned bounding box. Any current state\n     * (translations/rotations) will be applied before constructing the AABB.\n     *\n     *  Note: Returns a _new_ `Polygon` each time you call this.\n     *\n     * @return {Polygon} The AABB\n     */\n    getAABB () {\n        const vertices = this.computedVertices;\n        const len = vertices.length;\n        let xMin = vertices[0].x;\n        let yMin = vertices[0].y;\n        let xMax = vertices[0].x;\n        let yMax = vertices[0].y;\n\n        for (let i = 1; i < len; i++) {\n            const vertex = vertices[i];\n\n            if (vertex.x < xMin) {\n                xMin = vertex.x;\n            } else if (vertex.x > xMax) {\n                xMax = vertex.x;\n            }\n\n            if (vertex.y < yMin) {\n                yMin = vertex.y;\n            } else if (vertex.y > yMax) {\n                yMax = vertex.y;\n            }\n        }\n\n        return boxToPolygon(this.position.clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin);\n    }\n}\n\nexport default Polygon;\n","import Polygon from '../../engine/collision/Polygon';\nimport Vector from '../../engine/collision/Vector';\n\nconst DEFAULT_SPEED = 0.2;\nconst DEFAULT_ROTATION_SPEED = 0.3;\n\nclass Entity {\n    constructor (x, y, z = 0, width = 0, height = 0, depth = 0) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.previousPosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.speed = DEFAULT_SPEED;\n        this.rotationSpeed = DEFAULT_ROTATION_SPEED;\n\n        this.reset();\n\n        this._body = new Polygon(new Vector(this.x, this.y), [\n            new Vector(-this.halfWidth, -this.halfHeight),\n            new Vector(-this.halfWidth, this.halfHeight),\n            new Vector(this.halfWidth, this.halfHeight),\n            new Vector(this.halfWidth, 0)\n        ]);\n\n        this.options = {\n            physics: false,\n            bullets: false,\n            audio: false,\n            isBullet: false,\n            isPlayer: false,\n            isCharacter: false\n        };\n    }\n\n    get rotatedBody () {\n        const body = this._body;\n\n        body.setAngle(this.angle);\n\n        return body;\n    }\n\n    onWallCollision () {\n        return null;\n    }\n\n    get body () {\n        this._body.position.x = this.position.x;\n        this._body.position.y = this.position.y;\n\n        return this._body;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n\n    get halfWidth () {\n        return this.width / 2;\n    }\n\n    get halfHeight () {\n        return this.height / 2;\n    }\n\n    kill () {\n        this.dead = true;\n    }\n\n    get point () {\n        return new Vector(this.x, this.y);\n    }\n\n    reset () {\n        this.velocity = {\n            x: 0,\n            y: 0,\n            z: 0\n        };\n\n        this.dead = false;\n        this.reverse = false;\n        this.angle = Math.PI * 2;\n        this.angularVelocity = 0;\n\n        // If entity is moving backwards\n        this.reverse = false;\n\n        this.collidable = true;\n        this.shouldUpdate = true;\n\n        this.isMoving = false;\n\n        // Actions can trigger things that should happen in the next update.\n        this.actions = {};\n    }\n\n    respawn (position) {\n        this.reset();\n\n        this.position = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n\n        this.previousPosition = {\n            x: position.x,\n            y: position.y,\n            z: position.z\n        };\n    }\n\n    moveUp () {\n        this.reverse = false;\n        this.isMoving = true;\n        this.velocity.x = -this.speed * Math.cos(this.angle);\n        this.velocity.y = -this.speed * Math.sin(this.angle);\n    }\n\n    moveDown () {\n        this.reverse = true;\n        this.isMoving = true;\n        this.velocity.x = this.speed * Math.cos(this.angle);\n        this.velocity.y = this.speed * Math.sin(this.angle);\n    }\n\n    turnLeft () {\n        this.angularVelocity = this.rotationSpeed * (Math.PI / 180);\n    }\n\n    turnRight () {\n        this.angularVelocity = -this.rotationSpeed * (Math.PI / 180);\n    }\n\n    stopMoving () {\n        this.isMoving = false;\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    }\n\n    stopTurning () {\n        this.angularVelocity = 0;\n    }\n\n    update (delta) {\n        if (!this.dead) {\n            this.angle += this.angularVelocity * delta;\n\n            if (this.angle < 0) {\n                this.angle = (Math.PI * 2) - this.angle;\n            }\n\n            this.previousPosition.x = this.position.x;\n            this.previousPosition.y = this.position.y;\n            this.previousPosition.z = this.position.z;\n\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n            this.position.z += this.velocity.z * delta;\n        }\n    }\n}\n\nexport default Entity;\n","import Entity from './Entity';\n\nconst GRAVITY = -0.2;\n\n/**\n * Entitiess that walk, run, jump, die and get hit by bullets.\n *\n * @class\n */\nclass Character extends Entity {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        this.maxHealth = 100;\n        this.walkingSpeed = 0.1;\n        this.runningSpeed = 0.2;\n\n        this.reset();\n\n        this.options.physics = true;\n        this.options.bullets = true;\n        this.options.isCharacter = true;\n    }\n\n    set isRunning (running) {\n        if (running) {\n            this._isRunning = true;\n            this.speed = this.runningSpeed;\n        } else {\n            this._isRunning = false;\n            this.speed = this.walkingSpeed;\n        }\n    }\n\n    get isRunning () {\n        return this._isRunning;\n    }\n\n    fall () {\n        this.velocity.z = GRAVITY;\n    }\n\n    hitByBullet (bullet) {\n        this.health -= bullet.damage;\n\n        if (this.health === 0) {\n            this.kill();\n        }\n    }\n\n    stopFalling () {\n        this.velocity.z = 0;\n    }\n\n    reset () {\n        super.reset();\n\n        this._isRunning = false;\n        this.speed = this.walkingSpeed;\n        this.health = 100;\n\n        this.health = this.maxHealth;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.position.z <= 0) {\n            this.kill();\n        }\n    }\n}\n\nexport default Character;\n","class Gun {\n    constructor (name, options = {}) {\n        this.name = name;\n        this.maxMagazine = options.maxMagazine || 10;\n        this.magazine = options.magazine || this.maxMagazine;\n\n        this.maxAmmo = options.maxAmmo || 10;\n        this.ammo = (options.ammo || this.maxAmmo) - this.magazine;\n\n        this.fireRate = options.fireRate || 150;\n        this.damage = options.damage || 10;\n        this.reloadTime = options.reloadTime || 500;\n\n        this._reloadingTime = 0;\n        this._firedTime = 0;\n        this._canFire = true;\n\n        this.isReloading = false;\n        this.fired = false;\n    }\n\n    fire () {\n        if (!this.isReloading && this._canFire && this.magazine > 0) {\n            this.fired = true;\n            this._canFire = false;\n            this.magazine -= 1;\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    reload () {\n        if (!this.isReloading) {\n            this.isReloading = true;\n\n            let refill = this.maxMagazine - this.magazine;\n\n            const newAmmo = this.ammo - refill;\n\n            if (newAmmo < 0) {\n                refill = this.ammo;\n\n                this.ammo = 0;\n            } else {\n                this.ammo -= refill;\n            }\n\n            this.magazine += refill;\n        }\n    }\n\n    get magazines () {\n        return Math.floor(this.ammo / this.maxMagazine);\n    }\n\n    update (delta) {\n        if (this._fired) {\n            this._fired = false;\n        }\n\n        if (this.isReloading) {\n            this._reloadingTime += delta;\n\n            if (this._reloadingTime > this.reloadTime) {\n                this._reloadingTime = 0;\n                this.isReloading = false;\n            }\n        } else if (!this._canFire) {\n            this._firedTime += delta;\n\n            if (this._firedTime > this.fireRate) {\n                this._firedTime = 0;\n                this._canFire = true;\n            }\n        }\n    }\n}\n\nexport default Gun;\n","import Gun from './Gun';\n\nexport default {\n    mp44: function () {\n        const mp44 = new Gun('mp44', {\n            maxAmmo: 120,\n            maxMagazine: 30\n        });\n\n        return mp44;\n    },\n    thompson: function () {\n        const thompson = new Gun('thompson', {\n            maxAmmo: 90,\n            maxMagazine: 25,\n            fireRate: 90\n        });\n\n        return thompson;\n    }\n};\n","import Character from './Character';\nimport WeaponFactory from '../weapons/WeaponFactory';\n\nclass Soldier extends Character {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth);\n\n        // FIXME make configurable\n        this.name = 'cpu';\n\n        this.weapons = [];\n        this.currentWeaponIndex = 0;\n        this.currentWeapon = null;\n\n        this.team = team;\n\n        // TODO remove this hardcoded stuff\n        this.addWeapon(WeaponFactory.mp44());\n        this.addWeapon(WeaponFactory.thompson());\n        this.currentWeapon = this.weapons[0];\n\n        this.maxHealth = 100;\n        this.walkingSpeed = 0.1;\n        this.runningSpeed = 0.2;\n\n        // Contains the character killed, and the count\n        this.kills = new Map();\n\n        // Contains the characters killed by, and the count\n        this.deaths = new Map();\n\n        this.reset();\n\n        this.options.isSoldier = true;\n    }\n\n    addWeapon (weapon) {\n        // TODO increase ammo if weapon is the same\n        this.weapons.push(weapon);\n    }\n\n    scrollWeapons (direction) {\n        if (direction === 'up') {\n            if (this.currentWeaponIndex === this.weapons.length - 1) {\n                this.currentWeaponIndex = 0;\n            } else {\n                this.currentWeaponIndex += 1;\n            }\n        } else if (direction === 'down') {\n            if (this.currentWeaponIndex === 0) {\n                this.currentWeaponIndex = this.weapons.length - 1;\n            } else {\n                this.currentWeaponIndex -= 1;\n            }\n        } else {\n            throw new Error('direction is not \"up\" or \"down\"');\n        }\n\n        this.currentWeapon = this.weapons[this.currentWeaponIndex];\n    }\n\n    reload () {\n        if (!this.dead && this.currentWeapon) {\n            this.currentWeapon.reload();\n        }\n    }\n\n    hitByBullet (bullet) {\n        super.hitByBullet(bullet);\n\n        // TODO prevent team killing / make configurable\n        if (this.health === 0) {\n            let deathCount = this.deaths.get(bullet.firedBy);\n\n            if (deathCount) {\n                deathCount += 1;\n            } else {\n                deathCount = 1;\n            }\n\n            this.deaths.set(bullet.firedBy, deathCount);\n\n            let killedByCount = bullet.firedBy.kills.get(this);\n\n            if (killedByCount) {\n                killedByCount += 1;\n            } else {\n                killedByCount = 1;\n            }\n\n            bullet.firedBy.kills.set(this, killedByCount);\n        }\n    }\n\n    kill () {\n        super.kill();\n        const suicides = this.deaths.get(this);\n\n        if (suicides) {\n            this.deaths.set(this, suicides + 1);\n        } else {\n            this.deaths.set(this, 1);\n        }\n    }\n\n    get totalKills () {\n        let total = 0;\n\n        for (const kill of this.kills.values()) {\n            total += kill;\n        }\n\n        return total;\n    }\n\n    get totalDeaths () {\n        let total = 0;\n\n        for (const death of this.deaths.values()) {\n            total += death;\n        }\n\n        return total;\n    }\n\n    fireBullet () {\n        if (!this.dead && this.currentWeapon) {\n            const fired = this.currentWeapon.fire();\n\n            if (fired) {\n                this.actions.firedBullet = true;\n            }\n        }\n    }\n\n    reset () {\n        super.reset();\n\n        this.actions.firedBullet = false;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        if (this.actions.firedBullet) {\n            this.actions.firedBullet = false;\n        }\n\n        if (this.currentWeapon) {\n            this.currentWeapon.update(delta);\n        }\n    }\n}\n\nexport default Soldier;\n","import Soldier from './Soldier';\n\nclass Player extends Soldier {\n    constructor (x, y, z, width, height, depth, team) {\n        super(x, y, z, width, height, depth, team);\n\n        // FIXME make configurable\n        this.name = 'player';\n\n        this.options.isPlayer = true;\n        this.options.audio = true;\n    }\n\n    update (delta) {\n        super.update(delta);\n    }\n}\n\nexport default Player;\n","import { StateAudio } from '../StateAudio';\nimport PlayState from \"./PlayState\";\n\nclass PlayAudio extends StateAudio {\n    private entities: any;\n    private player: any;\n\n    constructor (state: PlayState, effectsSpriteName: string, backgroundSpriteName: string) {\n        super(effectsSpriteName, backgroundSpriteName);\n\n        this.entities = state.soldiers;\n        this.player = state.player;\n    }\n\n    update (delta) {\n        for (const entity of this.entities) {\n            if (entity === this.player && entity.actions.firedBullet) {\n                this.effects.play(entity.currentWeapon.name);\n            }\n        }\n    }\n}\n\nexport default PlayAudio;\n","import Polygon from '../../engine/collision/Polygon';\nimport Vector from '../../engine/collision/Vector';\n\nclass Block {\n    constructor (position, width, height, depth, options = {}) {\n        this._position = position;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.options = options;\n        this.type = options.type || 'wall';\n        this._walls = options.walls || {};\n        this.collidable = options.collidable || true;\n\n        this._computeBodies();\n    }\n\n    set walls (walls) {\n        this._walls = walls;\n        this._computeBodies();\n    }\n\n    get walls () {\n        return this._walls;\n    }\n\n    set position (position) {\n        this._position = position;\n        this._computeBodies();\n    }\n\n    get position () {\n        return this._position;\n    }\n\n    _computeBodies () {\n         // If fully closed block (nothing should be inside it)\n        if (this._walls.top && this._walls.west && this._walls.east && this._walls.south && this._walls.north) {\n            this.bodies = [\n                new Polygon(new Vector(this.x, this.y), [\n                    new Vector(0, 0),\n                    new Vector(this.width, 0),\n                    new Vector(this.width, this.height),\n                    new Vector(0, this.height)\n                ])\n            ];\n        }\n\n        const bodies = [];\n\n        if (this._walls.west) {\n            bodies.push(new Polygon(new Vector(this.x, this.y), [\n                new Vector(0, 0),\n                new Vector(this.width, 0),\n                new Vector(this.width, 2),\n                new Vector(0, 2)\n            ]));\n        }\n\n        if (this._walls.east) {\n            bodies.push(new Polygon(new Vector(this.x, this.y + this.height), [\n                new Vector(0, 0),\n                new Vector(this.width, 0),\n                new Vector(this.width, -2),\n                new Vector(0, -2)\n            ]));\n        }\n\n        if (this._walls.south) {\n            bodies.push(new Polygon(new Vector(this.x + this.width, this.y), [\n                new Vector(0, 0),\n                new Vector(0, this.height),\n                new Vector(-2, this.height),\n                new Vector(-2, 0)\n            ]));\n        }\n\n        if (this._walls.north) {\n            bodies.push(new Polygon(new Vector(this.x, this.y), [\n                new Vector(0, 0),\n                new Vector(0, this.height),\n                new Vector(2, this.height),\n                new Vector(2, 0)\n            ]));\n        }\n\n        this.bodies = bodies;\n    }\n\n    get x () {\n        return this._position.x;\n    }\n\n    get y () {\n        return this._position.y;\n    }\n\n    get z () {\n        return this._position.z;\n    }\n}\n\nexport default Block;\n","class Light {\n    constructor (x, y, z, color) {\n        this.position = {\n            x: x,\n            y: y,\n            z: z\n        };\n        this.color = color;\n        this.sourcePosition = {\n            x: x,\n            y: y,\n            z: z\n        };\n\n        this.angle = Math.PI * 2;\n    }\n\n    get x () {\n        return this.position.x;\n    }\n\n    get y () {\n        return this.position.y;\n    }\n\n    get z () {\n        return this.position.z;\n    }\n}\n\nexport default Light;\n","class WorldMap {\n    constructor (layers, width, height, depth, blockWidth, blockHeight, blockDepth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.blockWidth = blockWidth;\n        this.blockHeight = blockHeight;\n        this.blockDepth = blockDepth;\n\n        this.lights = [];\n        this.layers = layers;\n        this.name = null;\n    }\n\n    blocks (types) {\n        return this.blocksBetweenIndexes({\n            x: 0, y: 0, z: 0\n        }, {\n            x: this.width - 1,\n            y: this.height - 1,\n            z: this.depth - 1\n        }, types);\n    }\n\n    get totalWidth () {\n        return this.width * this.blockWidth;\n    }\n\n    get totalHeight () {\n        return this.height * this.blockHeight;\n    }\n\n    get totalDepth () {\n        return this.depth * this.blockDepth;\n    }\n\n    indexToPosition (index) {\n        return {\n            x: index.x * this.blockWidth,\n            y: index.y * this.blockHeight,\n            z: index.z * this.blockDepth\n        };\n    }\n\n    positionToIndex (position) {\n        const x = position.x;\n        const y = position.y;\n        const z = position.z;\n\n        const index = {};\n\n        index.x = Math.floor(x / this.blockWidth);\n        index.y = Math.floor(y / this.blockHeight);\n        index.z = Math.floor(z / this.blockDepth);\n\n        return index;\n    }\n\n    randomRespawnPosition () {\n        const respawn = this.respawns[Math.round(Math.random() * (this.respawns.length - 1))];\n        const position = this.indexToPosition(respawn.position);\n\n        return position;\n    }\n\n    blockAtIndex (index) {\n        if (index.z < 0 || index.z >= this.depth) {\n            return null;\n        }\n\n        if (index.y < 0 || index.y >= this.height) {\n            return null;\n        }\n\n        if (index.x < 0 || index.x >= this.width) {\n            return null;\n        }\n\n        return this.layers[index.z][index.y][index.x];\n    }\n\n    blockAtPosition (position) {\n        const indexes = this.positionToIndex(position);\n\n        return this.blockAtIndex(indexes);\n    }\n\n    blocksAtPositions (positions, types = []) {\n        const blocks = [];\n\n        for (const position of positions) {\n            const block = this.blockAtPosition(position);\n\n            if (block && types.indexOf(block.type) !== -1) {\n                blocks.push(block);\n            }\n        }\n\n        return blocks;\n    }\n\n    /**\n     * Get all blocks within two index positions in the map.\n     *\n     * @param {object} start - contains x, y, z index positions for start.\n     * @param {object} end - contains x, y, z index positions for end.\n     *\n     * @returns {array} All blocks within the box\n     */\n    blocksBetweenIndexes (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types = []) {\n        const blocks = [];\n\n        const min = start;\n        const max = end;\n\n        for (let z = 0; z < this.layers.length; z++) {\n            if ((z >= min.z && z <= max.z)) {\n                for (let y = 0; y < this.layers[z].length; y++) {\n                    if ((y >= min.y && y <= max.y)) {\n                        for (let x = 0; x < this.layers[z][y].length; x++) {\n                            if ((x >= min.x && x <= max.x)) {\n                                const index = { x, y, z };\n\n                                const block = this.blockAtIndex(index);\n\n                                if (block && types.indexOf(block.type) !== -1) {\n                                    blocks.push(block);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return blocks;\n    }\n\n    blocksBetweenPositions (start = { x: 0, y: 0, z: 0 }, end = { x: 0, y: 0, z: 0 }, types) {\n        return this.blocksBetweenIndexes(this.positionToIndex(start), this.positionToIndex(end), types);\n    }\n\n    toString () {\n        let finalString = '';\n\n        for (const layer of this.layers) {\n            const layerStrings = [];\n\n            for (const layerRow of layer) {\n                const blocks = layerRow.map(v => v ? v.id : 0);\n\n                layerStrings.push(blocks.join(', '));\n            }\n\n            finalString = finalString.concat(layerStrings.join('\\n'));\n            finalString = finalString.concat('\\n---------------\\n');\n        }\n\n        return finalString;\n    }\n}\n\nexport default WorldMap;\n","import Block from './Block';\nimport Light from './Light';\nimport WorldMap from './WorldMap';\n\nconst _parseBlock = function (rawBlock, blockWidth, blockHeight, blockDepth) {\n    const position = {\n        x: rawBlock.position.x * blockWidth,\n        y: rawBlock.position.y * blockHeight,\n        z: rawBlock.position.z * blockDepth\n    };\n\n    const blockOptions = {\n        walls: rawBlock.walls,\n        type: rawBlock.type,\n        collidable: rawBlock.collidable\n    };\n\n    const block = new Block(position, blockWidth, blockHeight, blockDepth, blockOptions);\n\n    block.collidable = rawBlock.collidable || false;\n\n    return block;\n};\n\nconst _createEmptyLayers = function (mapWidth, mapHeight, mapDepth) {\n    const layers = [];\n\n    for (let z = 0; z < mapDepth; z++) {\n        const layer = [];\n\n        for (let y = 0; y < mapHeight; y++) {\n            const row = [];\n\n            for (let x = 0; x < mapDepth; x++) {\n                row.push(null);\n            }\n\n            layer.push(row);\n        }\n\n        layers.push(layer);\n    }\n\n    return layers;\n};\n\nconst parseLight = function (rawLight, blockWidth, blockHeight, blockDepth) {\n    const rawPosition = rawLight.position;\n    const sourcePosition = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    const position = {\n        x: rawPosition.x * blockWidth,\n        y: rawPosition.y * blockHeight,\n        z: rawPosition.z * blockDepth\n    };\n\n    let angle = Math.PI * 2;\n\n    if (rawLight.align === 'west') {\n        sourcePosition.x -= blockWidth / 2;\n    } else if (rawLight.align === 'east') {\n        sourcePosition.x += blockWidth / 2;\n        angle = 180 * (Math.PI / 180);\n    } else if (rawLight.align === 'north') {\n        sourcePosition.y += blockHeight / 2;\n        angle = 90 * (Math.PI / 180);\n    } else if (rawLight.align === 'south') {\n        sourcePosition.y -= blockHeight / 2;\n        angle = 270 * (Math.PI / 180);\n    }\n\n    const light = new Light(position.x, position.y, position.z, rawLight.color);\n\n    light.angle = angle;\n    light.sourcePosition = sourcePosition;\n\n    return light;\n};\n\nconst _parseRawMap = function (rawMap) {\n    // TODO validate map\n    const rawBlocks = rawMap.blocks;\n\n    const blockWidth = rawMap.blockWidth;\n    const blockHeight = rawMap.blockHeight;\n    const blockDepth = rawMap.blockDepth;\n\n    const mapWidth = rawMap.width;\n    const mapHeight = rawMap.height;\n    const mapDepth = rawMap.depth;\n\n    const layers = _createEmptyLayers(mapWidth, mapHeight, mapDepth);\n\n    for (const rawBlock of rawBlocks) {\n        const block = _parseBlock(rawBlock, blockWidth, blockHeight, blockDepth);\n\n        const position = rawBlock.position;\n\n        // TODO check for out of bounds\n        layers[position.z][position.y][position.x] = block;\n    }\n\n    const worldMap = new WorldMap(layers, mapWidth, mapHeight, mapDepth, blockWidth, blockHeight, blockDepth);\n\n    if (rawMap.lights) {\n        for (const rawLight of rawMap.lights) {\n            worldMap.lights.push(parseLight(rawLight, blockWidth, blockHeight, blockDepth));\n        }\n    }\n\n    worldMap.name = rawMap.name;\n    worldMap.respawns = [];\n\n    for (const respawn of rawMap.respawns) {\n        worldMap.respawns.push(respawn);\n    }\n\n    return worldMap;\n};\n\nconst MapParser = {\n    parse: function (rawMap) {\n        return _parseRawMap(rawMap);\n    }\n};\n\nexport default MapParser;\n","import Vector from './Vector';\nimport Polygon from './Polygon';\n\n// ## Box\n//\n// Represents an axis-aligned box, with a width and height.\n// Create a new box, with the specified position, width, and height. If no position\n// is given, the position will be `(0,0)`. If no width or height are given, they will\n// be set to `0`.\n/**\n * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n * @param {?number=} w The width of the box.\n * @param {?number=} h The height of the box.\n * @constructor\n */\nclass Box {\n    constructor (position = new Vector(), width = 0, height = 0) {\n        this.position = position;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * Returns a polygon whose edges are the same as this box.\n     * @return {Polygon} A new Polygon that represents this box.\n     */\n    toPolygon () {\n        const pos = this.position;\n        const w = this.width;\n        const h = this.height;\n\n        return new Polygon(new Vector(pos.x, pos.y), [\n            new Vector(), new Vector(w, 0),\n            new Vector(w, h), new Vector(0, h)\n        ]);\n    }\n}\n\nexport default Box;\n","import Vector from './Vector';\n\n// ## Response\n//\n// An object representing the result of an intersection. Contains:\n//  - The two objects participating in the intersection\n//  - The vector representing the minimum change necessary to extract the first object\n//    from the second one (as well as a unit vector in that direction and the magnitude\n//    of the overlap)\n//  - Whether the first object is entirely inside the second, and vice versa.\n/**\n * @constructor\n */\nclass Response {\n    constructor () {\n        this.a = null;\n        this.b = null;\n        this.overlapN = new Vector();\n        this.overlapV = new Vector();\n\n        this.clear();\n    }\n\n    /**\n     * Set some values of the response back to their defaults.  Call this between tests if\n     * you are going to reuse a single Response object for multiple intersection tests (recommented\n     * as it will avoid allcating extra memory)\n     *\n     * @return {Response} This for chaining\n     */\n    clear () {\n        this.aInB = true;\n        this.bInA = true;\n        this.overlap = Number.MAX_VALUE;\n\n        return this;\n    }\n}\n\nexport default Response;\n","import SAT from '../engine/collision/SAT';\nimport Response from '../engine/collision/Response';\n\nconst rayPositions = function (entity, rayDistance) {\n    let x = entity.position.x;\n    let y = entity.position.y;\n    const angle = entity.angle;\n\n    const reverse = entity.reverse ? -1 : 1;\n\n    const start = {};\n    const end = {};\n\n    if (Math.abs(entity.velocity.x) > 0) {\n        x -= rayDistance * Math.cos(angle) * reverse;\n    } else {\n        x -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.x < 0) {\n        start.x = x;\n        end.x = entity.position.x;\n    } else {\n        start.x = entity.position.x;\n        end.x = x;\n    }\n\n    if (Math.abs(entity.velocity.y) > 0) {\n        y -= rayDistance * Math.sin(angle) * reverse;\n    } else {\n        y -= rayDistance * reverse;\n    }\n\n    if (entity.velocity.y < 0) {\n        start.y = y;\n        end.y = entity.position.y;\n    } else {\n        start.y = entity.position.y;\n        end.y = y;\n    }\n\n    start.z = entity.position.z;\n    end.z = entity.position.z;\n\n    return { min: start, max: end };\n};\n\nconst CollisionUtils = {\n    wallCollision (map, entity, onCollision) {\n        const rayDistance = (map.blockWidth + map.blockHeight) / 2;\n        const ray = rayPositions(entity, rayDistance);\n\n        if (!(ray.min.x === ray.max.x && ray.min.y === ray.max.y)) {\n            const blocks = map.blocksBetweenPositions(ray.min, ray.max, ['wall']);\n\n            for (const block of blocks) {\n                if (block.collidable) {\n                    const polygons = block.bodies;\n\n                    for (const polygon of polygons) {\n                        const response = new Response();\n\n                        if (SAT.testPolygonPolygon(entity.body, polygon, response)) {\n                            onCollision(response);\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    floorCollision (map, entity, delta, onCollision = () => {}) {\n        const nextEntityPosition = {\n            x: entity.position.x + (entity.velocity.x * delta),\n            y: entity.position.y + (entity.velocity.y * delta),\n            z: entity.position.z + (entity.velocity.z * delta)\n        };\n\n        const floorBlockIndex = map.positionToIndex(entity.position);\n\n        floorBlockIndex.z -= 1;\n\n        const block = map.blockAtIndex(floorBlockIndex);\n\n        if (block && block.collidable && block.walls.top) {\n            if (nextEntityPosition.z <= block.position.z + block.depth) {\n                onCollision(block);\n            }\n        } else {\n            entity.fall();\n        }\n    }\n};\n\nexport default CollisionUtils;\n","import CollisionUtils from './CollisionUtils';\n\nclass CollisionSystem {\n    constructor (state) {\n        this.state = state;\n        this.entities = state.soldiers;\n        this.map = this.state.map;\n    }\n\n    update (delta) {\n        for (const entity of this.entities) {\n            CollisionUtils.wallCollision(this.map, entity, (response) => {\n                entity.position.x -= response.overlapV.x;\n                entity.position.y -= response.overlapV.y;\n            });\n\n            CollisionUtils.floorCollision(this.map, entity, delta, (block) => {\n                if (block.type === 'water') {\n                    entity.fall();\n                    entity.kill();\n                } else {\n                    entity.position.z = block.position.z + block.depth;\n                    entity.stopFalling();\n                }\n            });\n        }\n    }\n}\n\nexport default CollisionSystem;\n","import Entity from './Entity';\n\nclass Bullet extends Entity {\n    constructor (x, y, z, width, height) {\n        super(x, y, z, width, height);\n\n        this.dead = true;\n        this.firedBy = null;\n        this.firedByWeapon = null;\n        this.speed = 0.3;\n\n        this.maxDistance = 500;\n        this.traveledDistance = 0;\n\n        this.options.isBullet = true;\n    }\n\n    get damage () {\n        if (this.firedByWeapon) {\n            return this.firedByWeapon.damage;\n        }\n\n        return 0;\n    }\n\n    update (delta) {\n        super.update(delta);\n\n        this.traveledDistance += this.speed * delta;\n\n        if (this.traveledDistance > this.maxDistance) {\n            this.dead = true;\n            this.traveledDistance = 0;\n        } else {\n            this.moveUp();\n        }\n    }\n}\n\nexport default Bullet;\n","import ObjectPool from '../engine/ObjectPool';\nimport Bullet from './entities/Bullet';\nimport SAT from '../engine/collision/SAT';\nimport CollisionUtils from './CollisionUtils';\n\nclass BulletSystem {\n    constructor (state, options = {}) {\n        this.state = state;\n        this.soldiers = this.state.soldiers;\n        this.map = this.state.map;\n\n        this.bulletPool = new ObjectPool(() => {\n            const bullet = new Bullet(0, 0, 0, 4, 10);\n\n            return bullet;\n        }, 10, 10, options.poolLimit || 200);\n\n        // Bullets that died last turn\n        this.deadBullets = new Set();\n\n        // Bullets currently flying around\n        this.activeBullets = new Set();\n    }\n\n    get poolSize () {\n        return this.bulletPool.size;\n    }\n\n    _fireBullet (firedBy) {\n        let bullet = this.bulletPool.get();\n\n        // If the pool is full, reused the first item.\n        if (!bullet) {\n            const firstBullet = this.activeBullets.values().next().value;\n\n            this.bulletPool.free(firstBullet);\n            bullet = this.bulletPool.get();\n        }\n\n        bullet.firedBy = firedBy;\n        bullet.firedByWeapon = firedBy.currentWeapon;\n        bullet.respawn(firedBy.position);\n        bullet.angle = firedBy.angle;\n        this.activeBullets.add(bullet);\n\n        return bullet;\n    }\n\n    killBullet (bullet) {\n        bullet.kill();\n        this.bulletPool.free(bullet());\n    }\n\n    update (delta) {\n        for (const soldier of this.soldiers) {\n            if (soldier.actions.firedBullet) {\n                this._fireBullet(soldier);\n            }\n        }\n\n        for (const bullet of this.activeBullets) {\n            bullet.update(delta);\n            CollisionUtils.wallCollision(this.map, bullet, () => bullet.kill());\n\n            if (bullet.dead) {\n                this.deadBullets.add(bullet);\n                this.activeBullets.delete(bullet);\n                this.bulletPool.free(bullet);\n            } else {\n                for (const soldier of this.soldiers) {\n                    if (!soldier.dead) {\n                        // Can't kill itself\n                        if (bullet.firedBy !== soldier) {\n                            // Check if on same level\n                            if ((bullet.position.z >= soldier.position.z) && (bullet.position.z < soldier.position.z + 50)) {\n                                if (SAT.pointInPolygon(bullet.point, soldier.body)) {\n                                    soldier.hitByBullet(bullet);\n                                    bullet.kill();\n                                    this.bulletPool.free(bullet);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default BulletSystem;\n","import Soldier from \"../../../core/entities/Soldier\";\nimport {StateInput} from \"../../../engine/state/StateInput\";\n\nexport class ComputerInput implements StateInput {\n    private readonly soldier: Soldier;\n\n    constructor (soldier: Soldier) {\n        this.soldier = soldier;\n    }\n\n    update () {\n        if (Math.random() < 0.05) {\n            this.soldier.fireBullet();\n        }\n\n        if (Math.random() > 0.8) {\n            this.soldier.moveUp();\n        }\n\n        if (Math.random() > 0.7) {\n            if (Math.random() > 0.5) {\n                this.soldier.turnRight();\n            } else {\n                this.soldier.turnLeft();\n            }\n        } else {\n            this.soldier.stopTurning();\n        }\n\n        if (this.soldier.currentWeapon) {\n            if (this.soldier.currentWeapon.magazine === 0) {\n                this.soldier.reload();\n            }\n        }\n    }\n}\n","import PlayState from './PlayState';\nimport {ViewBuilder} from './ViewBuilder';\n\nimport Match from '../../core/Match';\nimport {PlayerInput} from './input/PlayerInput';\nimport {UiInput} from './input/UiInput';\nimport Player from '../../core/entities/Player';\n\nimport PlayAudio from './PlayAudio';\nimport MapParser from '../../core/maps/MapParser';\nimport AssetManager from '../../engine/AssetManager';\n\nimport Soldier from '../../core/entities/Soldier';\nimport CollisionSystem from '../../core/CollisionSystem';\nimport BulletSystem from '../../core/BulletSystem';\nimport {ComputerInput} from \"./input/ComputerInput\";\n\n/**\n * Create CPU soldiers.\n *\n * @param {PlayState} state The play state.\n * @param {number} count Number of CPU soldiers.\n *\n * @return {void}\n */\nfunction createCpuSoldiers (state, count) {\n    for (let i = 0; i < count; i++) {\n        const { x, y, z } = state.map.randomRespawnPosition();\n        const soldier = new Soldier(x, y, z, 48, 48, 1, 'american');\n\n        state.addInput(new ComputerInput(soldier));\n\n        state.match.addSoldier(soldier);\n    }\n}\n\n/**\n * Create the player entity and add it to the play state.\n *\n * @param {PlayState} state The play state.\n * @param {string} name Name of the player.\n *\n * @param dead\n * @return {void}\n */\nfunction createPlayer (engine, state, name, dead = false) {\n    const { x, y, z } = state.map.randomRespawnPosition();\n    const player = new Player(x, y, z, 48, 48, 1, 'american');\n    const playerInput = new PlayerInput(engine.inputSources, player);\n\n    state.player = player;\n    state.addInput(playerInput);\n\n    player.kill();\n\n    state.match.addSoldier(player, 'american');\n}\n\n/**\n * Create the views for the play state.\n *\n * @param {PlayState} state The play state.\n *\n * @return {void}\n */\nfunction createViews (state) {\n    state.addView(ViewBuilder.playView(state));\n    state.addView(ViewBuilder.uiView(state));\n}\n\nconst PlayBuilder = {\n    createSingleplayer (engine, options) {\n        const map = MapParser.parse(AssetManager.getMap(options.map));\n        const match = new Match(options.teams);\n        const state = new PlayState(engine, match, map);\n\n        createCpuSoldiers(state, options.cpuCount);\n        createPlayer(engine, state, options.playerName);\n\n        state.bulletSystem = new BulletSystem(state, {\n            poolLimit: options.poolLimit || 200\n        });\n\n        state.collisionSystem = new CollisionSystem(state);\n        state.audio = new PlayAudio(state, 'guns', 'background');\n\n        const uiInput = new UiInput(engine.inputSources, state);\n\n        state.addInput(uiInput);\n\n        createViews(state);\n\n        return state;\n    },\n};\n\nexport default PlayBuilder;\n","import Menu from '../../../engine/menu-system/Menu';\nimport MenuItem from '../../../engine/menu-system/MenuItem';\nimport BackgroundView from '../../../engine/graphics/BackgroundView';\nimport ViewContainer from '../../../engine/graphics/ViewContainer';\nimport MenuItemsView from '../views/MenuItemsView';\nimport PlayBuilder from '../../play/PlayBuilder';\nimport LogoView from '../../menu/views/LogoView';\n\n/**\n * Create the play state.\n *\n * @param {Engine} engine Game engine.\n * @param {object} options Options for the play state.\n *\n * @return {PlayState} The created play state.\n */\nfunction createPlayState (engine, options) {\n    const playOptions = Object.assign({\n        poolLimit: 200,\n        teams: ['american', 'german'],\n        cpuCount: 7,\n        map: 'level2',\n        playerName: 'unknown soldier'\n    }, options);\n\n    const playState = PlayBuilder.createSingleplayer(engine, playOptions);\n\n    engine.addState('play', playState);\n\n    return playState;\n}\n\n/**\n * Create the menu and add items to it.\n *\n * @param {Engine} engine Game engine instance.\n * @param {MenuState} menuState The menu state.\n *\n * @return {Menu} Menu instance.\n */\nfunction createMenu (engine, menuState) {\n    const menu = new Menu();\n\n    menu.addMenuItem(new MenuItem('createGame', 'Singleplayer', (menuItem) => {\n        let playState = engine.states.get('play');\n\n        if (!playState) {\n            playState = createPlayState(engine, {\n                playerName: menuState.options.get('name')\n            });\n\n            menuItem.text = 'Create game';\n        } else {\n            menuState.gamePlaying = true;\n\n            playState.player.name = menuState.options.get('name');\n            menuItem.text = 'Continue game';\n        }\n\n        playState.resume();\n\n        engine.changeState('play');\n    }));\n\n    menu.addMenuItem(new MenuItem('options', 'Options', () => {\n        menuState.currentMenu = 'options';\n    }));\n\n    menu.addMenuItem(new MenuItem('help', 'Help', () => {\n        menuState.currentMenu = 'help';\n    }));\n\n    return menu;\n}\n\n/**\n * Create the ViewContainer for this menu.\n *\n * @param {Menu} menu Menu instance.\n *\n * @return {ViewContainer} ViewContainer for the menu.\n */\nfunction createView (menu) {\n    const viewContainer = new ViewContainer();\n    const background = new BackgroundView('normandy', 'ui');\n\n    viewContainer.addDynamicView(new MenuItemsView(menu), { x: 500, y: 200, z: 0 });\n    viewContainer.addStaticView(new LogoView('logo', 'ui'), { x: 300, y: 300, z: 0 });\n\n    background.lightness = 0.5;\n    viewContainer.backgroundView = background;\n\n    return viewContainer;\n}\n\nconst MainMenu = {\n    create (engine, menuState) {\n        const menu = createMenu(engine, menuState);\n        const viewContainer = createView(menu);\n\n        return {\n            viewContainer: viewContainer,\n            menu: menu\n        };\n    }\n};\n\nexport default MainMenu;\n","import {State} from '../State';\n\nclass MenuState extends State {\n\n    constructor (engine) {\n        super('menu', engine);\n\n        this.menus = new Map();\n        this._currentMenu = null;\n        this.currentMenuName = null;\n        this.options = new Map([\n            ['name', 'Unknown Soldier'],\n        ]);\n        this.gamePlaying = false;\n        this.currentOptionsEdit = null;\n    }\n\n\n    addMenu (name, menu) {\n        this.menus.set(name, menu);\n    }\n\n    changeOption (optionName, value) {\n        this.options.set(optionName, value);\n    }\n\n    set currentMenu (name) {\n        this._currentMenu = this.menus.get(name);\n\n        if (!this._currentMenu) {\n            throw new Error('Menu \"' + name + '\" does not exist');\n        }\n\n        this.currentMenuName = name;\n    }\n\n    get currentMenu () {\n        return this._currentMenu;\n    }\n\n    init () {\n        super.init();\n    }\n\n    update (delta) {\n        super.updateInputs(delta);\n\n        super.updateAudio(delta);\n    }\n}\n\nexport default MenuState;\n","import MenuInput from './MenuInput';\nimport MenuRenderView from './views/MenuRenderView';\nimport MenuAudio from './MenuAudio';\nimport OptionsMenu from './menus/OptionsMenu';\nimport HelpMenu from './menus/HelpMenu';\nimport MainMenu from './menus/MainMenu';\nimport MenuState from './MenuState';\n\nconst MenuBuilder = {\n    create (engine) {\n        const state = new MenuState(engine);\n        const menuInput = new MenuInput(engine.inputSources, state);\n\n        state.addInput(menuInput);\n\n        const subMenus = new Map([\n            ['main', MainMenu.create(engine, state)],\n            ['options', OptionsMenu.create(state)],\n            ['help', HelpMenu.create(state)]\n        ]);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            state.addMenu(subMenuName, subMenu.menu);\n        }\n\n        const menuView = new MenuRenderView(state);\n\n        for (let [subMenuName, subMenu] of subMenus.entries()) {\n            menuView.addViewContainer(subMenuName, subMenu.viewContainer);\n        }\n\n        menuView.currentViewContainer = 'main';\n        state.addView(menuView);\n\n        state.currentMenu = 'main';\n        state.audio = new MenuAudio(state, 'menu_effects', 'background');\n\n        return state;\n    }\n};\n\nexport default MenuBuilder;\n","import { WebGLRenderer } from 'three';\n\nconst DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 600;\n\nexport class ThreeRenderer {\n    private _views?: Set<any>;\n    protected webglRenderer: WebGLRenderer;\n\n    /**\n     * @constructor\n     *\n     * @param {string} [divName=gameDiv] - id of the html div to render into.\n     */\n    constructor (divName = 'root') {\n        this.webglRenderer = new WebGLRenderer();\n\n        this.webglRenderer.setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n        this.webglRenderer.setClearColor(0x000000);\n        this.webglRenderer.setPixelRatio(window.devicePixelRatio);\n        this.webglRenderer.autoClear = false;\n\n        (document.getElementById(divName) as HTMLDivElement).appendChild(this.webglRenderer.domElement);\n    }\n\n    set views (views) {\n        this._views = views;\n\n        if (!views) {\n            return;\n        }\n\n        let index = 0;\n\n        for (const view of views) {\n            if (index === 0) {\n                // Get the clear color from the first view\n                this.webglRenderer.setClearColor(view.clearColor);\n            }\n\n            view.size = {\n                width: DEFAULT_WIDTH,\n                height: DEFAULT_HEIGHT\n            };\n\n            index += 1;\n        }\n    }\n\n    get views () {\n        return this._views;\n    }\n\n    preRender(): void\n    {\n\n    }\n\n    postRender(): void\n    {\n    }\n\n    /**\n     * Render the view\n     *\n     * @returns {void}\n     */\n    render (interpolationPercentage) {\n        this.webglRenderer.clear();\n\n        let index = 0;\n\n        const views = this._views;\n\n        if (!views) {\n            return;\n        }\n\n        for (const view of views) {\n            if (index > 0) {\n                this.webglRenderer.clearDepth();\n            }\n\n            this.webglRenderer.render(view.scene, view.camera);\n\n            index += 1;\n        }\n    }\n}\n","import DebugStats from './statsjs';\n\nconst _rendererStats = function () {\n    const container = document.createElement('div');\n\n    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n    const msDiv = document.createElement('div');\n\n    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#200;';\n    container.appendChild(msDiv);\n\n    const msText = document.createElement('div');\n\n    msText.style.cssText = 'color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n    msText.innerHTML = 'WebGLRenderer';\n    msDiv.appendChild(msText);\n\n    const msTexts = [];\n    const nLines = 9;\n\n    for (let i = 0; i < nLines; i++) {\n        msTexts[i] = document.createElement('div');\n        msTexts[i].style.cssText = 'color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        msDiv.appendChild(msTexts[i]);\n        msTexts[i].innerHTML = '-';\n    }\n\n    let lastTime = Date.now();\n\n    return {\n        domElement: container,\n\n        update: function (info) {\n            // refresh only 30time per second\n            if (Date.now() - lastTime < 1000 / 30) {\n                return;\n            }\n\n            lastTime = Date.now();\n\n            let i = 0;\n\n            if (info) {\n                msTexts[i++].textContent = '== Memory =====';\n                msTexts[i++].textContent = 'Programs: ' + info.memory.programs;\n                msTexts[i++].textContent = 'Geometries: ' + info.memory.geometries;\n                msTexts[i++].textContent = 'Textures: ' + info.memory.textures;\n\n                msTexts[i++].textContent = '== Render =====';\n                msTexts[i++].textContent = 'Calls: ' + info.render.calls;\n                msTexts[i++].textContent = 'Vertices: ' + info.render.vertices;\n                msTexts[i++].textContent = 'Faces: ' + info.render.faces;\n                msTexts[i++].textContent = 'Points: ' + info.render.points;\n            }\n        }\n    };\n};\n\nexport default class RenderDebug {\n    constructor (renderer) {\n        this.renderer = renderer;\n    }\n\n    init () {\n        this.statjs = new DebugStats();\n        this.statjs.setModes([0, 1, 2]);\n\n        // Stats.js\n        this.statjs.domElement.style.position = 'absolute';\n        this.statjs.domElement.style.right = '81px';\n        this.statjs.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.statjs.domElement);\n\n        this.rendererStats = _rendererStats();\n\n        // renderer-stats.js\n        this.rendererStats.domElement.style.position = 'absolute';\n\n        this.rendererStats.domElement.style.right = '0px';\n        this.rendererStats.domElement.style.bottom = '0px';\n\n        document.body.appendChild(this.rendererStats.domElement);\n    }\n\n    before () {\n        this.statjs.begin();\n    }\n\n    after () {\n        this.statjs.end();\n        this.rendererStats.update(this.renderer.info);\n    }\n}\n","import {ThreeRenderer} from \"./ThreeRenderer\";\nimport RenderDebug from \"../utils/debug/RenderDebug\";\nimport {WebGLProgram, WebGLPrograms} from \"three\";\n\nexport class DebugThreeRenderer extends ThreeRenderer {\n    private info: {} = {};\n    private readonly renderDebug: RenderDebug;\n\n    constructor() {\n        super();\n\n        this.renderDebug = new RenderDebug(this);\n        this.renderDebug.init();\n    }\n\n    render(interpolationPercentage) {\n        this.webglRenderer.clear();\n\n        const info = {\n            memory: {\n                programs: 0,\n                geometries: 0,\n                textures: 0\n            },\n            render: {\n                calls: 0,\n                vertices: 0,\n                faces: 0,\n                points: 0\n            }\n        };\n\n        let index = 0;\n\n        if (this.views) {\n            for (const view of this.views) {\n                if (index > 0) {\n                    this.webglRenderer.clearDepth();\n                }\n\n                this.webglRenderer.render(view.scene, view.camera);\n\n                const programs: WebGLProgram[] = this.webglRenderer.info.programs as unknown as WebGLProgram[];\n\n                info.memory.programs += programs.length;\n                info.memory.geometries += this.webglRenderer.info.memory.geometries;\n                info.memory.textures += this.webglRenderer.info.memory.textures;\n                info.render.calls += this.webglRenderer.info.render.calls;\n                info.render.vertices += this.webglRenderer.info.render.vertices;\n                info.render.faces += this.webglRenderer.info.render.faces;\n                info.render.points += this.webglRenderer.info.render.points;\n\n                index += 1;\n            }\n\n        }\n\n        this.info = info;\n    }\n\n    preRender(): void {\n        this.renderDebug.before();\n    }\n\n    postRender(): void {\n        this.renderDebug.after();\n    }\n}\n","import {State} from \"../../client/State\";\nimport Engine from \"../Engine\";\n\nexport class NullState extends State\n{\n    constructor(engine: Engine) {\n        super('null', engine);\n    }\n\n    update() {\n    }\n}\n","import {ThreeRenderer} from './graphics/ThreeRenderer';\nimport {DebugThreeRenderer} from './graphics/DebugThreeRenderer';\nimport Mainloop from '@arjanfrans/mainloop';\nimport {State} from \"../client/State\";\nimport {NullState} from \"./state/NullState\";\nimport {InputSourceInterface} from \"./input/InputSourceInterface\";\n\nclass Engine {\n    private readonly debugMode: boolean;\n    private states: Map<string, State> = new Map();\n    private currentState: State;\n    private readonly renderer: ThreeRenderer;\n    public readonly inputSources: Map<string, InputSourceInterface> = new Map()\n\n    constructor (debugMode: boolean, inputSources: { [key: string]: InputSourceInterface}) {\n        this.debugMode = debugMode;\n        this.currentState = new NullState(this);\n\n        for(const [key, inputSource] of Object.entries(inputSources)) {\n            this.inputSources.set(key, inputSource);\n        }\n\n        if (this.debugMode) {\n            this.renderer = new DebugThreeRenderer();\n        } else {\n            this.renderer = new ThreeRenderer();\n        }\n    }\n\n    /**\n     * Add a State to the engine.\n     *\n     * @param {string} name - Name of the state.\n     * @param {State} state - Instance of the state.\n     *\n     * @returns {void}\n     */\n    addState (name, state) {\n        this.states.set(name, state);\n    }\n\n    /**\n     * Change the current state and change the renderer's view to the view of the state.\n     *\n     * @param {string} name - Name of the state to change to.\n     *\n     * @returns {void}\n     */\n    changeState (name) {\n        const state = this.states.get(name);\n\n        if (!state) {\n            throw new Error(`State ${name} not found.`);\n        }\n\n        this.currentState = state;\n        this.currentState.init();\n\n        if (this.currentState.views.size > 0) {\n            this.renderer.views = this.currentState.views;\n        } else {\n            console.warn('currentState has no View');\n        }\n    }\n\n    /**\n     * Remove a state from the engine.\n     *\n     * @param {string} name - Name of the state to remove.\n     *\n     * @returns {void}\n     */\n    removeState (name) {\n        this.states.delete(name);\n    }\n\n    /**\n     * The game loop. Updates the current state and renders it's Views.\n     *\n     * @returns {void}\n     */\n    run () {\n        const render = (interpolationPercentage) => {\n            this.currentState.render(interpolationPercentage);\n            this.renderer.render(interpolationPercentage);\n        };\n\n        const update = (delta) => {\n            if (this.currentState) {\n                this.currentState.update(delta);\n            } else {\n                console.warn('no current State');\n            }\n        };\n\n        const before = () => {\n            this.renderer.preRender();\n        };\n\n        const after = () => {\n            this.renderer.postRender();\n        };\n\n        const loop = new Mainloop();\n\n        loop.setUpdate(update);\n        loop.setDraw(render);\n\n        if (this.debugMode) {\n            loop.setBegin(before);\n            loop.setEnd(after);\n        }\n\n        loop.start();\n    }\n}\n\nexport default Engine;\n","/**\n * Copyright 2014 Christopher Dolphin. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author dolphin@likethemammal.com (Chris Dolphin)\n */\n\n/**\n * GamepadMicro provides an easy interface to the Gamepad API.\n *\n * @constructor\n */\nfunction GamepadMicro () {\n    this._buttonNames = [\n        'actionSouth',\n        'actionEast',\n        'actionWest',\n        'actionNorth',\n        'leftBumper',\n        'rightBumper',\n        'leftTrigger',\n        'rightTrigger',\n        'select',\n        'start',\n        'leftStick',\n        'rightStick',\n        'dPadUp',\n        'dPadDown',\n        'dPadLeft',\n        'dPadRight',\n        'extra'\n    ];\n\n    this.reset();\n}\n\nGamepadMicro.prototype.reset = function () {\n    this._ticking = false;\n    this._prevTimestamps = [];\n    this._connectionListening = false;\n    this._updateCallback = function () {};\n    this._prevRawGamepadTypes = [];\n    this.gamepadconnected = _getRawGamepads.length > 0;\n    this.gamepadConnected = Boolean(this.gamepadconnected);\n    this.gamepadSupported = Boolean(_gamepadSupported());\n    this.gamepads = [];\n    this._heldButtonDelay = 200;\n    this._heldTimestampByGamepad = {};\n};\n\nconst _newGamepad = function () {\n    return {\n        leftStick: { x: 0, y: 0 },\n        rightStick: { x: 0, y: 0 },\n        dPad: { x: 0, y: 0 },\n        buttons: {},\n        _pressed: {},\n        timestamp: 0\n    };\n};\n\nGamepadMicro.prototype.onUpdate = function (callback) {\n    this._updateCallback = callback;\n    this._checkForEvents();\n    this._setupPoll();\n};\n\nGamepadMicro.prototype.offUpdate = function () {\n    this._shouldRemoveEvents();\n    this._removePoll();\n};\n\nGamepadMicro.prototype.update = function () {\n    this._updateCallback(this.gamepads);\n};\n\nGamepadMicro.prototype._checkForEvents = function () {\n    if (!this._connectionListening) {\n        window.addEventListener('gamepadconnected', this._onGamepadConnected.bind(this), false);\n        window.addEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this), false);\n        this._connectionListening = true;\n    }\n};\n\nGamepadMicro.prototype._shouldRemoveEvents = function () {\n    if (this._connectionListening) {\n        window.removeEventListener('gamepadconnected', this._onGamepadConnected.bind(this));\n        window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnected.bind(this));\n        this._connectionListening = false;\n    }\n};\n\nGamepadMicro.prototype._onGamepadConnected = function (event) {\n    const gamepad = event.gamepad;\n\n    if (gamepad.mapping === 'standard') {\n        this.gamepads[gamepad.index] = _newGamepad();\n        this.gamepadconnected = true;\n\n        this.update();\n    }\n};\n\nGamepadMicro.prototype._onGamepadDisconnected = function (event) {\n    const disconnectedGamepad = event.gamepad;\n    const gamepads = this.gamepads;\n\n    gamepads.forEach(function (gamepad, index) {\n        if (index === disconnectedGamepad.index) {\n            gamepads.splice(index, 1);\n        }\n    });\n\n    if (!gamepads.length) {\n        this.gamepadconnected = false;\n    }\n\n    this.update();\n};\n\nconst _getRawGamepads = function () {\n    const gamepads = (navigator.getGamepads && navigator.getGamepads()) || (navigator.webkitGetGamepads && navigator.webkitGetGamepads());\n    const standardGamepads = [];\n\n    if (gamepads) {\n        for (let i = 0, len = gamepads.length; i < len; i++) {\n            const gp = gamepads[i];\n\n            if (gp && gp.mapping === 'standard') {\n                standardGamepads.push(gp);\n            }\n        }\n    }\n\n    return standardGamepads;\n};\n\nconst _buttonPressed = function (gamepad, index) {\n    if (!gamepad || !gamepad.buttons || index >= gamepad.buttons.length) {\n        return false;\n    }\n\n    const b = gamepad.buttons[index];\n    let pressure = null;\n\n    if (!b) {\n        return false;\n    }\n\n    pressure = b;\n\n    if (typeof b === 'object') {\n        pressure = b.value;\n    }\n\n    return (pressure === 1.0);\n};\n\nGamepadMicro.prototype._checkForGamepadChange = function () {\n    const rawGamepads = _getRawGamepads();\n    let changed = false;\n    const changedRawGamepads = {};\n    let gamepadIndex = 0;\n\n    for (let i = 0; i < rawGamepads.length; i++) {\n        const gamepad = rawGamepads[i];\n        let heldTimestamps = null;\n        let hasBeenHeld = null;\n\n        if (!gamepad.timestamp) {\n            continue;\n        }\n\n        gamepadIndex = gamepad.index;\n\n        // Browsers don't update the gamepad timestamp if a button remains held.\n        // This is a manual check to see if any button has been held. Since the\n        // browser would tell us if it released, we'll assume some button is\n        // still held and announce it's continued heldness.\n        heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n        hasBeenHeld = Object.keys(heldTimestamps).length === 0;\n\n        // Don’t do anything if the current timestamp is the same as previous\n        // one, which means that the state of the gamepad hasn’t changed.\n        // This is only supported by Chrome right now, so the first check\n        // makes sure we’re not doing anything if the timestamps are empty\n        // or undefined.\n\n        if (gamepad.timestamp === this._prevTimestamps[gamepadIndex] && hasBeenHeld) {\n            continue;\n        }\n\n        this._prevTimestamps[gamepadIndex] = gamepad.timestamp;\n        changedRawGamepads[gamepadIndex] = gamepad;\n        changed = true;\n    }\n\n    return (changed) ? changedRawGamepads : false;\n};\n\nGamepadMicro.prototype._poll = function () {\n    const rawGamepads = this._checkForGamepadChange();\n\n    if (!rawGamepads) {\n        return;\n    }\n\n    this.gamepadconnected = true;\n    this.gamepadConnected = true;\n    this.gamepadSupported = true;\n\n    const currentGamepads = this.gamepads;\n    const buttonNames = this._buttonNames;\n\n    Object.keys(rawGamepads).map((gamepadIndex) => {\n        const currentRawGamepad = rawGamepads[gamepadIndex];\n\n        if (!currentRawGamepad) {\n            return;\n        }\n\n        // Gamepad(s) has changed\n        if (typeof currentRawGamepad !== this._prevRawGamepadTypes[gamepadIndex]) {\n            this._prevRawGamepadTypes[gamepadIndex] = typeof currentGamepad;\n        }\n\n        const activeButtons = {};\n        const currentGamepad = currentGamepads[gamepadIndex] || _newGamepad();\n        const heldTimestamps = this._heldTimestampByGamepad[gamepadIndex] || {};\n\n        for (let k = 0, len = buttonNames.length; k < len; k++) {\n            const name = buttonNames[k];\n            const heldTimestamp = heldTimestamps[name];\n            let isSameTimestamp = null;\n            const wasDown = Boolean(currentGamepad._pressed[name]);\n            const isDown = currentGamepad._pressed[name] = _buttonPressed(currentRawGamepad, k);\n            const now = Date.now();\n\n            if (wasDown && !isDown) {\n                activeButtons[name] = {\n                    released: true,\n                    held: false\n                };\n\n                if (heldTimestamps) {\n                    delete heldTimestamps[name];\n                }\n            } else if (isDown) {\n                if (heldTimestamp) {\n                    isSameTimestamp = heldTimestamp.gamepadTimestamp === currentRawGamepad.timestamp;\n\n                    // If the gamepad timestamp hasn't changed and the time is after the held delay\n                    if ((isSameTimestamp && now > heldTimestamp.browserTimestamp + this._heldButtonDelay) || (currentRawGamepad.timestamp > heldTimestamp.gamepadTimestamp + this._heldButtonDelay)) {\n                        activeButtons[name] = {\n                            held: true\n                        };\n                    }\n                } else {\n                    heldTimestamps[name] = {\n\n                        // Gamepad Timestamps are HighResTimeStamps relative when gamepad was connected\n                        gamepadTimestamp: currentRawGamepad.timestamp,\n                        browserTimestamp: now\n                    };\n                }\n            }\n        }\n\n        this._heldTimestampByGamepad[gamepadIndex] = heldTimestamps;\n\n        currentGamepad.timestamp = currentRawGamepad.timestamp;\n        currentGamepad.buttons = activeButtons;\n\n        // update the sticks\n        currentGamepad.leftStick.x = currentRawGamepad.axes[0];\n        currentGamepad.leftStick.y = currentRawGamepad.axes[1];\n        currentGamepad.rightStick.x = currentRawGamepad.axes[2];\n        currentGamepad.rightStick.y = currentRawGamepad.axes[3];\n\n        // dpad isn't a true stick, infer from buttons\n        currentGamepad.dPad.x = (currentGamepad.buttons.dPadLeft ? -1 : 0) + (currentGamepad.buttons.dPadRight ? 1 : 0);\n        currentGamepad.dPad.y = (currentGamepad.buttons.dPadUp ? -1 : 0) + (currentGamepad.buttons.dPadDown ? 1 : 0);\n\n        this.gamepads[gamepadIndex] = currentGamepad;\n    });\n\n    this.update();\n};\n\nGamepadMicro.prototype._setupPoll = function () {\n    if (!this._ticking) {\n        this._ticking = true;\n        this._tick();\n    }\n};\n\nGamepadMicro.prototype._tick = function () {\n    const tickFunc = GamepadMicro.prototype._tick.bind(this);\n\n    this._poll();\n\n    if (this._ticking) {\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(tickFunc);\n        } else if (window.mozRequestAnimationFrame) {\n            window.mozRequestAnimationFrame(tickFunc);\n        } else if (window.webkitRequestAnimationFrame) {\n            window.webkitRequestAnimationFrame(tickFunc);\n        }\n    }\n};\n\nGamepadMicro.prototype._removePoll = function () {\n    this._ticking = false;\n};\n\nconst _gamepadSupported = function () {\n    return navigator.getGamepads ||\n        Boolean(navigator.webkitGetGamepads) ||\n        Boolean(navigator.webkitGamepads);\n};\n\nexport default GamepadMicro;\n","import GamepadMicro from './utils/gamepad-micro';\n\nexport class Gamepad {\n    private readonly gp: any;\n    private gamepad: any;\n    private readonly _previousGamepadStick: {};\n    private readonly _previousGamepadButton: {};\n    public readonly gamepadIndex: number;\n\n    constructor() {\n        this._previousGamepadStick = {};\n        this._previousGamepadButton = {};\n        this.gamepadIndex = 0;\n        this.gp = new GamepadMicro();\n\n        this.gp.onUpdate((gamepads: []) => {\n            this.gamepad = gamepads[this.gamepadIndex];\n\n            if (this.gp.gamepadsconnected) {\n\n            } else {\n\n            }\n        });\n\n    }\n\n    isDown (button) {\n        if (this.gamepad?.buttons[button] && this.gamepad?.buttons[button].held) {\n            return true;\n        }\n\n        return false;\n    }\n\n    isStickDown (stick, direction) {\n        const gamepad = this.gamepad;\n\n        if (gamepad) {\n            if (stick === 'right' && gamepad.rightStick) {\n                if (direction === 'right') {\n                    if (gamepad.rightStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === 'left') {\n                    if (gamepad.rightStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'up') {\n                    if (gamepad.rightStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'down') {\n                    if (gamepad.rightStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n\n            if (stick === 'left' && gamepad.leftStick) {\n                if (direction === 'right') {\n                    if (gamepad.leftStick.x > 0.5) {\n                        return true;\n                    }\n                } else if (direction === 'left') {\n                    if (gamepad.leftStick.x < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'up') {\n                    if (gamepad.leftStick.y < -0.5) {\n                        return true;\n                    }\n                } else if (direction === 'down') {\n                    if (gamepad.leftStick.y > 0.5) {\n                        return true;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    gamepadStickDownOnce (stick, direction) {\n        if (!this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)) {\n            this._previousGamepadStick[stick + direction] = true;\n        } else if (this._previousGamepadStick[stick + direction] &&\n            !this.isStickDown(stick, direction)) {\n            this._previousGamepadStick[stick + direction] = false;\n        }\n    }\n\n    gamepadButtonDownOnce (button) {\n        if (!this._previousGamepadButton[button] && !this.isDown(button)) {\n            this._previousGamepadButton[button] = true;\n        } else if (this._previousGamepadButton[button] && !this.isDown(button)) {\n            this._previousGamepadButton[button] = false;\n        }\n    }\n}\n\n\nexport default Gamepad;\n","import {InputSourceInterface} from \"./InputSourceInterface\";\n\nimport Gamepad from './Gamepad';\n\nexport class GamepadInputSource implements InputSourceInterface\n{\n    public readonly gamepad: Gamepad;\n\n    constructor () {\n        this.gamepad = new Gamepad();\n    }\n}\n","import { Game } from './client/Game'\n\n(new Game()).start();\n"],"sourceRoot":""}